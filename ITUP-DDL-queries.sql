--------------------------------------------------------
--  File created - Saturday-March-06-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for DB Link TESTLIB
--------------------------------------------------------

  CREATE DATABASE LINK "TESTLIB"
   CONNECT TO "DEV_LIBRARY" IDENTIFIED BY VALUES ':1'
   USING '10.100.1.133:1521/sdudb';
--------------------------------------------------------
--  DDL for Type T
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "DEV_LIBRARY"."T" is table of tt


/
--------------------------------------------------------
--  DDL for Type TT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "DEV_LIBRARY"."TT" AS OBJECT
(
  material_type number,
  material_id VARCHAR2(12),
  bs_state number,
  last_rmid number,
  last_actions varchar2(20000),
  action_states varchar2(20000),
  is_ok varchar2(200),
  sebeb varchar2(500)
)


/
--------------------------------------------------------
--  DDL for Sequence MIGRATIONS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."MIGRATIONS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence OAUTH_CLIENTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."OAUTH_CLIENTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence OAUTH_PERSONAL_ACCESS_CLIENTS_
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS_"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_BARCODE
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_BARCODE"  MINVALUE 10865828 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10865829 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_CONTACT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_CONTACT_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 42 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_BOOKS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_BOOKS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 105960 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_BOOK_AUTHOR_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_BOOK_AUTHOR_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 413070 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_CFG
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_CFG"  MINVALUE 1 MAXVALUE 9999999999999999 INCREMENT BY 1 START WITH 84 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_DISCS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_DISCS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 895 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_HESABLAR_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_HESABLAR_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 506 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_HESAB_MATS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_HESAB_MATS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5154 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_INFO_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_INFO_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6914 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_INVENTARY_EMELIYYAT_NO
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_INVENTARY_EMELIYYAT_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 19144 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_INVENTORY_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_INVENTORY_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 312766 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_INVENTORY_TAGS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_INVENTORY_TAGS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 13908 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_INV_REQUESTS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_INV_REQUESTS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22807 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_ITEM_NO
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_ITEM_NO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 89370 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_JOURNALS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_JOURNALS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 360 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_JOURNAL_ISSUES_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_JOURNAL_ISSUES_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1331 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_JOURNAL_SUBSRIPTION_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_JOURNAL_SUBSRIPTION_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_LOANS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_LOANS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 200655 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_LOAN_ACTION_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_LOAN_ACTION_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 398332 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_LOGS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_LOGS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 348030 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_MATERIAL_LANG_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_MATERIAL_LANG_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 47736 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_MAT_SUBJECT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_MAT_SUBJECT_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 47506 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_PUBLISHER_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_PUBLISHER_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16460 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_PUBLISH_INTERVALS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_PUBLISH_INTERVALS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 9 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_RESERVE_LIST_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_RESERVE_LIST_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_LIB_SUBJECTS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_LIB_SUBJECTS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8307 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SEQ_WEB_LOG_ID
--------------------------------------------------------

   CREATE SEQUENCE  "DEV_LIBRARY"."SEQ_WEB_LOG_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 144 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table INVENTORY_BOOK
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."INVENTORY_BOOK" 
   (	"INV_ID" NUMBER, 
	"PRINT_DATE" DATE, 
	"WEB_LOG" NUMBER, 
	"INVENTORY_NO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_BATCH_STATUS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_BATCH_STATUS" 
   (	"ID" NUMBER, 
	"TITLE_EN" VARCHAR2(50 BYTE), 
	"TITLE_KZ" VARCHAR2(50 BYTE), 
	"TITLE_RU" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_BIBLIOGRAPHIC_INFO
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" 
   (	"INFO_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"JOURNAL_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"XML_DATA" "XMLTYPE", 
	"APP_LOG" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" 
 XMLTYPE COLUMN "XML_DATA" STORE AS SECUREFILE BINARY XML (
  TABLESPACE "LIBRARY" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ALLOW NONSCHEMA DISALLOW ANYSCHEMA ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO"."XML_DATA" IS 'XML Formated Inforamtion of Materials. All MARC fields infomation';
--------------------------------------------------------
--  DDL for Table LIB_BOOKS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_BOOKS" 
   (	"BOOK_ID" NUMBER, 
	"ISBN" VARCHAR2(30 BYTE), 
	"TITLE" VARCHAR2(500 BYTE), 
	"PUBLISHER_ID" NUMBER, 
	"PUB_YEAR" NUMBER, 
	"PUB_CITY" VARCHAR2(250 BYTE), 
	"EDITOR" VARCHAR2(500 BYTE), 
	"TRANSLATOR" VARCHAR2(500 BYTE), 
	"PAGE_NUM" NUMBER(5,0), 
	"SERIYA" VARCHAR2(75 BYTE), 
	"SURELI" NUMBER(1,0) DEFAULT 1, 
	"NOTE" VARCHAR2(500 BYTE), 
	"OLD_ID" NUMBER, 
	"PARALLEL_TITLE" VARCHAR2(500 BYTE), 
	"TITLE_RELATED_INFO" VARCHAR2(500 BYTE), 
	"PUB_INFO" VARCHAR2(500 BYTE), 
	"ISSUE_NUMBER" NUMBER, 
	"ISSUE_DATE" DATE, 
	"LANGUAGE" VARCHAR2(20 BYTE), 
	"TYPE" CHAR(2 BYTE) DEFAULT 'BK', 
	"CALLNUMBER" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."TITLE" IS 'Kitabin adi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."PUBLISHER_ID" IS 'Yayinevinin Idsini tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."PUB_YEAR" IS 'Yayinlandigi ili tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."PUB_CITY" IS 'Yayinlandigi seheri tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."EDITOR" IS 'editorun adi,soyadi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."TRANSLATOR" IS 'Tercumecinin adi,soyadi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."PAGE_NUM" IS 'Seyfe sayisi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."SERIYA" IS 'Seriya seklinde cap edilen kitablarin seriya adlarini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."SURELI" IS 'Sureli-suresiz oldugunu tutur. 1-Sureli, 0-Suresiz verilen kitablari gosterir. default = 1';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."OLD_ID" IS 'Bu fielt silinecek indi kocurtmek ucun qoyulub....Kohne Id''ni tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."LANGUAGE" IS 'language of the book';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOKS"."CALLNUMBER" IS 'unique code given to each item in the library';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_BOOKS"  IS 'Butun kitablar burda tutulur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_BOOKS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_BOOKS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_BOOK_AUTHORS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" 
   (	"BOOK_AUTHOR_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"NAME" VARCHAR2(100 BYTE), 
	"SURNAME" VARCHAR2(500 BYTE), 
	"IS_MAIN" NUMBER DEFAULT 0, 
	"SIGN" VARCHAR2(100 BYTE), 
	"TEMP_NAMES" VARCHAR2(500 BYTE), 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOK_AUTHORS"."IS_MAIN" IS 'bir kitabda esas muellifi tutur: 1-esas muellif    0-esas olmayan muellif';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_BOOK_AUTHORS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_BOOK_AUTHORS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_BOOK_INFO
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_BOOK_INFO" 
   (	"ID" NUMBER(10,0), 
	"FMT" NUMBER(1,0), 
	"F005" DATE, 
	"F020A" VARCHAR2(16 BYTE), 
	"F035" NUMBER(12,0), 
	"F041_1A" VARCHAR2(2 BYTE), 
	"F041_1B" VARCHAR2(2 BYTE), 
	"F043" VARCHAR2(2 BYTE), 
	"F049" VARCHAR2(10 BYTE), 
	"F050" VARCHAR2(20 BYTE), 
	"F082" VARCHAR2(20 BYTE), 
	"F100_1A" VARCHAR2(30 BYTE), 
	"F100_1C" VARCHAR2(10 BYTE), 
	"F100_1Q" VARCHAR2(30 BYTE), 
	"F100_1D" VARCHAR2(9 BYTE), 
	"F110_1A" VARCHAR2(30 BYTE), 
	"F110_1B" VARCHAR2(30 BYTE), 
	"F110_2A" VARCHAR2(30 BYTE), 
	"F110_2B" VARCHAR2(30 BYTE), 
	"F111_2A" VARCHAR2(30 BYTE), 
	"F111_2N" VARCHAR2(10 BYTE), 
	"F111_2D" VARCHAR2(4 BYTE), 
	"F111_2C" VARCHAR2(20 BYTE), 
	"F130_0A" VARCHAR2(20 BYTE), 
	"F130_0N" VARCHAR2(3 BYTE), 
	"F130_0P" VARCHAR2(20 BYTE), 
	"F130_0L" VARCHAR2(2 BYTE), 
	"F240_1A" VARCHAR2(30 BYTE), 
	"F240_1L" VARCHAR2(2 BYTE), 
	"F245A" VARCHAR2(250 BYTE), 
	"F245H" VARCHAR2(10 BYTE), 
	"F245B" VARCHAR2(30 BYTE), 
	"F245C" VARCHAR2(50 BYTE), 
	"F246A" VARCHAR2(30 BYTE), 
	"F250A" VARCHAR2(10 BYTE), 
	"F260A" VARCHAR2(20 BYTE), 
	"F260B" VARCHAR2(75 BYTE), 
	"F260C" VARCHAR2(4 BYTE), 
	"F300A" VARCHAR2(10 BYTE), 
	"F300B" VARCHAR2(10 BYTE), 
	"F300C" VARCHAR2(12 BYTE), 
	"F300E" VARCHAR2(10 BYTE), 
	"F440A" VARCHAR2(75 BYTE), 
	"F500A" VARCHAR2(80 BYTE), 
	"F5004" VARCHAR2(60 BYTE), 
	"F505_0A" VARCHAR2(200 BYTE), 
	"F520A" VARCHAR2(200 BYTE), 
	"F538A" VARCHAR2(200 BYTE), 
	"F546A" VARCHAR2(2 BYTE), 
	"F600_10A" VARCHAR2(30 BYTE), 
	"F600_10C" VARCHAR2(10 BYTE), 
	"F600_10Q" VARCHAR2(30 BYTE), 
	"F600_10D" VARCHAR2(10 BYTE), 
	"F610_10A" VARCHAR2(30 BYTE), 
	"F610_10B" VARCHAR2(30 BYTE), 
	"F610_20A" VARCHAR2(30 BYTE), 
	"F610_20B" VARCHAR2(30 BYTE), 
	"F611_20A" VARCHAR2(30 BYTE), 
	"F611_20N" VARCHAR2(10 BYTE), 
	"F611_20D" DATE, 
	"F611_20C" VARCHAR2(20 BYTE), 
	"F630_00A" VARCHAR2(30 BYTE), 
	"F630_00N" VARCHAR2(10 BYTE), 
	"F630_00P" VARCHAR2(30 BYTE), 
	"F650_0A" VARCHAR2(40 BYTE), 
	"F650_0X" VARCHAR2(40 BYTE), 
	"F650_0Y" VARCHAR2(40 BYTE), 
	"F650_0Z" VARCHAR2(40 BYTE), 
	"F650_0V" VARCHAR2(20 BYTE), 
	"F651_0A" VARCHAR2(40 BYTE), 
	"F651_0X" VARCHAR2(40 BYTE), 
	"F651_0Y" VARCHAR2(40 BYTE), 
	"F651_0V" VARCHAR2(20 BYTE), 
	"F700_1A" VARCHAR2(30 BYTE), 
	"F700_1C" VARCHAR2(10 BYTE), 
	"F700_1Q" VARCHAR2(30 BYTE), 
	"F700_1D" VARCHAR2(10 BYTE), 
	"F700_1E" VARCHAR2(4 BYTE), 
	"F710_1A" VARCHAR2(30 BYTE), 
	"F710_1B" VARCHAR2(30 BYTE), 
	"F710_2A" VARCHAR2(30 BYTE), 
	"F710_2B" VARCHAR2(30 BYTE), 
	"F711_2A" VARCHAR2(30 BYTE), 
	"F711_2N" VARCHAR2(10 BYTE), 
	"F711_2D" VARCHAR2(9 BYTE), 
	"F711_2C" VARCHAR2(20 BYTE), 
	"F730_0A" VARCHAR2(30 BYTE), 
	"F730_0N" VARCHAR2(10 BYTE), 
	"F730_0P" VARCHAR2(30 BYTE), 
	"F740_0A" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOK_INFO"."F020A" IS 'ISBN';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_BOOK_INFO"."F700_1Q" IS 'translator';
--------------------------------------------------------
--  DDL for Table LIB_CFG
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_CFG" 
   (	"CFG_ID" NUMBER, 
	"CFG_TYPE" VARCHAR2(50 BYTE), 
	"CFG_NAME" VARCHAR2(100 BYTE), 
	"DATA" VARCHAR2(10 BYTE), 
	"NOTE" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CFG"."CFG_TYPE" IS 'CFG''nin tipi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CFG"."CFG_NAME" IS 'CFG adi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CFG"."DATA" IS 'Degisgenleri tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CFG"."NOTE" IS 'Qeyd';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_CFG"  IS 'Bu deyisgenler burada tutulur...';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_CFG" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_CONTACTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_CONTACTS" 
   (	"CONTACT_ID" NUMBER DEFAULT "DEV_LIBRARY"."SEQ_CONTACT_ID"."NEXTVAL", 
	"TYPE_ID" NUMBER, 
	"CONTACT" VARCHAR2(50 BYTE), 
	"PUBLISHER" NUMBER, 
	"SUPPLIER" NUMBER, 
	"NOTE" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CONTACTS"."CONTACT" IS 'Email, Telefon, Faks vesari yazilir';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_CONTACTS"."NOTE" IS 'Əlavə qeydlər. Məs. Doğum yeri telefonu.';
--------------------------------------------------------
--  DDL for Table LIB_CONTACT_TYPES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" 
   (	"TYPE_ID" NUMBER, 
	"TITLE_EN" VARCHAR2(30 BYTE), 
	"TITLE_RU" VARCHAR2(30 BYTE), 
	"TITLE_KZ" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_CURRENCIES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_CURRENCIES" 
   (	"CODE" NUMBER, 
	"CURRENCY" CHAR(3 BYTE), 
	"TITLE_EN" VARCHAR2(75 BYTE), 
	"TITLE_KZ" VARCHAR2(75 BYTE), 
	"TITLE_RU" VARCHAR2(75 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_DEWEY
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_DEWEY" 
   (	"KEY" CHAR(3 BYTE), 
	"P_ID" CHAR(3 BYTE), 
	"TITLE_EN" VARCHAR2(250 BYTE), 
	"TITLE_TR" VARCHAR2(250 BYTE), 
	"TITLE_AZ" VARCHAR2(250 BYTE), 
	"IS_VISIBLE" NUMBER DEFAULT 1, 
	"IS_ACTIVE" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_DISCS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_DISCS" 
   (	"DISC_ID" NUMBER, 
	"NAME" VARCHAR2(500 BYTE), 
	"ISBN" VARCHAR2(30 BYTE), 
	"ISSN" VARCHAR2(30 BYTE), 
	"PUBLISHER_ID" NUMBER, 
	"PUB_YEAR" NUMBER, 
	"PUB_CITY" VARCHAR2(250 BYTE), 
	"OLD_ID" NUMBER, 
	"PARALLEL_TITLE" VARCHAR2(500 BYTE), 
	"PUB_INFO" VARCHAR2(500 BYTE), 
	"ISSUE_NUMBER" NUMBER, 
	"ISSUE_DATE" DATE, 
	"LANGUAGE" CHAR(2 BYTE), 
	"TYPE" CHAR(2 BYTE) DEFAULT 'CF', 
	"CALLNUMBER" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_DISCS"."NAME" IS 'Disklerin adlarini tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_DISCS"."CALLNUMBER" IS 'unique code given to each item in the library';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_DISCS"  IS 'Disklerin siyahiisini tutur....';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_DISCS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_DISCS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_ETIKET_SEBET
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_ETIKET_SEBET" 
   (	"SEBET_ADI" VARCHAR2(70 BYTE), 
	"INV_ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON TABLE "DEV_LIBRARY"."LIB_ETIKET_SEBET"  IS 'Etiketi cixarilacaq inventarlarin siyahisini tutur';
--------------------------------------------------------
--  DDL for Table LIB_HESABLAR
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_HESABLAR" 
   (	"HESAB_ID" NUMBER, 
	"TITLE" VARCHAR2(50 BYTE), 
	"CREATE_DATE" DATE, 
	"USER_ID" NUMBER, 
	"STATUS" NUMBER(1,0) DEFAULT 0, 
	"SUPPLIER_ID" NUMBER, 
	"INVOICE_DATE" DATE, 
	"SUPPLY_TYPE" CHAR(1 BYTE), 
	"ITEMS_NO" NUMBER, 
	"TITLES_NO" NUMBER, 
	"DOC_NO" NUMBER, 
	"CONTRACT_NO" NUMBER, 
	"INVOICE_DETAILS" VARCHAR2(2000 BYTE), 
	"COST" NUMBER, 
	"EDITED_BY" NUMBER, 
	"EDIT_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."TITLE" IS 'Batches name ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."CREATE_DATE" IS 'Batches creation Date';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."USER_ID" IS 'Id of created employee';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."STATUS" IS 'Status: 1-checked 0-not checked: default: 0';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."SUPPLIER_ID" IS 'SUPPLIER_ID for Batches';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."SUPPLY_TYPE" IS 'B-BOUGHT, D-DONATED';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."ITEMS_NO" IS 'Number of items in batch';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."TITLES_NO" IS 'Number of Titles in batch';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."INVOICE_DETAILS" IS 'Other information about batch';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESABLAR"."COST" IS 'Total price of all items in Batch';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_HESABLAR"  IS 'Toplu gelen materiallar ucun bir hesab acilir';
--------------------------------------------------------
--  DDL for Table LIB_HESAB_MATS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" 
   (	"HESAB_MAT_ID" NUMBER, 
	"HESAB_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"COUNT" NUMBER, 
	"GIRIS_TARIXI" DATE, 
	"USER_ID" NUMBER, 
	"USER_CID" CHAR(7 BYTE), 
	"EDITED_BY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."HESAB_ID" IS 'Hesab IDsini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."BOOK_ID" IS 'Kitab IDsi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."J_ISSUE_ID" IS 'Jurnal sayi IDsi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."DISC_ID" IS 'Disc IDsi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."COUNT" IS 'Material sayini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."GIRIS_TARIXI" IS 'Materailin giris tarixini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_HESAB_MATS"."USER_ID" IS 'Kitabxanacinin IDsi tutur';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_HESAB_MATS"  IS 'BIR HESABA AID GIRILMESI LAZIM OLAN MATERIALLARI TUTUR';
--------------------------------------------------------
--  DDL for Table LIB_HESAB_MATS_TEMP
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_HESAB_MATS_TEMP" 
   (	"HESAB_MAT_ID" NUMBER, 
	"HESAB_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"COUNT" NUMBER, 
	"GIRIS_TARIXI" DATE, 
	"USER_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_INVENTORIES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_INVENTORIES" 
   (	"INV_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" VARCHAR2(500 BYTE), 
	"AUTHOR" VARCHAR2(500 BYTE), 
	"COST" NUMBER, 
	"HESAB_ID" NUMBER, 
	"PUBLISHER" NUMBER, 
	"SUPPLIER" NUMBER, 
	"SUPPLY_TYPE" CHAR(1 BYTE), 
	"INV_NO" NUMBER, 
	"BARCODE" NUMBER, 
	"ISBN" NUMBER, 
	"USER_CID" CHAR(7 BYTE), 
	"CREATE_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_INVENTORY
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_INVENTORY" 
   (	"INV_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"RECEIVE_DATE" DATE, 
	"ODA_ID" NUMBER, 
	"STATUS" NUMBER DEFAULT 1, 
	"OLD_INV_ID" VARCHAR2(12 BYTE), 
	"HESAB_ID" NUMBER, 
	"EMELIYYAT_NO" NUMBER, 
	"PRICE" NUMBER, 
	"CURRENCY" CHAR(3 BYTE), 
	"BARCODE" NUMBER DEFAULT "DEV_LIBRARY"."SEQ_BARCODE"."NEXTVAL", 
	"SIGLE_TYPE" CHAR(4 BYTE), 
	"USER_CID" CHAR(7 BYTE), 
	"USER_NAME" VARCHAR2(50 BYTE), 
	"EDITED_BY" CHAR(7 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."RECEIVE_DATE" IS 'Materialin gelis tarixi..Defaul olaraq database''e girildigi tarix';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."ODA_ID" IS 'Materialin saxlandigi otaq id''si';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."STATUS" IS 'Materialin statusu: 1-material var:  0-material yoxdur( itib yada database''den silinib)  -1 - Gorulmemesi ucun :  default : 1';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."OLD_INV_ID" IS 'burada f035 melumatlari kecici olaraq tutulur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."HESAB_ID" IS 'burada material toplu olaraq girilibse hesab IDsini tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."EMELIYYAT_NO" IS 'Kitabxanaya girilen kitab qrubunun nomresi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."PRICE" IS 'Price of materil';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."CURRENCY" IS 'Currency(Tenge, Dollar and etc.)';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY"."SIGLE_TYPE" IS 'Location of item where its stored';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_INVENTORY"  IS 'Butun materiallari demirbax bilgilerine gore tutur...';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_INVENTORY" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_INVENTORY" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_INVENTORY_TAGS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_INVENTORY_TAGS" 
   (	"TAG_ID" NUMBER, 
	"INV_ID" NUMBER, 
	"PRINT_DATE" DATE, 
	"SON" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TAGS"."INV_ID" IS 'İNVENTAR NÖMRƏSİ,';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TAGS"."PRINT_DATE" IS 'ETİKETİN ÇIXARILMA TARİXİ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TAGS"."SON" IS 'ƏN SON ETİKET ÇIXAN İNVENTAR ÜÇÜN "1" OLUR';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_INVENTORY_TAGS"  IS 'ETİKETİ ÇIXARILMIŞ İNVENTARLARI';
--------------------------------------------------------
--  DDL for Table LIB_INVENTORY_TEMP
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" 
   (	"INV_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"RECEIVE_DATE" DATE, 
	"ODA_ID" NUMBER, 
	"STATUS" NUMBER DEFAULT 1, 
	"OLD_INV_ID" VARCHAR2(12 BYTE), 
	"HESAB_ID" NUMBER, 
	"USER_NAME" VARCHAR2(25 BYTE), 
	"EMELIYYAT_NO" NUMBER, 
	"PRICE" NUMBER, 
	"CURRENCY" VARCHAR2(12 BYTE), 
	"BARCODE" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."RECEIVE_DATE" IS 'Materialin gelis tarixi..Defaul olaraq database''e girildigi tarix';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."ODA_ID" IS 'Materialin saxlandigi otaq id''si';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."STATUS" IS 'Materialin statusu: 1-material var:  0-material yoxdur( itib yada database''den silinib)  -1 - Gorulmemesi ucun :  default : 1';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."OLD_INV_ID" IS 'burada f035 melumatlari kecici olaraq tutulur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."HESAB_ID" IS 'burada material toplu olaraq girilibse hesab IDsini tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."USER_NAME" IS 'Kitabxanaci user adi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."EMELIYYAT_NO" IS 'Kitabxanaya girilen kitab qrubunun nomresi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."PRICE" IS 'Price of materil';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INVENTORY_TEMP"."CURRENCY" IS 'Currency(Tenge, Dollar and etc.)';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP"  IS 'Butun materiallari demirbax bilgilerine gore tutur...';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" TO "STDGENUSR";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Table LIB_INV_REQUESTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" 
   (	"LIB_INV_REQ_ID" NUMBER, 
	"USER_CID" CHAR(7 BYTE), 
	"INV_ID" NUMBER, 
	"REQ_START_DATE" DATE, 
	"REQ_END_DATE" DATE, 
	"ACTION_DATE" DATE DEFAULT sysdate, 
	"ISHAZIR" NUMBER, 
	"NOTE" VARCHAR2(300 BYTE), 
	"STATUS" NUMBER, 
	"WHO_CANCEL" NUMBER, 
	"HAZIR_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."USER_CID" IS 'Istifadeci No';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."INV_ID" IS 'Inventar ID';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."REQ_START_DATE" IS 'Sifarisin baslama tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."REQ_END_DATE" IS 'Sifarisin qurtarma tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."ACTION_DATE" IS 'Sifarisin giris vaxti';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."ISHAZIR" IS 'Sifarişin hazir olub olmadigini tutur. 0 - hazir deyil, 1 - hazirdir ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."NOTE" IS 'Eyer kitabxanaci terefinden sifaris legv edilse, burda onun izahi tutulur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."STATUS" IS 'Sifarisin veziyyeti tutulur. -1 - Legv edilib, 0 - Alinmayib, 1- Alinib';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."WHO_CANCEL" IS '1-Istifadeci,  2-Kitabxana, 3- Sistem legv edib';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_INV_REQUESTS"."HAZIR_DATE" IS 'Sifarisin hazirlanma vaxti';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS"  IS 'Sifarislerin listesini tutur.';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_INV_REQUESTS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_JOURNALS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_JOURNALS" 
   (	"JOURNAL_ID" NUMBER, 
	"ISBN" VARCHAR2(16 BYTE), 
	"TITLE" VARCHAR2(500 BYTE), 
	"PUBLISHER_ID" NUMBER, 
	"PUBLISH_INTERVAL_ID" NUMBER, 
	"BORC_VERME" NUMBER(1,0) DEFAULT 1, 
	"DIAGONAL" VARCHAR2(10 BYTE), 
	"PUB_YEAR" NUMBER, 
	"PUB_CITY" VARCHAR2(250 BYTE), 
	"EDITOR" VARCHAR2(500 BYTE), 
	"PAGE_NUM" NUMBER, 
	"SERIYA" VARCHAR2(100 BYTE), 
	"OLD_ID" NUMBER, 
	"PARALLEL_TITLE" VARCHAR2(500 BYTE), 
	"TITLE_RELATED_INFO" VARCHAR2(500 BYTE), 
	"PUB_INFO" VARCHAR2(500 BYTE), 
	"ISSUE_NUMBER" NUMBER, 
	"ISSUE_DATE" DATE, 
	"TEMP_PUBLISHER_TITLE" VARCHAR2(500 BYTE), 
	"LANGUAGE" CHAR(2 BYTE), 
	"TYPE" CHAR(2 BYTE) DEFAULT 'CR', 
	"CALLNUMBER" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."TITLE" IS 'Jurnal adi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."PUBLISHER_ID" IS 'Yayin evini id''sini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."PUBLISH_INTERVAL_ID" IS 'yayin araligini tutur..';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."BORC_VERME" IS '0-Borc verile bilmez, 1-Borc verile biler';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."DIAGONAL" IS 'Jurnalin diagonal boyu';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNALS"."CALLNUMBER" IS 'unique code given to each item in the library';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_JOURNALS"  IS 'JURNAL TIPLERINI TUTUR, MES: "BILIM VE TEKNIK"';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_JOURNALS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_JOURNALS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_JOURNAL_ISSUES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" 
   (	"J_ISSUE_ID" NUMBER, 
	"JOURNAL_ID" NUMBER, 
	"ISSUE" NUMBER, 
	"ISSUE_NAME" VARCHAR2(500 BYTE), 
	"PAGE_NUM" NUMBER, 
	"DIAGONAL" VARCHAR2(10 BYTE), 
	"ISSUE_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."JOURNAL_ID" IS 'Journal tipinin kodunu tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."ISSUE" IS 'Umumi sayiisini tutur. mes: bu sayi 315.ci sayidir.';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."ISSUE_NAME" IS 'Bu buraxilisin hansi sayi oldugunu tutur: mes:Yanvar sayisi,Aprel sayisi, 2-9 Mart sayisi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."PAGE_NUM" IS 'Sehife sayisini tutur..';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."DIAGONAL" IS 'Burada diagonal boyunu tutur.Defaul olaraq Journals table''den goturur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"."ISSUE_DATE" IS 'Yayindan cixis tarixi';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES"  IS 'Jurnal sayilarini tutur...';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_JOURNAL_SUBSCRIPTION
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" 
   (	"JOURNAL_S_ID" NUMBER, 
	"JOURNAL_ID" NUMBER, 
	"START_DATE" DATE, 
	"END_DATE" DATE, 
	"WARNING_DATE" DATE, 
	"PRICE" NUMBER, 
	"WARNING_STATUS" NUMBER(1,0), 
	"SON" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."START_DATE" IS 'Aboneliyin baslama tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."END_DATE" IS 'Aboneliyin qurtarma tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."WARNING_DATE" IS 'Xeberdarliq tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."PRICE" IS 'Aboneliyin qiymeti';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."WARNING_STATUS" IS '0-Passivdir( Xeberdarliq elemeyecek ) 1-Aktivdir (Xeberdarliq aciqdir)';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"."SON" IS 'Eyni Jurnalin en son abune odemesini saxlayir.';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION"  IS 'Aboneliyin odemeleri haqqinda melumatlari tutur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_KSU_TEMP
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_KSU_TEMP" 
   (	"SUPPLIER_NAME" VARCHAR2(500 BYTE), 
	"PUBLISHER_NAME" VARCHAR2(100 BYTE), 
	"ENTRANCE_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_LOANS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_LOANS" 
   (	"LOAN_ID" NUMBER, 
	"INV_ID" NUMBER, 
	"USER_CID" CHAR(7 BYTE), 
	"BORROW_DATE" DATE, 
	"DUE_DATE" DATE, 
	"DELIVERY_DATE" DATE, 
	"LOCKED" NUMBER(1,0) DEFAULT 0, 
	"OLD_ID" NUMBER, 
	"CEZA" NUMBER, 
	"CEZA_ODENIB" NUMBER, 
	"UZATMA_SAYI" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."INV_ID" IS 'hansi materil borc verilir,onu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."USER_CID" IS 'kim odunc alir,onu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."BORROW_DATE" IS 'ne vaxt odunc alib,onu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."DUE_DATE" IS 'ne vaxt qaytarmalidir,onu tutur.Eyer burasi bossa demek ki,suresiz verilib ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."DELIVERY_DATE" IS 'ne vaxt qaytardi,onu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."LOCKED" IS 'Kilitli olub olmadiigi tutur,hele de istifadeci material uzerinde is gorurse,locked=0 olacaq,materila qaytarilibsa,ya da itibse,locked=1,       default=0';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."OLD_ID" IS 'Kohne ID''ni tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."CEZA" IS 'Locked=1 olduqdan sonra ceza  qepik olaraq hesablanir ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."CEZA_ODENIB" IS '1- Odenib, 0- Odenmeyib....';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOANS"."UZATMA_SAYI" IS 'nece defe uzadildigini gosterir';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_LOANS"  IS 'Odunc vermeleri tutur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_LOANS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_LOANS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_LOAN_ACTION
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_LOAN_ACTION" 
   (	"LOAN_ACTION_ID" NUMBER, 
	"LOAN_ID" NUMBER, 
	"USER_ID" NUMBER, 
	"IP" VARCHAR2(15 BYTE), 
	"ACTION_DATE" DATE, 
	"ACTION_TYPE" VARCHAR2(1 BYTE), 
	"OLD_ID" NUMBER, 
	"SON" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."LOAN_ID" IS 'Loan Id''sini tutur...';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."USER_ID" IS 'deyisiklik eleyen kitabxanacinin user id''sini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."IP" IS 'kitabxanacinin IPsi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."ACTION_DATE" IS 'deyisiklik tarixini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."ACTION_TYPE" IS 'Deyisiklik tipini tutur( B-borrowed,aldi; D-deliveried,qaytardi; L-lost.itirdi)';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."OLD_ID" IS 'Kohne Id''ni tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOAN_ACTION"."SON" IS 'Son rekrordu gosterir eyer son=1''se o loan''in son action''idir';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_LOAN_ACTION"  IS 'bu, materilla istifadeci arasindaki butun prosesleri tutur....';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_LOAN_ACTION" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Table LIB_LOGS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_LOGS" 
   (	"LOG_ID" NUMBER DEFAULT "DEV_LIBRARY"."SEQ_LIB_LOGS_ID"."NEXTVAL", 
	"TABLE_NAME" VARCHAR2(100 BYTE), 
	"ROW_ID" VARCHAR2(70 BYTE), 
	"LOG_TYPE" NUMBER, 
	"COLUMN_NAME" VARCHAR2(100 BYTE), 
	"NEW_VALUE" VARCHAR2(500 BYTE), 
	"OLD_VALUE" VARCHAR2(500 BYTE), 
	"EMP_ID" VARCHAR2(9 BYTE) DEFAULT SYS_CONTEXT('qaf_app_ctx', 'USER_ID'), 
	"HOST_NAME" VARCHAR2(50 BYTE) DEFAULT SYS_CONTEXT('qaf_app_ctx', 'HOSTNAME'), 
	"IP" VARCHAR2(60 BYTE) DEFAULT SYS_CONTEXT('qaf_app_ctx', 'USER_IP'), 
	"ACTION_DATE" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."TABLE_NAME" IS 'hansi table''in log''u oldugunu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."ROW_ID" IS 'table''in IDsini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."LOG_TYPE" IS 'Log novunu tutur...1-insert, 2-update, 3-delete';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."COLUMN_NAME" IS 'melumatin hansi hissesi oldugunu tutur. ';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."NEW_VALUE" IS 'Yeni melumat';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."OLD_VALUE" IS 'Kohne melumat';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."EMP_ID" IS 'Istifadeci IDsini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."HOST_NAME" IS 'Komputer adini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."IP" IS 'Hansi IPden oldugunu tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_LOGS"."ACTION_DATE" IS 'log tarixi';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_LOGS"  IS 'Butun istifadeci deyisikliklerini tutur....';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_LOGS" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Table LIB_MARC_FIELDS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_MARC_FIELDS" 
   (	"FIELD_CODE" CHAR(3 BYTE), 
	"TITLE_EN" VARCHAR2(600 BYTE), 
	"TITLE_TR" VARCHAR2(600 BYTE), 
	"TITLE_AZ" VARCHAR2(600 BYTE), 
	"REPEATABLE" NUMBER(1,0), 
	"MANDATORY" NUMBER(1,0), 
	"IS_ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"IND1" CHAR(1 BYTE) DEFAULT '#', 
	"IND2" CHAR(1 BYTE) DEFAULT '#', 
	"TARGETS" VARCHAR2(200 BYTE) DEFAULT null
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_MARC_SUBFIELDS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_MARC_SUBFIELDS" 
   (	"FIELD_CODE" CHAR(3 BYTE), 
	"SUBFIELD_CODE" CHAR(1 BYTE), 
	"TITLE_EN" VARCHAR2(600 BYTE), 
	"TITLE_TR" VARCHAR2(600 BYTE), 
	"TITLE_AZ" VARCHAR2(600 BYTE), 
	"REPEATABLE" NUMBER, 
	"MANDATORY" NUMBER, 
	"IS_ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"TARGETS" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_MATERIAL_LANG
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" 
   (	"MAT_LANG_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"JOURNAL_ID" NUMBER, 
	"LANG_CODE" CHAR(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG"  IS 'materialllarin ( kitab veya jurnal ) dillerini tutur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_MATERIAL_LANG" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_MATERIAL_TYPES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_MATERIAL_TYPES" 
   (	"KEY" CHAR(2 BYTE), 
	"TITLE_EN" VARCHAR2(100 BYTE), 
	"TITLE_RU" VARCHAR2(100 BYTE), 
	"TITLE_KZ" VARCHAR2(100 BYTE), 
	"DESCRIPTION" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_MAT_SUBJECTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" 
   (	"MAT_SUBJ_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"JOURNAL_ID" NUMBER, 
	"SUBJECT_ID" NUMBER, 
	"IS_MAIN" NUMBER, 
	"DEWEY_KEY" CHAR(3 BYTE), 
	"DEP_CODE" VARCHAR2(15 BYTE), 
	"DISC_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_MAT_SUBJECTS"."SUBJECT_ID" IS 'Dewey kodunun IDsidir';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_MAT_SUBJECTS"."IS_MAIN" IS 'bir kitabda esas deweyi tutur: 1-esas dewey   0-esas olmayandewey';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS"  IS 'Material''larin Dewey kodlarini tutur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_MAT_SUBJECTS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_MAT_SUBJECTS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_OFFLINE_DATES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_OFFLINE_DATES" 
   (	"OFF_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON TABLE "DEV_LIBRARY"."LIB_OFFLINE_DATES"  IS 'Kitabxananin islemediyi vaxtlari tutur,,,,';
--------------------------------------------------------
--  DDL for Table LIB_PUBLISHERS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_PUBLISHERS" 
   (	"PUBLISHER_ID" NUMBER, 
	"NAME" VARCHAR2(300 BYTE), 
	"TEMP_PUB_ID" NUMBER, 
	"COMMERCIAL_NAME" VARCHAR2(100 BYTE), 
	"ADDRESS" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_PUBLISHERS"."NAME" IS 'Yayin evinin adlarini tutur';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_PUBLISHERS"  IS 'Yayin evlerinin adlarini tutur';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_PUBLISHERS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_PUBLISH_INTERVALS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" 
   (	"PUBLISH_INTERVAL_ID" NUMBER, 
	"NAME_AZ" VARCHAR2(10 BYTE), 
	"NAME_EN" VARCHAR2(10 BYTE), 
	"NAME_TR" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS"."PUBLISH_INTERVAL_ID" IS 'yayin araliginin kodunu gosterir...';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS"  IS 'yayin araliqlarini tutur...';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_RESERVE_LIST
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" 
   (	"LIB_RESERVE_ID" NUMBER DEFAULT "DEV_LIBRARY"."SEQ_LIB_RESERVE_LIST_ID"."NEXTVAL", 
	"USER_CID" CHAR(7 BYTE), 
	"BOOK_ID" NUMBER, 
	"J_ISSUE_ID" NUMBER, 
	"DISC_ID" NUMBER, 
	"ACTION_DATE" DATE DEFAULT sysdate, 
	"END_DATE" DATE, 
	"STATUS" NUMBER, 
	"EMAIL_SEND_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_RESERVE_LIST"."ACTION_DATE" IS 'Emeliyyat olan tarix';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_RESERVE_LIST"."END_DATE" IS 'Siyahiya durmanin son tarixi';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_RESERVE_LIST"."STATUS" IS 'Siraya durma veziyyeti:  0-Passiv, 1  -Aktiv';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_RESERVE_LIST"."EMAIL_SEND_DATE" IS 'Istifadeciye bu nov ucun emailin gonderilme tarixini tutur.';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST"  IS 'SIYAHIYA DURMA. ISTIFADECIDE OLAN MATERIALI ALMAQ ISTEYEN SIYAHIYA DURUR.';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_RESERVE_LIST" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_STUD_LIBRARIAN
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_STUD_LIBRARIAN" 
   (	"STUD_ID" CHAR(9 BYTE), 
	"PASSW" VARCHAR2(32 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;

   COMMENT ON TABLE "DEV_LIBRARY"."LIB_STUD_LIBRARIAN"  IS 'Kitabxanada isleyen telebeler';
--------------------------------------------------------
--  DDL for Table LIB_SUBJECTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_SUBJECTS" 
   (	"SUBJECT_ID" NUMBER, 
	"DEWEY_CODE" VARCHAR2(25 BYTE), 
	"NAME" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_SUBJECTS"."SUBJECT_ID" IS 'Id''sini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_SUBJECTS"."DEWEY_CODE" IS 'Dewey kodudur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_SUBJECTS"."NAME" IS 'katagoriyanin adidir...';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_SUBJECTS"  IS 'Dewey  kodlarini ve adlarini tutur.Katagoriyadir';
  GRANT SELECT ON "DEV_LIBRARY"."LIB_SUBJECTS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_SUBJECTS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table LIB_SUPPLIERS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_SUPPLIERS" 
   (	"SUPPLIER_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SUPPLIER_NAME" VARCHAR2(300 BYTE), 
	"COMMERCIAL_NAME" VARCHAR2(300 BYTE), 
	"BIN/INN" NUMBER, 
	"ADDRESS" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_SUPPLY_TYPES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_SUPPLY_TYPES" 
   (	"KEY" CHAR(1 BYTE), 
	"TITLE_EN" VARCHAR2(50 BYTE), 
	"TITLE_RU" VARCHAR2(50 BYTE), 
	"TITLE_KZ" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table LIB_USER_CARDS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."LIB_USER_CARDS" 
   (	"USER_CID" CHAR(7 BYTE), 
	"STUD_ID" CHAR(9 BYTE), 
	"EMP_ID" NUMBER, 
	"NAME" VARCHAR2(30 BYTE), 
	"SURNAME" VARCHAR2(30 BYTE), 
	"PSW" VARCHAR2(64 BYTE), 
	"ATTEMPT_COUNT" NUMBER, 
	"ATTEMPT_DATE" DATE, 
	"IS_ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"LAST_LOGIN_INFO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_USER_CARDS"."USER_CID" IS 'T-Telebe, P-Personal, K-Kenar, sonraki iki reqem ili gosterir';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_USER_CARDS"."STUD_ID" IS 'Telebe Id''sini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_USER_CARDS"."EMP_ID" IS 'Calisanlarin Id"sini tutur';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_USER_CARDS"."NAME" IS 'Kenardan gelenlerin adlari';
   COMMENT ON COLUMN "DEV_LIBRARY"."LIB_USER_CARDS"."SURNAME" IS 'Kenardan gelenlerin soyadlari';
   COMMENT ON TABLE "DEV_LIBRARY"."LIB_USER_CARDS"  IS 'butun istifadecilerin melumatlarini tutur';
  GRANT DELETE ON "DEV_LIBRARY"."LIB_USER_CARDS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_USER_CARDS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."LIB_USER_CARDS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table MARC_SUBFIELD_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."MARC_SUBFIELD_STRUCTURE" 
   (	"TAGFIELD" VARCHAR2(3 BYTE), 
	"TAGSUBFIELD" VARCHAR2(1 BYTE), 
	"LIBLIBRARIAN" VARCHAR2(255 BYTE), 
	"LIBOPAC" VARCHAR2(255 BYTE), 
	"REPEATABLE" NUMBER(4,0), 
	"MANDATORY" NUMBER(4,0), 
	"KOHAFIELD" VARCHAR2(40 BYTE), 
	"TAB" NUMBER(1,0), 
	"AUTHORISED_VALUE" VARCHAR2(32 BYTE), 
	"AUTHTYPECODE" VARCHAR2(20 BYTE), 
	"VALUE_BUILDER" VARCHAR2(80 BYTE), 
	"ISURL" NUMBER(1,0), 
	"HIDDEN" NUMBER(1,0), 
	"FRAMEWORKCODE" VARCHAR2(4 BYTE), 
	"SEEALSO" VARCHAR2(1100 BYTE), 
	"LINK" VARCHAR2(80 BYTE), 
	"DEFAULTVALUE" VARCHAR2(80 BYTE), 
	"MAXLENGTH" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table MARC_TAG_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."MARC_TAG_STRUCTURE" 
   (	"TAGFIELD" VARCHAR2(3 BYTE), 
	"LIBLIBRARIAN" VARCHAR2(600 BYTE), 
	"LIBOPAC" VARCHAR2(600 BYTE), 
	"REPEATABLE" NUMBER(4,0), 
	"MANDATORY" NUMBER(4,0), 
	"AUTHORISED_VALUE" VARCHAR2(10 BYTE), 
	"IND1_DEFAULTVALUE" VARCHAR2(1 BYTE), 
	"IND2_DEFAULTVALUE" VARCHAR2(1 BYTE), 
	"FRAMEWORKCODE" VARCHAR2(4 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table MIGRATIONS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."MIGRATIONS" 
   (	"ID" NUMBER(10,0), 
	"MIGRATION" VARCHAR2(255 BYTE), 
	"BATCH" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table OAUTH_ACCESS_TOKENS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" 
   (	"ID" VARCHAR2(100 BYTE), 
	"USER_ID" NUMBER(19,0), 
	"CLIENT_ID" NUMBER(19,0), 
	"NAME" VARCHAR2(255 BYTE), 
	"SCOPES" CLOB, 
	"REVOKED" CHAR(1 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6), 
	"EXPIRES_AT" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" 
 LOB ("SCOPES") STORE AS SECUREFILE (
  TABLESPACE "LIBRARY" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table OAUTH_AUTH_CODES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" 
   (	"ID" VARCHAR2(100 BYTE), 
	"USER_ID" NUMBER(19,0), 
	"CLIENT_ID" NUMBER(19,0), 
	"SCOPES" CLOB, 
	"REVOKED" CHAR(1 BYTE), 
	"EXPIRES_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" 
 LOB ("SCOPES") STORE AS SECUREFILE (
  TABLESPACE "LIBRARY" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table OAUTH_CLIENTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" 
   (	"ID" NUMBER(19,0), 
	"USER_ID" NUMBER(19,0), 
	"NAME" VARCHAR2(255 BYTE), 
	"SECRET" VARCHAR2(100 BYTE), 
	"PROVIDER" VARCHAR2(255 BYTE), 
	"REDIRECT" CLOB, 
	"PERSONAL_ACCESS_CLIENT" CHAR(1 BYTE), 
	"PASSWORD_CLIENT" CHAR(1 BYTE), 
	"REVOKED" CHAR(1 BYTE), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" 
 LOB ("REDIRECT") STORE AS SECUREFILE (
  TABLESPACE "LIBRARY" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table OAUTH_PERSONAL_ACCESS_CLIENTS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS" 
   (	"ID" NUMBER(19,0), 
	"CLIENT_ID" NUMBER(19,0), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table OAUTH_REFRESH_TOKENS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" 
   (	"ID" VARCHAR2(100 BYTE), 
	"ACCESS_TOKEN_ID" VARCHAR2(100 BYTE), 
	"REVOKED" CHAR(1 BYTE), 
	"EXPIRES_AT" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table ODBC_IMPORT
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."ODBC_IMPORT" 
   (	"ID" NUMBER, 
	"INVENTORY_ID" NUMBER, 
	"LOT_NUMBER" VARCHAR2(255 BYTE), 
	"STORAGE_SIGLE" VARCHAR2(255 BYTE), 
	"PRICE" VARCHAR2(255 BYTE), 
	"BARCODE" VARCHAR2(255 BYTE), 
	"RETIREMENT" VARCHAR2(255 BYTE), 
	"MATERIAL_TYPE" VARCHAR2(255 BYTE), 
	"CARRIER" VARCHAR2(255 BYTE), 
	"ISBN" VARCHAR2(255 BYTE), 
	"ISSN" VARCHAR2(255 BYTE), 
	"DOCS" VARCHAR2(255 BYTE), 
	"LBC_UDC" VARCHAR2(255 BYTE), 
	"TITLE" VARCHAR2(500 BYTE), 
	"PARALLEL_TITLE" VARCHAR2(500 BYTE), 
	"TITLE_RELATED_INFORMATION" VARCHAR2(500 BYTE), 
	"RESPONSIBILITY_INFORMATION" VARCHAR2(500 BYTE), 
	"PUBLICATION_INFORMATION" VARCHAR2(500 BYTE), 
	"PUBLICATION" VARCHAR2(500 BYTE), 
	"PLACE_OF_PUBLICATION" VARCHAR2(255 BYTE), 
	"PUBLICATION_YEAR" VARCHAR2(255 BYTE), 
	"ISSUE_NUMBER" VARCHAR2(255 BYTE), 
	"ISSUE_DATE" VARCHAR2(255 BYTE), 
	"AUTHORS" VARCHAR2(500 BYTE), 
	"PAGES" VARCHAR2(255 BYTE), 
	"SERIES_TITLE" VARCHAR2(500 BYTE), 
	"LANG" VARCHAR2(255 BYTE), 
	"SUBJECT_HEADING" VARCHAR2(500 BYTE), 
	"KEY_WORDS" VARCHAR2(500 BYTE), 
	"AUTHOR_SIGN" VARCHAR2(255 BYTE), 
	"SETUP_TYPE" VARCHAR2(255 BYTE), 
	"CONTENT_VIEW" VARCHAR2(255 BYTE), 
	"SPECIALITY" VARCHAR2(500 BYTE), 
	"PROGRAM" VARCHAR2(500 BYTE), 
	"GIVEN_TO" VARCHAR2(255 BYTE), 
	"FULL_NAME" VARCHAR2(255 BYTE), 
	"ISSUE_TIME" VARCHAR2(255 BYTE), 
	"CURRENCY" VARCHAR2(12 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table SIGLE_TYPES
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."SIGLE_TYPES" 
   (	"KEY" CHAR(4 BYTE), 
	"TITLE_EN" VARCHAR2(255 BYTE), 
	"TITLE_TR" VARCHAR2(255 BYTE), 
	"TITLE_AZ" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table TABLE_LIST
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."TABLE_LIST" 
   (	"TABLE_NAME" VARCHAR2(30 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"IS_PUBLIC" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Table TEMP_LIB_AUTHORS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" 
   (	"BOOK_AUTHOR_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"NAME" VARCHAR2(100 BYTE), 
	"SURNAME" VARCHAR2(500 BYTE), 
	"IS_MAIN" NUMBER, 
	"SIGN" VARCHAR2(100 BYTE), 
	"TEMP_NAMES" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."TEMP_LIB_AUTHORS"."IS_MAIN" IS 'bir kitabda esas muellifi tutur: 1-esas muellif    0-esas olmayan muellif';
  GRANT SELECT ON "DEV_LIBRARY"."TEMP_LIB_AUTHORS" TO "DBMASTER";
  GRANT SELECT ON "DEV_LIBRARY"."TEMP_LIB_AUTHORS" TO "STDGENUSR";
--------------------------------------------------------
--  DDL for Table THESIS
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."THESIS" 
   (	"F035" NUMBER, 
	"F245A" VARCHAR2(200 BYTE), 
	"F100_1Q" VARCHAR2(20 BYTE), 
	"F100_1A" VARCHAR2(20 BYTE), 
	"F245C" VARCHAR2(60 BYTE), 
	"F260C" VARCHAR2(4 BYTE), 
	"F130_0P" NUMBER, 
	"F520A" NUMBER, 
	"FAC_ID" NUMBER, 
	"DEP_ID" NUMBER, 
	"STUD_ID" VARCHAR2(9 BYTE), 
	"F300C" VARCHAR2(12 BYTE), 
	"TEACHER_ID" NUMBER, 
	"LANG_ID" NUMBER, 
	"DEPARTMENT" CHAR(5 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "LIBRARY" ;

   COMMENT ON COLUMN "DEV_LIBRARY"."THESIS"."F130_0P" IS 'Diplom işinin PDF formatında mövcudluğu';
   COMMENT ON COLUMN "DEV_LIBRARY"."THESIS"."F520A" IS '4.bakalavr 5-magistr';
--------------------------------------------------------
--  DDL for Table WEB_LOG
--------------------------------------------------------

  CREATE TABLE "DEV_LIBRARY"."WEB_LOG" 
   (	"LOG_ID" NUMBER, 
	"USER_ID" CHAR(7 BYTE), 
	"LOGIN_STATUS" NUMBER(1,0), 
	"LOG_DATE" DATE DEFAULT sysdate, 
	"USER_IP" VARCHAR2(15 BYTE), 
	"DEVICE_INFO" VARCHAR2(500 BYTE)
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" 
  PARTITION BY RANGE ("LOG_DATE") 
 (PARTITION "2025"  VALUES LESS THAN (TO_DATE(' 2025-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" , 
 PARTITION "2030"  VALUES LESS THAN (TO_DATE(' 2030-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ) ;

   COMMENT ON TABLE "DEV_LIBRARY"."WEB_LOG"  IS 'Login logs from web module';
--------------------------------------------------------
--  DDL for View MARC_FIELDS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DEV_LIBRARY"."MARC_FIELDS" ("ID", "PID", "FIELD_CODE", "IND1", "IND2", "TITLE", "DATA", "REPEATABLE", "TARGETS") AS 
  select mf.field_code as id, NULL as pid, mf.field_code, mf.ind1, mf.ind2, mf.title_en as title, NULL as data, mf.repeatable, mf.targets
from LIB_MARC_FIELDS mf where mf.is_active = 1
union
select ms.field_code||'.'||ms.subfield_code, ms.field_code, ms.subfield_code, NULL, NULL,  ms.title_en, NULL as data, ms.repeatable, ms.targets
from lib_marc_subfields ms where ms.is_active = 1

;
--------------------------------------------------------
--  DDL for View VIEW_MARC_FILEDS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DEV_LIBRARY"."VIEW_MARC_FILEDS" ("INFO_ID", "BOOK_ID", "JOURNAL_ID", "DISC_ID", "ID", "PID", "FIELD_CODE", "IND1", "IND2", "TITLE", "DATA", "REPEATABLE") AS 
  select lb.info_id, lb.book_id, lb.journal_id, lb.disc_id,
       xt."ID",xt."PID",xt."FIELD_CODE",xt."IND1",xt."IND2",xt."TITLE",xt."DATA",xt."REPEATABLE" from lib_bibliographic_info lb,
XMLTABLE('/TreeList/Nodes/Node/NodeData' passing lb.xml_data
         COLUMNS
           id     VARCHAR2(5)  PATH 'Cell[1]',
           pid     VARCHAR2(3)  PATH 'Cell[2]',
           field_code varchar(3) PATH 'Cell[3]',
           ind1 char(1) PATH 'Cell[4]',
           ind2 char(1) PATH 'Cell[5]',
           title varchar(600) PATH 'Cell[6]',
           data varchar(2000) PATH 'Cell[7]',
           repeatable number PATH 'Cell[10]'
         ) xt where xt.data is not null

;
--------------------------------------------------------
--  DDL for View VIEW_MATERIAL_COUNTS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DEV_LIBRARY"."VIEW_MATERIAL_COUNTS" ("HESAB_ID", "BOOK_TITLES", "BOOK_ITEMS", "BOOK_TOTALCOST", "JOURNAL_TOTALCOST", "DISC_TOTALCOST", "JOURNAL_TITLES", "DISC_TITLES", "JOURNAL_ITEMS", "DISC_ITEMS", "INVENTORIED", "NOT_INVENTORIED") AS 
  select t.hesab_id,
       count(distinct t.book_id) as book_titles,
       sum(decode(b.book_id, NULL, 0, 1)) as book_items,
       sum(decode(b.book_id, NULL, 0, b.price)) as book_totalcost,
       sum(decode(b.j_issue_id, NULL, 0, b.price)) as journal_totalcost,
       sum(decode(b.disc_id, NULL, 0, b.price)) as disc_totalcost,
       count(distinct t.j_issue_id) as journal_titles,
       count(distinct t.disc_id) as disc_titles,
       sum(decode(j.j_issue_id, NULL, 0, 1)) as journal_items,
       sum(decode(d.disc_id, NULL, 0, 1)) as disc_items,
       (sum(decode(b.status, 3, 1, 0)) + sum(decode(j.status, 3, 1, 0))) as inventoried,
       (select sum(lh.count) from lib_hesab_mats lh where lh.hesab_id = t.hesab_id ) - (sum(decode(b.status, 3, 1, 0)) + sum(decode(j.status, 3, 1, 0))) as not_inventoried
from lib_hesab_mats t
left outer join lib_inventory b on b.book_id = t.book_id
left outer join lib_inventory d on d.disc_id = t.disc_id
left outer join lib_inventory j on j.j_issue_id = t.j_issue_id
group by t.hesab_id

;
--------------------------------------------------------
--  DDL for View VIEW_USERNAME
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DEV_LIBRARY"."VIEW_USERNAME" ("ID", "USERNAME", "PSW", "TYPE", "NAME", "SURNAME", "KEYID") AS 
  select t.user_cid as id, nvl(s.stud_id, nvl(e.hname, t.user_cid)) as username,
       nvl(s.passw, nvl(e.passw, t.psw)) as psw, substr(t.user_cid, 1, 1) as type,
       nvl(s.name, nvl(e.name, t.name)) as name, nvl(s.surname, nvl(e.sname, t.surname)) as surname, t.rowid as keyID
from LIB_USER_CARDS t
left outer join dbmaster.employee e on e.emp_id = t.emp_id
left outer join dbmaster.students s on s.stud_id = t.stud_id
where t.is_active = 1

;
--------------------------------------------------------
--  DDL for Index PK_LIB_PUBLISHERS$PUBLISHER_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_PUBLISHERS$PUBLISHER_ID" ON "DEV_LIBRARY"."LIB_PUBLISHERS" ("PUBLISHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_PUBLISHERS$NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_PUBLISHERS$NAME" ON "DEV_LIBRARY"."LIB_PUBLISHERS" ("NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_BOOKS$BOOK_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_BOOKS$BOOK_ID" ON "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_BOOK_AUTHORS$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_BOOK_AUTHORS$ID" ON "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ("BOOK_AUTHOR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PRM_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PRM_ID" ON "DEV_LIBRARY"."LIB_BOOK_INFO" ("F035") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_CFG$CFG_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_CFG$CFG_ID" ON "DEV_LIBRARY"."LIB_CFG" ("CFG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_DEWEY$KEY
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_DEWEY$KEY" ON "DEV_LIBRARY"."LIB_DEWEY" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_DISCS$DISC_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_DISCS$DISC_ID" ON "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_DISCS$NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_DISCS$NAME" ON "DEV_LIBRARY"."LIB_DISCS" ("NAME", "ISBN", "PUB_YEAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_ETIKET_SEBET
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_ETIKET_SEBET" ON "DEV_LIBRARY"."LIB_ETIKET_SEBET" ("SEBET_ADI", "INV_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_HESABLAR$HESAB_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_HESABLAR$HESAB_ID" ON "DEV_LIBRARY"."LIB_HESABLAR" ("HESAB_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_HESABLAR$TITLE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_HESABLAR$TITLE" ON "DEV_LIBRARY"."LIB_HESABLAR" ("TITLE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_PUBLISH_INTERVALS$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_PUBLISH_INTERVALS$ID" ON "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ("PUBLISH_INTERVAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_PUBLISH_INTERV$NAME_AZ
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_PUBLISH_INTERV$NAME_AZ" ON "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ("NAME_AZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_PUBLISH_INTERV$NAME_EN
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_PUBLISH_INTERV$NAME_EN" ON "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ("NAME_EN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_PUBLISH_INTERV$NAME_TR
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_PUBLISH_INTERV$NAME_TR" ON "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ("NAME_TR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_JOURNALS$JOURNAL_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_JOURNALS$JOURNAL_ID" ON "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_J_ISSUES$J_ISSUE_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_J_ISSUES$J_ISSUE_ID" ON "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_J_ISSUES$ISSUE_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_J_ISSUES$ISSUE_NAME" ON "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("JOURNAL_ID", "ISSUE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_HESAB_MATS$HESAB_MAT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_HESAB_MATS$HESAB_MAT_ID" ON "DEV_LIBRARY"."LIB_HESAB_MATS" ("HESAB_MAT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_INVENTORY$INV_ID_BOOK_ID
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_INVENTORY$INV_ID_BOOK_ID" ON "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID", "BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_INVENTORY_TAGS$TAG_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_INVENTORY_TAGS$TAG_ID" ON "DEV_LIBRARY"."LIB_INVENTORY_TAGS" ("TAG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_USER_CARDS$USER_CARD_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_USER_CARDS$USER_CARD_ID" ON "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_USER_CARDS$EMP_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_USER_CARDS$EMP_ID" ON "DEV_LIBRARY"."LIB_USER_CARDS" ("EMP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_USER_CARDS$STUD_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_USER_CARDS$STUD_ID" ON "DEV_LIBRARY"."LIB_USER_CARDS" ("STUD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_INV_REQ_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_INV_REQ_ID" ON "DEV_LIBRARY"."LIB_INV_REQUESTS" ("LIB_INV_REQ_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_JOURNAL_SUBSRIPTION$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_JOURNAL_SUBSRIPTION$ID" ON "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" ("JOURNAL_S_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_LOANS$LOAN_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_LOANS$LOAN_ID" ON "DEV_LIBRARY"."LIB_LOANS" ("LOAN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_LOAN_ACTION$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_LOAN_ACTION$ID" ON "DEV_LIBRARY"."LIB_LOAN_ACTION" ("LOAN_ACTION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_MATERIAL_LANG$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_MATERIAL_LANG$ID" ON "DEV_LIBRARY"."LIB_MATERIAL_LANG" ("MAT_LANG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_MATERIAL_LANG$LANG
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_MATERIAL_LANG$LANG" ON "DEV_LIBRARY"."LIB_MATERIAL_LANG" ("BOOK_ID", "JOURNAL_ID", "LANG_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_SUBJECTS$SUBJECT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_SUBJECTS$SUBJECT_ID" ON "DEV_LIBRARY"."LIB_SUBJECTS" ("SUBJECT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQ_LIB_SUBJECTS$DEWEY_CODE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQ_LIB_SUBJECTS$DEWEY_CODE" ON "DEV_LIBRARY"."LIB_SUBJECTS" ("DEWEY_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_MAT_SUBJECTS$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_MAT_SUBJECTS$ID" ON "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ("MAT_SUBJ_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_MAT_SUBJECT$SUBJECT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_MAT_SUBJECT$SUBJECT_ID" ON "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ("BOOK_ID", "JOURNAL_ID", "DEWEY_KEY", "DISC_ID", "DEP_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_OFFLINE_DATE$OFF_DATE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_OFFLINE_DATE$OFF_DATE" ON "DEV_LIBRARY"."LIB_OFFLINE_DATES" ("OFF_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_RESERVE_LIST$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_RESERVE_LIST$ID" ON "DEV_LIBRARY"."LIB_RESERVE_LIST" ("LIB_RESERVE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_SIGLE_TYPES$KEY
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_SIGLE_TYPES$KEY" ON "DEV_LIBRARY"."SIGLE_TYPES" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index F035
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."F035" ON "DEV_LIBRARY"."THESIS" ("F035") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_JOURNALS$TITLE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_JOURNALS$TITLE" ON "DEV_LIBRARY"."LIB_JOURNALS" ("TITLE", "ISBN", "PUB_YEAR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_INVENTORY$INV_ID_BOOK_ID_TEMP
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_INVENTORY$INV_ID_BOOK_ID_TEMP" ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ("INV_ID", "BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_BOOK_AUTHORS$TEMP_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_BOOK_AUTHORS$TEMP_ID" ON "DEV_LIBRARY"."TEMP_LIB_AUTHORS" ("BOOK_AUTHOR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_BOOK_AUTHOR$AUTHORNAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_BOOK_AUTHOR$AUTHORNAME" ON "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ("BOOK_ID", "NAME", "SURNAME", "SIGN", "IS_MAIN", "J_ISSUE_ID", "DISC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_FIELD_CODE$FIELD_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_FIELD_CODE$FIELD_ID" ON "DEV_LIBRARY"."LIB_MARC_FIELDS" ("FIELD_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_FIELD_CODE$SUBFIELD_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_FIELD_CODE$SUBFIELD_ID" ON "DEV_LIBRARY"."LIB_MARC_SUBFIELDS" ("FIELD_CODE", "SUBFIELD_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_MATERIAL_TYPES$KEY
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_MATERIAL_TYPES$KEY" ON "DEV_LIBRARY"."LIB_MATERIAL_TYPES" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_SUPPLIERS$SUPPLIER_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_SUPPLIERS$SUPPLIER_ID" ON "DEV_LIBRARY"."LIB_SUPPLIERS" ("SUPPLIER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQI_LIB_SUPPLIERS$NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQI_LIB_SUPPLIERS$NAME" ON "DEV_LIBRARY"."LIB_SUPPLIERS" ("SUPPLIER_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_SUPPLY_TYPES$KEY
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_SUPPLY_TYPES$KEY" ON "DEV_LIBRARY"."LIB_SUPPLY_TYPES" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_LIB_BATCH_STATUS$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_LIB_BATCH_STATUS$ID" ON "DEV_LIBRARY"."LIB_BATCH_STATUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_CONTACTS$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_CONTACTS$ID" ON "DEV_LIBRARY"."LIB_CONTACTS" ("CONTACT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_CONTACT_TYPES$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_CONTACT_TYPES$ID" ON "DEV_LIBRARY"."LIB_CONTACT_TYPES" ("TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index BIN$ra4JCDyBIrbgUyEBZAoXAQ==$0
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."BIN$ra4JCDyBIrbgUyEBZAoXAQ==$0" ON "DEV_LIBRARY"."LIB_INVENTORIES" ("INV_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_CURRENCIES$CURRENCY
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_CURRENCIES$CURRENCY" ON "DEV_LIBRARY"."LIB_CURRENCIES" ("CURRENCY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index UQ_CURRENCIES$CODE
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."UQ_CURRENCIES$CODE" ON "DEV_LIBRARY"."LIB_CURRENCIES" ("CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_INVENTORY_BOOK$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_INVENTORY_BOOK$ID" ON "DEV_LIBRARY"."INVENTORY_BOOK" ("INV_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_WEB_LOG$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_WEB_LOG$ID" ON "DEV_LIBRARY"."WEB_LOG" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index PK_BIBLIOGRAPHIC_INFO$ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."PK_BIBLIOGRAPHIC_INFO$ID" ON "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ("INFO_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index MIGRATIONS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."MIGRATIONS_ID_PK" ON "DEV_LIBRARY"."MIGRATIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_AUTH_CODES_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."OAUTH_AUTH_CODES_ID_PK" ON "DEV_LIBRARY"."OAUTH_AUTH_CODES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_ACCESS_TOKENS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS_ID_PK" ON "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_REFRESH_TOKENS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS_ID_PK" ON "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_CLIENTS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."OAUTH_CLIENTS_ID_PK" ON "DEV_LIBRARY"."OAUTH_CLIENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAU_PERSON_ACCE_CLIEN_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DEV_LIBRARY"."OAU_PERSON_ACCE_CLIEN_ID_PK" ON "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index IX_LIB_LOGS$ROW_ID
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."IX_LIB_LOGS$ROW_ID" ON "DEV_LIBRARY"."LIB_LOGS" ("ROW_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_LIBRARY$INV_ID_DISC_ID
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_LIBRARY$INV_ID_DISC_ID" ON "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID", "DISC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index TITLE_ID
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."TITLE_ID" ON "DEV_LIBRARY"."LIB_BOOK_INFO" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_AUTH_CODES_USER_ID_INDEX
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."OAUTH_AUTH_CODES_USER_ID_INDEX" ON "DEV_LIBRARY"."OAUTH_AUTH_CODES" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_VALUE_IX
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_VALUE_IX" ON "DEV_LIBRARY"."SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_PATH_TABLE" (SUBSTRB("VALUE",1,1599)) 
  PCTFREE 0 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index WRITER_NAME
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."WRITER_NAME" ON "DEV_LIBRARY"."LIB_BOOK_INFO" ("F100_1Q") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index WRITER_SURNAME
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."WRITER_SURNAME" ON "DEV_LIBRARY"."LIB_BOOK_INFO" ("F100_1A") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUT_ACCES_TOKEN_USE_ID_INDE
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."OAUT_ACCES_TOKEN_USE_ID_INDE" ON "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index TITLE
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."TITLE" ON "DEV_LIBRARY"."LIB_BOOK_INFO" ("F245A") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_LIBRARY$INV_ID_DISC_ID_TEMP
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_LIBRARY$INV_ID_DISC_ID_TEMP" ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ("INV_ID", "DISC_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_LIBRARY$INV_ID_JURNAL_ID
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_LIBRARY$INV_ID_JURNAL_ID" ON "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID", "J_ISSUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index IX_BIBLIOGRAPHIC_INFO$XML
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."IX_BIBLIOGRAPHIC_INFO$XML" ON "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ("XML_DATA") 
   INDEXTYPE IS "XDB"."XMLINDEX" ;
--------------------------------------------------------
--  DDL for Index INDEX_LIB_ACTION$SON
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."INDEX_LIB_ACTION$SON" ON "DEV_LIBRARY"."LIB_LOAN_ACTION" ("SON") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index INDEX_LIB_ACTION$B1
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."INDEX_LIB_ACTION$B1" ON "DEV_LIBRARY"."LIB_LOAN_ACTION" ("LOAN_ID", "SON") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index IX_LIB_HESABLAR$SUPPLIER
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."IX_LIB_HESABLAR$SUPPLIER" ON "DEV_LIBRARY"."LIB_HESABLAR" ("SUPPLIER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index IX_LIB_USER_CARDS$IS_ACTIVE
--------------------------------------------------------

  CREATE BITMAP INDEX "DEV_LIBRARY"."IX_LIB_USER_CARDS$IS_ACTIVE" ON "DEV_LIBRARY"."LIB_USER_CARDS" ("IS_ACTIVE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAU_REFRE_TOKE_ACCE_TOK_ID_IND
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."OAU_REFRE_TOKE_ACCE_TOK_ID_IND" ON "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" ("ACCESS_TOKEN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_PIKEY_IX
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_PIKEY_IX" ON "DEV_LIBRARY"."SYS365262_IX_BIBLIOGRAPHIC_INFO$XML_PATH_TABLE" ("RID", "PATHID", "ORDER_KEY") 
  PCTFREE 0 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS NOLOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index OAUTH_CLIENTS_USER_ID_INDEX
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."OAUTH_CLIENTS_USER_ID_INDEX" ON "DEV_LIBRARY"."OAUTH_CLIENTS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Index LIB_LIBRARY$INV_ID_JURNAL_ID_TEMP
--------------------------------------------------------

  CREATE INDEX "DEV_LIBRARY"."LIB_LIBRARY$INV_ID_JURNAL_ID_TEMP" ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ("INV_ID", "J_ISSUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" ;
--------------------------------------------------------
--  DDL for Trigger MIGRATIONS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."MIGRATIONS_ID_TRG" 
            before insert on MIGRATIONS
            for each row
                begin
            if :new.ID is null then
                select migrations_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "DEV_LIBRARY"."MIGRATIONS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger OAUTH_CLIENTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."OAUTH_CLIENTS_ID_TRG" 
            before insert on OAUTH_CLIENTS
            for each row
                begin
            if :new.ID is null then
                select oauth_clients_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "DEV_LIBRARY"."OAUTH_CLIENTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger OAUTH_PERSONAL_ACCESS_CLIENTS_
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS_" 
            before insert on OAUTH_PERSONAL_ACCESS_CLIENTS
            for each row
                begin
            if :new.ID is null then
                select oauth_personal_access_clients_.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS_" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETE_HESAB_MATERIALS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_DELETE_HESAB_MATERIALS" 
after delete on lib_hesab_mats
for each row
begin
    case
    when :old.book_id is not null then
         delete from lib_invertory i where i.book_id=:old.book_id and i.hesab_id=:old.hesab_id;
    when :old.j_issue_id is not null then
         delete from lib_invertory i where i.j_issue_id=:old.j_issue_id and i.hesab_id=:old.hesab_id;
    when :old.disc_id is not null then
         delete from lib_invertory i where i.disc_id=:old.disc_id and i.hesab_id=:old.hesab_id;
    end case;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_DELETE_HESAB_MATERIALS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_BOOKS_AUTHORS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_AUTHORS_ID" 
  before insert
  on TEMP_LIB_AUTHORS 
  for each row
begin
  select seq_lib_book_author_id.nextval into :new.book_author_id from dual;
end TRG_LIB_BOOKS_AUTHORS_ID;

/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_AUTHORS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_BOOKS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_ID" 
before insert on LIB_BOOKS
for each row
begin
select seq_lib_books_id.nextval into :new.book_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_BOOKS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_LOG" 
  after insert or update or delete on lib_books
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_books',:new.book_id,1,'TITLE',:new.title);
     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_books',:old.book_id,3,'TITLE',:old.title);
     elsif updating then
            if updating('ISBN') and NVL(:new.ISBN,0) != NVL(:old.ISBN,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'ISBN',:new.isbn,:old.isbn);
            end if;
            if updating('TITLE') and NVL(:new.title,0) != NVL(:old.title,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'TITLE',:new.title,:old.title);
            end if;
            if updating('PUBLISHER_ID') and NVL(:new.publisher_id,0) != NVL(:old.publisher_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'PUBLISHER_ID',:new.publisher_id,:old.publisher_id);
            end if;
            if updating('PUB_YEAR') and NVL(:new.pub_year,0) != NVL(:old.pub_year,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'PUB_YEAR',:new.pub_year,:old.pub_year);
            end if;
            if updating('PUB_CITY') and NVL(:new.pub_city,0) != NVL(:old.pub_city,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'PUB_CITY',:new.pub_city,:old.pub_city);
            end if;
            if updating('EDITOR') and NVL(:new.editor,0) != NVL(:old.editor,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'EDITOR',:new.editor,:old.editor);
            end if;
            if updating('TRANSLATOR') and NVL(:new.translator,0) != NVL(:old.translator,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'TRANSLATOR',:new.translator,:old.translator);
            end if;
            if updating('PAGE_NUM') and NVL(:new.page_num,0) != NVL(:old.page_num,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'PAGE_NUM',:new.page_num,:old.page_num);
            end if;
            if updating('SERIYA') and NVL(:new.seriya,0) != NVL(:old.seriya,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'SERIYA',:new.seriya,:old.seriya);
            end if;
            if updating('SURELI') and NVL(:new.sureli,0) != NVL(:old.sureli,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'SURELI',:new.sureli,:old.sureli);
            end if;
            if updating('NOTE') and NVL(:new.note,0) != NVL(:old.note,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_books',:old.book_id,2,'NOTE',:new.note,:old.note);
            end if;
      end if;
     --------------------------------------------------------------------
   end if;
end trg_lib_books_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOKS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_BOOK_AUTHORS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOK_AUTHORS_ID" 
before insert on LIB_BOOK_AUTHORS
for each row
begin
select seq_lib_book_author_id.nextval into :new.book_author_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOK_AUTHORS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_BOOK_AUTHORS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOK_AUTHORS_LOG" 
  after insert or update or delete on lib_book_authors
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_book_authors',:new.book_author_id,1,'BOOK_ID',:new.BOOK_ID);

        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_book_authors',:new.book_author_id,1,'NAME',:new.NAME);

        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_book_authors',:new.book_author_id,1,'SURNAME',:new.surname);
     elsif deleting then
         insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                values('lib_book_authors',:old.book_author_id,3,'BOOK_ID',:old.BOOK_ID);

         insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                values('lib_book_authors',:old.book_author_id,3,'NAME',:old.NAME);

         insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                values('lib_book_authors',:old.book_author_id,3,'SURNAME',:old.surname);

     elsif updating then
          if updating('NAME') and NVL(:new.NAME,0) != NVL(:old.NAME,0) THEN
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                    values('lib_book_authors',:old.book_author_id,2,'NAME',:new.NAME,:old.NAME);
          end if;
          if updating('SURNAME') and NVL(:new.SURNAME,0) != NVL(:old.SURNAME,0) THEN
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                    values('lib_book_authors',:old.book_author_id,2,'SURNAME',:new.SURNAME,:old.SURNAME);
          end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_book_authors_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_BOOK_AUTHORS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_CFG_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_CFG_ID" 
before insert on LIB_CFG
for each row
begin
select seq_lib_cfg.nextval into :new.cfg_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_CFG_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_DISCS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_DISCS_ID" 
before insert on LIB_DISCS
for each row
begin
select seq_lib_discs_id.nextval into :new.disc_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_DISCS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_DISCS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_DISCS_LOG" 
  after insert or update or delete on lib_discs
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_discs',:new.disc_id,1,'NAME',:new.name);
     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_discs',:old.disc_id,3,'NAME',:old.name);
     elsif updating then
            if updating('NAME') and NVL(:new.name,0) != NVL(:old.name,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_discs',:old.disc_id,2,'NAME',:new.name,:old.name);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_discs_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_DISCS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_ETIKET_SEBET_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_ETIKET_SEBET_LOG" 
  after insert or update or delete on lib_etiket_sebet
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
          if :new.inv_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_etiket_sebet', :new.sebet_adi,1,'INV_ID',:new.inv_id);
          end if;
     elsif deleting then
            if :old.inv_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name, old_value)
                      values('lib_etiket_sebet',:old.sebet_adi,3,'INV_ID',:old.inv_id);
            end if;
     elsif updating then
           null;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_etiket_sebet_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_ETIKET_SEBET_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_HESABLAR_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_HESABLAR_ID" 
before insert on lib_hesablar
for each row
begin
select SEQ_LIB_HESABLAR_ID.nextval into :new.hesab_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_HESABLAR_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_HESABLAR_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_HESABLAR_LOG" 
  after insert or update or delete on lib_hesablar
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_hesablar',:new.hesab_id,1,'TITLE',:new.title);
     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_hesablar',:old.hesab_id,3,'TITLE',:old.title);
     elsif updating then
            if updating('TITLE') and NVL(:new.title,0) != NVL(:old.title,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_hesablar',:old.hesab_id,2,'TITLE',:new.title,:old.title);
            end if;
            if updating('STATUS') and NVL(:new.status,0) != NVL(:old.status,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_hesablar',:old.hesab_id,2,'STATUS',:new.status,:old.status);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_hesablar_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_HESABLAR_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_HESAB_MATS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_HESAB_MATS_ID" 
before insert on lib_hesab_mats
for each row
begin
select SEQ_lib_HESAB_MATS_ID.nextval into :new.hesab_mat_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_HESAB_MATS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_HESAB_MATS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_HESAB_MATS_LOG" 
  after insert or update or delete on lib_hesab_mats
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_hesab_mats',:new.hesab_mat_id,1,'HESAB_ID',:new.hesab_id);

          if :new.book_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_hesab_mats',:new.hesab_mat_id,1,'BOOK_ID',:new.book_id);
          elsif :new.j_issue_id is not null then
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                    values('lib_hesab_mats',:new.hesab_mat_id,1,'J_ISSUE_ID',:new.j_issue_id);
          elsif :new.disc_id is not null then
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                    values('lib_hesab_mats',:new.hesab_mat_id,1,'DISC_ID',:new.disc_id);
          end if;

          insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_hesab_mats',:new.hesab_mat_id,1,'COUNT',:new.count);

     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_hesab_mats',:old.hesab_mat_id,3,'HESAB_ID',:old.hesab_id);

            if :old.book_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_hesab_mats',:old.hesab_mat_id,3,'BOOK_ID',:old.book_id);
            elsif :old.j_issue_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_hesab_mats',:old.hesab_mat_id,3,'J_ISSUE_ID',:old.j_issue_id);
            elsif :old.disc_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_hesab_mats',:old.hesab_mat_id,3,'DISC_ID',:old.disc_id);
            end if;

            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_hesab_mats',:old.hesab_mat_id,3,'COUNT',:old.count);

     elsif updating then
            if updating('COUNT') and NVL(:new.count,0) != NVL(:old.count,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_hesab_mats',:old.hesab_mat_id,2,'COUNT',:new.count,:old.count);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_hesab_mats_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_HESAB_MATS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INFO_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INFO_ID" 
  before insert
  on LIB_BIBLIOGRAPHIC_INFO 
  for each row
begin
select seq_lib_info_id.nextval into :new.info_id from dual;
end;

/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INFO_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INVENTORIES_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORIES_ID" 
before insert on LIB_INVENTORY
for each row
begin
select seq_lib_inventory_id.nextval into :new.inv_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORIES_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INVENTORY_TAGS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORY_TAGS_ID" 
before insert on lib_inventory_tags
for each row
begin
select seq_lib_inventory_tags_id.nextval into :new.tag_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORY_TAGS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INVENTORY_TAGS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORY_TAGS_LOG" 
  after insert or update or delete on lib_inventory_tags
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_inventory_tags',:new.tag_id,1,'INV_ID', :new.inv_id);
     elsif deleting then
        null;

     elsif updating then
          null;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_inventory_tags_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INVENTORY_TAGS_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INVERTORY_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INVERTORY_LOG" 
  after insert or update or delete on LIB_INVENTORY
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then

          if :new.book_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_invertory',:new.inv_id,1,'BOOK_ID',:new.book_id);
          elsif :new.j_issue_id is not null then
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                    values('lib_invertory',:new.inv_id,1,'J_ISSUE_ID',:new.j_issue_id);
          elsif :new.disc_id is not null then
             insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                    values('lib_invertory',:new.inv_id,1,'DISC_ID',:new.disc_id);
          end if;

     elsif deleting then

            if :old.book_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_invertory',:old.inv_id,3,'BOOK_ID',:old.book_id);
            end if;
            if :old.j_issue_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_invertory',:old.inv_id,3,'J_ISSUE_ID',:old.j_issue_id);
            end if;
            if :old.disc_id is not null then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_invertory',:old.inv_id,3,'DISC_ID',:old.disc_id);
            end if;

     elsif updating then
            if updating('ODA_ID') and NVL(:new.oda_id,0) != NVL(:old.oda_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_invertory',:old.inv_id,2,'ODA_ID',:new.oda_id,:old.oda_id);
            end if;

            if updating('STATUS') and NVL(:new.status,0) != NVL(:old.status,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_invertory',:old.inv_id,2,'STATUS',:new.status,:old.status);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_invertory_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INVERTORY_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INV_REQUESTS_CHECK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_CHECK" 
  before insert on lib_inv_requests
  for each row
declare
vNum number := 0;
begin
   if inserting then
      select count(*) into vNum from lib_inv_requests r where r.inv_id = :new.inv_id and r.status = 0; -- Aktif olan sifaris sayini tapir
      if vNum >0 then
         raise_application_error(-20123, 'Bu inventara sifariş verilib. T?krar sifaris veril? bilm?z.');
      end if;
   end if;
end TRG_LIB_INV_REQUESTS_CHECK;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_CHECK" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INV_REQUESTS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_ID" 
before insert on Lib_Inv_Requests
for each row
begin
select seq_lib_inv_requests_id.nextval into :new.lib_inv_req_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_INV_REQUESTS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_LOG" 
  after insert or update or delete on lib_inv_requests
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
           null;
     elsif deleting then
           null;
     elsif updating then
            if updating('ISHAZIR') and NVL(:new.ishazir,0) != NVL(:old.ishazir,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_inv_requests',:old.lib_inv_req_id,2,'ISHAZIR',:new.ishazir,:old.ishazir);
            end if;
            if updating('NOTE') and NVL(:new.note,0) != NVL(:old.note,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_inv_requests',:old.lib_inv_req_id,2,'NOTE',:new.note,:old.note);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_inv_requests_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_INV_REQUESTS_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNALS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNALS_ID" 
before insert on LIB_JOURNALS
for each row
begin
select seq_lib_journals_id.nextval into :new.journal_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNALS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNALS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNALS_LOG" 
  after insert or update or delete on lib_journals
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journals',:new.journal_id,1,'TITLE',:new.title);
     elsif deleting then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journals',:old.journal_id,3,'TITLE',:old.title);
     elsif updating then
            if updating('ISBN') and NVL(:new.isbn,0) != NVL(:old.isbn,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'ISBN',:new.isbn,:old.isbn);
            end if;
            if updating('TITLE') and NVL(:new.title,0) != NVL(:old.title,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'TITLE',:new.title,:old.title);
            end if;
            if updating('PUBLISHER_ID') and NVL(:new.publisher_id,0) != NVL(:old.publisher_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'PUBLISHER_ID',:new.publisher_id,:old.publisher_id);
            end if;
            if updating('PUBLISH_INTERVAL_ID') and NVL(:new.publish_interval_id,0) != NVL(:old.publish_interval_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'PUBLISH_INTERVAL_ID',:new.publish_interval_id,:old.publish_interval_id);
            end if;
            if updating('BORC_VERME') and NVL(:new.borc_verme,0) != NVL(:old.borc_verme,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'BORC_VERME',:new.borc_verme,:old.borc_verme);
            end if;
            if updating('DIAGONAL') and NVL(:new.diagonal,0) != NVL(:old.diagonal,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journals',:old.journal_id,2,'DIAGONAL',:new.diagonal,:old.diagonal);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_journals_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNALS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNAL_ISSIUES_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_ISSIUES_LOG" 
  after insert or update or delete on lib_journal_issues
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_issues',:new.j_issue_id,1,'JOURNAL_ID',:new.journal_id);
       insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_issues',:new.j_issue_id,1,'ISSUE_NAME',:new.issue_name);
     elsif deleting then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_issues',:old.j_issue_id,3,'JOURNAL_ID',:old.journal_id);
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_issues',:old.j_issue_id,3,'ISSUE_NAME',:old.issue_name);
     elsif updating then
            if updating('JOURNAL_ID') and NVL(:new.journal_id,0) != NVL(:old.journal_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'JOURNAL_ID',:new.journal_id,:old.journal_id);
            end if;
            if updating('ISSUE') and NVL(:new.issue,0) != NVL(:old.issue,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'ISSUE',:new.issue,:old.issue);
            end if;
            if updating('ISSUE_NAME') and NVL(:new.issue_name,0) != NVL(:old.issue_name,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'ISSUE_NAME',:new.issue_name,:old.issue_name);
            end if;
            if updating('PAGE_NUM') and NVL(:new.page_num,0) != NVL(:old.page_num,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'PAGE_NUM',:new.page_num,:old.page_num);
            end if;
            if updating('DIAGONAL') and NVL(:new.diagonal,0) != NVL(:old.diagonal,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'DIAGONAL',:new.diagonal,:old.diagonal);
            end if;
            if updating('ISSUE_DATE') and (:new.issue_date != :old.issue_date OR (:new.issue_date IS NULL AND :old.issue_date IS NOT NULL) OR (:old.issue_date IS NULL AND :new.issue_date IS NOT NULL)) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_issues',:old.j_issue_id,2,'ISSUE_DATE', nvl2(:new.issue_date, to_char(:new.issue_date, 'DD.MM.RRRR'), null), nvl2(:old.issue_date, to_char(:old.issue_date, 'DD.MM.RRRR'), null));
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_journal_issiues_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_ISSIUES_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNAL_ISSUES_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_ISSUES_ID" 
before insert on LIB_JOURNAL_ISSUES
for each row
begin
select seq_lib_journal_issues_id.nextval into :new.j_issue_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_ISSUES_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNAL_SUBSCR_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_SUBSCR_LOG" 
  after insert or update or delete on lib_journal_subscription
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_subscription',:new.journal_s_id,1,'JOURNAL_ID',:new.journal_id);
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_subscription',:new.journal_s_id,1,'START_DATE',:new.START_DATE);
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_subscription',:new.journal_s_id,1,'END_DATE',:new.END_DATE);
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_journal_subscription',:new.journal_s_id,1,'PRICE',:new.END_DATE);
     elsif deleting then
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,3,'JOURNAL_ID',:old.journal_id);
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,3,'START_DATE',:old.START_DATE);
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,3,'END_DATE',:old.END_DATE);
               insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,3,'PRICE',:old.END_DATE);
     elsif updating then
            if updating('JOURNAL_ID') and NVL(:new.journal_id,0) != NVL(:old.journal_id,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'JOURNAL_ID',:new.journal_id,:old.journal_id);
            end if;
           if updating('START_DATE') and (:new.START_DATE != :old.START_DATE OR (:new.START_DATE IS NULL AND :old.START_DATE IS NOT NULL) OR (:old.START_DATE IS NULL AND :new.START_DATE IS NOT NULL)) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'START_DATE', nvl2(:new.START_DATE, to_char(:new.START_DATE, 'DD.MM.RRRR'), null), nvl2(:old.START_DATE, to_char(:old.START_DATE, 'DD.MM.RRRR'), null));
            end if;
            if updating('END_DATE') and (:new.END_DATE != :old.END_DATE OR (:new.END_DATE IS NULL AND :old.END_DATE IS NOT NULL) OR (:old.END_DATE IS NULL AND :new.END_DATE IS NOT NULL)) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'END_DATE', nvl2(:new.END_DATE, to_char(:new.END_DATE, 'DD.MM.RRRR'), null), nvl2(:old.END_DATE, to_char(:old.END_DATE, 'DD.MM.RRRR'), null));
            end if;
            if updating('WARNING_DATE') and (:new.WARNING_DATE != :old.WARNING_DATE OR (:new.WARNING_DATE IS NULL AND :old.WARNING_DATE IS NOT NULL) OR (:old.WARNING_DATE IS NULL AND :new.WARNING_DATE IS NOT NULL)) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'WARNING_DATE', nvl2(:new.WARNING_DATE, to_char(:new.WARNING_DATE, 'DD.MM.RRRR'), null), nvl2(:old.WARNING_DATE, to_char(:old.WARNING_DATE, 'DD.MM.RRRR'), null));
            end if;
            if updating('PRICE') and NVL(:new.PRICE,0) != NVL(:old.PRICE,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'PRICE',:new.PRICE,:old.PRICE);
            end if;
            if updating('WARNING_STATUS') and NVL(:new.WARNING_STATUS,0) != NVL(:old.WARNING_STATUS,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'WARNING_STATUS',:new.WARNING_STATUS,:old.WARNING_STATUS);
            end if;
            if updating('SON') and NVL(:new.SON,0) != NVL(:old.SON,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_journal_subscription',:old.journal_s_id,2,'DIAGONAL',:new.SON,:old.SON);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_journal_subscr_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_SUBSCR_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_JOURNAL_SUBSRIPTION_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_SUBSRIPTION_ID" 
before insert on LIB_JOURNAL_SUBSCRIPTION
for each row
begin
select seq_lib_journal_subsription_id.nextval into :new.journal_s_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_JOURNAL_SUBSRIPTION_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_LOANS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_LOANS_ID" 
before insert on LIB_LOANS
for each row
begin
select seq_lib_loans_id.nextval into :new.loan_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_LOANS_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_LOANS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_LOANS_LOG" 
  after insert or update or delete on lib_loans
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_loans',:new.loan_id,1,'INV_ID',:new.inv_id);
     elsif deleting then
        null;
     elsif updating then
            if updating('LOCKED') and NVL(:new.locked,0) != NVL(:old.locked,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_loans',:old.loan_id,2,'LOCKED',:new.LOCKED,:old.LOCKED);
            end if;
            if updating('CEZA') and NVL(:new.CEZA,0) != NVL(:old.CEZA,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_loans',:old.loan_id,2,'CEZA',:new.CEZA,:old.CEZA);
            end if;
            if updating('CEZA_ODENIB') and NVL(:new.CEZA_ODENIB,0) != NVL(:old.CEZA_ODENIB,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_loans',:old.loan_id,2,'CEZA_ODENIB',:new.CEZA_ODENIB,:old.CEZA_ODENIB);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_loans_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_LOANS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_LOAN_ACTION_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_LOAN_ACTION_ID" 
before insert on LIB_LOAN_ACTION
for each row
begin
select seq_lib_loan_action_id.nextval into :new.loan_action_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_LOAN_ACTION_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_LOGS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_LOGS_ID" 
before insert on LIB_LOGS
for each row
begin
select seq_lib_logs_id.nextval into :new.log_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_LOGS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_MATERIAL_LANG_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_MATERIAL_LANG_ID" 
before insert on LIB_MATERIAL_LANG
for each row
begin
select seq_lib_material_lang_id.nextval into :new.mat_lang_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_MATERIAL_LANG_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_MATERIAL_LANG_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_MATERIAL_LANG_LOG" 
  after insert or update or delete on lib_material_lang
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        if :new.book_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_material_lang',:new.mat_lang_id,1,'BOOK_ID',:new.BOOK_ID);
        elsif :new.journal_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_material_lang',:new.mat_lang_id,1,'JOURNAL_ID',:new.journal_id);
        end if;

        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_material_lang',:new.mat_lang_id,1,'LANG_CODE',:new.LANG_CODE);

     elsif deleting then
        if :old.book_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_material_lang',:old.mat_lang_id,3,'BOOK_ID',:old.BOOK_ID);
        elsif :old.journal_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_material_lang',:old.mat_lang_id,3,'JOURNAL_ID',:old.journal_id);
         end if;
          insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_material_lang',:old.mat_lang_id,3,'LANG_CODE',:old.LANG_CODE);
     elsif updating then
          null;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_material_lang_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_MATERIAL_LANG_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_MAT_SUBJECTS_CHECKDEP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECTS_CHECKDEP" 
  before insert or update of DEP_CODE
  on LIB_MAT_SUBJECTS
  for each row
declare
  recCount number;
begin
  if :new.DEP_CODE is not NULL then
     select count(*) into recCount from dbmaster.departments d where d.dep_code = :new.DEP_CODE and d.son = 1;
     if recCount = 0 then raise_application_error(-20000, :new.DEP_CODE||' department not exists'); end if;
  end if;
end trg_LIB_MAT_SUBJECTS_checkDep;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECTS_CHECKDEP" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_MAT_SUBJECTS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECTS_LOG" 
  after insert or update or delete on lib_mat_subjects
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        if :new.book_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_mat_subjects',:new.mat_subj_id,1,'BOOK_ID',:new.BOOK_ID);
        elsif :new.journal_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_mat_subjects',:new.mat_subj_id,1,'JOURNAL_ID',:new.journal_id);
         end if;

         insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_mat_subjects',:new.mat_subj_id,1,'SUBJECT_ID',:new.SUBJECT_ID);

     elsif deleting then
        if :old.book_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_mat_subjects',:old.mat_subj_id,3,'BOOK_ID',:old.BOOK_ID);
        elsif :old.journal_id is not null then
           insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_mat_subjects',:old.mat_subj_id,3,'JOURNAL_ID',:old.journal_id);
         end if;

         insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_mat_subjects',:old.mat_subj_id,3,'SUBJECT_ID',:old.SUBJECT_ID);
     elsif updating then
          if updating('SUBJECT_ID') and NVL(:new.SUBJECT_ID,0) != NVL(:old.SUBJECT_ID,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_mat_subjects',:old.mat_subj_id,2,'SUBJECT_ID',:new.SUBJECT_ID,:old.SUBJECT_ID);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_mat_subjects_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECTS_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_MAT_SUBJECT_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECT_ID" 
before insert on LIB_MAT_SUBJECTS
for each row
begin
select seq_lib_mat_subject_id.nextval into :new.mat_subj_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_MAT_SUBJECT_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_OFFLINE_DATES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_OFFLINE_DATES" 
  after insert or update or delete on lib_offline_dates
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
           insert into lib_logs(table_name,log_type ,  new_value)
                  values('lib_offline_dates',1, :new.off_date);
     elsif deleting then
           insert into lib_logs(table_name, log_type, old_value)
                  values('lib_offline_dates',3,:old.off_date);
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_offline_dates;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_OFFLINE_DATES" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_PUBLISHERS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISHERS_LOG" 
  after insert or update or delete on lib_publishers
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_publishers',:new.publisher_id,1,'NAME',:new.name);
     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_publishers',:old.publisher_id,3,'NAME',:old.name);
     elsif updating then
            if updating('NAME') and NVL(:new.name,0) != NVL(:old.name,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_publishers',:old.publisher_id,2,'NAME',:new.name,:old.name);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_publishers_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISHERS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_PUBLISHER_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISHER_ID" 
before insert on LIB_PUBLISHERS
for each row
begin
select seq_lib_publisher_id.nextval into :new.publisher_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISHER_ID" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_PUBLISH_INTERVALS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISH_INTERVALS_ID" 
before insert on LIB_PUBLISH_INTERVALS
for each row
begin
select seq_lib_publish_intervals_id.nextval into :new.publish_interval_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISH_INTERVALS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_PUBLISH_INTERVALS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISH_INTERVALS_LOG" 
  after insert or update or delete on lib_publish_intervals
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
        insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
               values('lib_publish_intervals',:new.publish_interval_id,1,'NAME',:new.name_az);
     elsif deleting then
            insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                   values('lib_publish_intervals',:old.publish_interval_id,3,'NAME',:old.name_az);
     elsif updating then
            if updating('NAME') and NVL(:new.name_az,0) != NVL(:old.name_az,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_publish_intervals',:old.publish_interval_id,2,'NAME',:new.name_az,:old.name_az);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_publish_intervals_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_PUBLISH_INTERVALS_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_RESERVE_LIST_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_RESERVE_LIST_ID" 
before insert on lib_reserve_list
for each row
begin
select SEQ_LIB_RESERVE_LIST_ID.nextval into :new.lib_reserve_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_RESERVE_LIST_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_SUBJECTS_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_SUBJECTS_ID" 
before insert on LIB_SUBJECTS
for each row
begin
select seq_lib_subjects_id.nextval into :new.subject_id from dual;
end;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_SUBJECTS_ID" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_SUBJECTS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_SUBJECTS_LOG" 
  after insert or update or delete on lib_subjects
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then

           insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_subjects',:new.subject_id,1,'DEWEY_CODE',:new.dewey_code);

           if :new.name is not null then
              insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                      values('lib_subjects',:new.subject_id,1,'NAME',:new.name);
           end if;

     elsif deleting then

           insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_subjects',:old.subject_id,3,'DEWEY_CODE',:old.dewey_code);
           if :old.name is not null then
                insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                      values('lib_subjects',:old.subject_id,3,'NAME',:old.name);
           end if;
     elsif updating then
          if updating('DEWEY_CODE') and NVL(:new.DEWEY_CODE,0) != NVL(:old.DEWEY_CODE,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_subjects',:old.subject_id,2,'DEWEY_CODE',:new.DEWEY_CODE,:old.DEWEY_CODE);
            end if;

          if updating('NAME') and NVL(:new.NAME,0) != NVL(:old.NAME,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_subjects',:old.subject_id,2,'NAME',:new.NAME,:old.NAME);
            end if;
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_subjects_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_SUBJECTS_LOG" DISABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_LIB_USER_CARDS_LOG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_LIB_USER_CARDS_LOG" 
  after insert or update or delete on lib_user_cards
  for each row
declare
begin

  if SYS_CONTEXT('qaf_app_ctx', 'USER_ID') is not null then
     -------------------------------------------------------------
     if inserting then
         if :new.stud_id is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                          values('lib_user_cards',:new.user_cid,1,'STUD_ID',:new.stud_id);
            elsif :new.emp_id is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                          values('lib_user_cards',:new.user_cid,1,'EMP_ID',:new.emp_id);
            elsif :new.name is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                          values('lib_user_cards',:new.user_cid,1,'NAME',:new.name);
                   if :new.SURNAME is not null then
                         insert into lib_logs(table_name,row_id,log_type,column_name,new_value)
                                values('lib_user_cards',:new.user_cid,1,'SURNAME',:new.SURNAME);
                   end if;
            end if;

     elsif deleting then
            if :old.stud_id is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                          values('lib_user_cards',:old.user_cid,3,'STUD_ID',:old.stud_id);
            elsif :old.emp_id is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                          values('lib_user_cards',:old.user_cid,3,'EMP_ID',:old.emp_id);
            elsif :old.name is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                          values('lib_user_cards',:old.user_cid,3,'NAME',:old.name);
            end if;
            if :old.SURNAME is not null then
                   insert into lib_logs(table_name,row_id,log_type,column_name,old_value)
                          values('lib_user_cards',:old.user_cid,3,'SURNAME',:old.SURNAME);
            end if;
     elsif updating then
            if updating('STUD_ID') and NVL(:new.STUD_ID,0) != NVL(:old.STUD_ID,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_user_cards',:old.user_cid,2,'STUD_ID',:new.STUD_ID,:old.STUD_ID);
            end if;
            if updating('EMP_ID') and NVL(:new.EMP_ID,0) != NVL(:old.EMP_ID,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_user_cards',:old.user_cid,2,'EMP_ID',:new.EMP_ID,:old.EMP_ID);
            end if;
            if updating('NAME') and NVL(:new.NAME,0) != NVL(:old.NAME,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_user_cards',:old.user_cid,2,'NAME',:new.NAME,:old.NAME);
            end if;
            if updating('SURNAME') and NVL(:new.SURNAME,0) != NVL(:old.SURNAME,0) THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_user_cards',:old.user_cid,2,'SURNAME',:new.SURNAME,:old.SURNAME);
            end if;            
     end if;
     --------------------------------------------------------------------
  end if;
end trg_lib_user_cards_log;


/
ALTER TRIGGER "DEV_LIBRARY"."TRG_LIB_USER_CARDS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_WEB_LOG_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEV_LIBRARY"."TRG_WEB_LOG_ID" 
before insert on web_log
for each row
begin
select seq_web_log_id.nextval into :new.log_id from dual;
end;
/
ALTER TRIGGER "DEV_LIBRARY"."TRG_WEB_LOG_ID" ENABLE;
--------------------------------------------------------
--  DDL for Procedure AUTHENTICATEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."AUTHENTICATEUSER" (pUname in varchar2, pPSW in varchar2, pUserIP in varchar2, pDeviceInfo in varchar2, pIsVerified out number, pRes out number) is
isVerified number(1);
userDeviceID number;
recCount number;
userID char(7);
dateTime date;
begin
  dateTime := sysdate; --Millisaniye ferqi olmasin deye indiki tarixi deyiskende saxlayiriq
  Begin
    select u.id into userID from VIEW_USERNAME u where u.username = pUname;
    exception when NO_DATA_FOUND then pRes := 0; return;
  End;

  Begin -- Get, UserDeviceID if exists...    
    select max(wl.log_id) into userDeviceID from web_log wl where wl.user_id = userID and wl.login_status = 1;
    exception when NO_DATA_FOUND then userDeviceID := NULL;
  End;
  
  select count(*) into recCount from VIEW_USERNAME u 
  where u.id = userID and u.psw = decode(u.type, 'K', mac_sha256(pPSW, u.keyID), md5(pPSW));
  if recCount > 0 then -- If the password is Correct...
     isVerified := 1;
     update lib_user_cards uc 
     set uc.attempt_count = 0, uc.attempt_date = NULL, uc.last_login_info = userDeviceID
     where uc.user_cid = userID;
   else     
     select decode(count(*), 0, 0, 2) into isVerified from lib_cfg gc 
     where gc.cfg_type = 'LIBGENPSW' and gc.cfg_name = mac_sha256(pPSW, gc.rowid);
     if isVerified = 0 then  -- Increment failed login attempt count...
        update lib_user_cards uc set uc.attempt_count = uc.attempt_count + 1 
        where uc.user_cid = userID and uc.attempt_date > (dateTime - 1);
        if sql%notfound then -- If there is not failed attempt during 1 day, then set first failed attemt date...
           update lib_user_cards uc set uc.attempt_count = 1, uc.attempt_date = dateTime where uc.user_cid = userID;
        end if;
     end if;
  end if;
  pIsVerified := isVerified;
  insert into web_log(user_id, login_status, log_date, user_ip, device_info) 
  values(userID, isVerified, dateTime, pUserIP, pDeviceInfo) returning log_id into pRes;
end AuthenticateUser;

/
--------------------------------------------------------
--  DDL for Procedure ERROR_INV_IDS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."ERROR_INV_IDS" (pInv_id in number, pRes out number) is
cursor cur is select b.id,b.f035 inv_id, trim(b.f020a) isbn,trim(b.f049) place,trim(b.f082) dewey ,
       trim(b.f100_1a) surname,trim(b.f100_1q) name, trim(b.f245a) subject, trim(b.f245c) editor,
       trim(b.f260a) publish_place,trim(b.f260b) publisher ,trim(b.f260c) pub_date ,trim(b.f300c) page,
       trim(b.f440a) series ,trim(b.f505_0a) notes ,b.f546a lang,trim(b.f700_1a) other_writer,
       trim(b.f700_1q) translator ,b.fmt unlimited,b.f005 dat from lib_book_info b order by id;

--Bu procedure, kohnedeki inventari kocurerken bas veren xetalari duzeltmek ucundur.. Inv_id'sini degisgen olaraq gonderdiyimizde
-- tezedeki melumat duzelir...

/*

SUBSTR(REGEXP_REPLACE (upper(t.title), '[^a-zA-Z]', ''),0,10) !=SUBSTR(REGEXP_REPLACE (upper(t.f245a), '[^a-zA-Z]', '') ,0,10)

*/

rec cur%rowtype;

zISBN rec.isbn%type;
zPLACE rec.place%type;
zDEWEY rec.dewey%type;
zSURNAME rec.surname%type;
zNAME rec.name%type;
zSUBJECT rec.subject%type;
zEDITOR rec.editor%type;
zPUBLISH_PLACE rec.publish_place%type;
zPUBLISHER rec.publisher%type;
zPUB_DATE rec.pub_date%type;
zPAGE rec.page%type;
zSERIES rec.series%type;
zNOTES rec.notes%type;
zLANG rec.lang%type;
zOTHER_WRITER rec.other_writer%type;
zTRANSLATOR rec.translator%type;
zUnlimited rec.unlimited%type;

publisherId number;
language char(2);

x number;
sayi number;
subjectid number;

vBOOK_ID number;
inv_book_id number;-- Bu halhazirdaki inv.de olan book_id'dir. Bu degisilmelidir...

begin
      pRes:=0;
      begin
      select trim(b.f020a) isbn,trim(b.f049) place,trim(b.f082) dewey ,
         trim(b.f100_1a) surname,trim(b.f100_1q) name, trim(b.f245a) subject, trim(b.f245c) editor,
         trim(b.f260a) publish_place,trim(b.f260b) publisher ,trim(b.f260c) pub_date ,trim(b.f300c) page,
         trim(b.f440a) series ,trim(b.f505_0a) notes ,b.f546a lang,trim(b.f700_1a) other_writer ,
         trim(b.f700_1q) translator ,b.fmt unlimited into zISBN,
         zPLACE,zDEWEY,zSURNAME,zNAME,zSUBJECT,zEDITOR,zPUBLISH_PLACE,zPUBLISHER,zPUB_DATE,
         zPAGE, zSERIES, zNOTES, zLANG, zOTHER_WRITER, zTRANSLATOR, zUnlimited from lib_book_info b where b.f035=pInv_id;
      exception when no_data_found then
         return;
      end;

       --DBMS_OUTPUT.put_line(zISBN||' - '||zSUBJECT||' - '||zEDITOR||' - '||zPUBLISH_PLACE||' - '||zPUBLISHER||' - '||zPUB_DATE||' - '||zTRANSLATOR||' - ');

      /* select count(*) into sayi from lib_books b
       left join lib_publishers p on p.publisher_id=b.publisher_id
             where nvl(b.isbn,1)=nvl(zISBN,1)
             and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
             and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1); */
        select count(*) into sayi from lib_books b
     left join lib_publishers p on p.publisher_id=b.publisher_id
           where nvl(b.isbn,1)=nvl(zISBN,1)
           and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
           and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1) and nvl((select a.name from lib_book_authors a
            where a.book_id=b.book_id and a.is_main=1),1)=nvl(zNAME,1)  and nvl((select a.surname from lib_book_authors a
            where a.book_id=b.book_id and a.is_main=1),1)=nvl(zSURNAME,1);

       if sayi = 0 then
              --Yeni lib_book'a qeydiyyat eleyir...
                  --Publisheri tap
              if zPUBLISHER is not null then begin
                    select p.publisher_id into publisherId from lib_publishers p where nls_upper(trim(p.name), 'NLS_SORT=XAZERBAIJANI')=nls_upper(trim(zPUBLISHER), 'NLS_SORT=XAZERBAIJANI');
                    exception when NO_DATA_FOUND then insert into lib_publishers(name) values(zPUBLISHER) returning publisher_id into publisherId; end;
              else publisherId := null; end if;

              --Melumatlari daxil et.
               insert into lib_books (isbn,title,publisher_id,pub_year,pub_city,editor,translator,page_num,seriya,sureli,note,old_id)
                      values ( zISBN, zSUBJECT, publisherId, trim(zPUB_DATE) , zPUBLISH_PLACE, zEDITOR, zTRANSLATOR, trim(zPAGE), zSERIES ,decode(zUnlimited, 1, 0, 0, 1, 1),  zNOTES,0)
                      returning book_id into vBOOK_ID;

              --Kitabin muellifleri varsa yaz
              x:=0;
              if trim(zNAME||zSURNAME) is not null then
                 insert into lib_book_authors(book_id,name,surname, is_main)
                        values( vBOOK_ID,trim(zNAME),trim(zSURNAME),1 );
                        x:=1;
              end if;
              if trim(zOTHER_WRITER) is not null and trim(zOTHER_WRITER)!=trim(zNAME)||' '||trim(zSURNAME) then
                  insert into lib_book_authors(book_id,name,is_main)
                         values( vBOOK_ID,trim(zOTHER_WRITER), decode(x,0,1,0));
              end if;

             --Kitabin devey kodunu daxil edirik
             if trim(zDEWEY) is not null then begin
                select subject_id into  subjectid from lib_subjects s where s.dewey_code=zDEWEY;
                exception when NO_DATA_FOUND THEN insert into lib_subjects(dewey_code) values (zDEWEY) returning subject_id into subjectid; end;
                insert into lib_mat_subjects(book_id,subject_id,is_main) values(vBOOK_ID,subjectid,1);
             end if;

              --Kitabin dili
              language :=null;
              if zLANG is not null then
                case zLANG
                  when 0 then language:='AZ' ;
                  when 1 then language:='TR';
                  when 2 then language:='EN';
                  when 3 then language:='RU';
                  when 4 then language:='DE';
                  when 5 then language:='FR';
                  when 6 then language:='FA';
                  when 7 then language:='AR';
                  when 8 then language:='TK';
                  when 9 then language:='ES';
                  when 10 then language:='KY';
                  when 11 then language:='UZ';
                  when 12 then language:='HU';
                  when 13 then language:='KK';
                  when 14 then language:='KA';
                  when 15 then language:='TT';
                  when 16 then language:='IT';
                end case;
                insert into lib_material_lang(book_id,lang_code) values(vBOOK_ID,language);
                --exception when others then raise_application_error(-20000, length(language);
               end if;

          DBMS_OUTPUT.put_line(' 0 ');

       elsif sayi = 1 then
          /*
          select b.book_id  into vBOOK_ID from lib_books b
          left join lib_publishers p on p.publisher_id=b.publisher_id
                 where nvl(b.isbn,1)=nvl(zISBN,1)
                 and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
                 and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1);  */
                 select  b.book_id  into vBOOK_ID from lib_books b
     left join lib_publishers p on p.publisher_id=b.publisher_id
           where nvl(b.isbn,1)=nvl(zISBN,1)
           and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
           and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1) and nvl((select a.name from lib_book_authors a
            where a.book_id=b.book_id and a.is_main=1),1)=nvl(zNAME,1)  and nvl((select a.surname from lib_book_authors a
            where a.book_id=b.book_id and a.is_main=1),1)=nvl(zSURNAME,1);

          DBMS_OUTPUT.put_line(' 1');
       else
          DBMS_OUTPUT.put_line(' Xeta-1..Say='||sayi||' INV_ID:'||pInv_id);
          select count(*) into sayi from lib_books b
           left join lib_publishers p on p.publisher_id=b.publisher_id
                 where nvl(b.isbn,1)=nvl(zISBN,1)
                 and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
                 and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1) and nvl((select a.name from lib_book_authors a
                  where a.book_id=b.book_id and a.is_main=1),1)=nvl(zNAME,1)  and nvl((select a.surname from lib_book_authors a
                  where a.book_id=b.book_id and a.is_main=1),1)=nvl(zSURNAME,1);

             if sayi=0 then


                  --Yeni lib_book'a qeydiyyat eleyir...
                      --Publisheri tap
                  if zPUBLISHER is not null then begin
                        select p.publisher_id into publisherId from lib_publishers p where nls_upper(trim(p.name), 'NLS_SORT=XAZERBAIJANI')=nls_upper(trim(zPUBLISHER), 'NLS_SORT=XAZERBAIJANI');
                        exception when NO_DATA_FOUND then insert into lib_publishers(name) values(zPUBLISHER) returning publisher_id into publisherId; end;
                  else publisherId := null; end if;

                  --Melumatlari daxil et.
                   insert into lib_books (isbn,title,publisher_id,pub_year,pub_city,editor,translator,page_num,seriya,sureli,note,old_id)
                          values ( zISBN, zSUBJECT, publisherId, trim(zPUB_DATE) , zPUBLISH_PLACE, zEDITOR, zTRANSLATOR, trim(zPAGE), zSERIES ,decode(zUnlimited, 1, 0, 0, 1, 1),  zNOTES,0)
                          returning book_id into vBOOK_ID;

                  --Kitabin muellifleri varsa yaz
                  x:=0;
                  if trim(zNAME||zSURNAME) is not null then
                     insert into lib_book_authors(book_id,name,surname, is_main)
                            values( vBOOK_ID,trim(zNAME),trim(zSURNAME),1 );
                            x:=1;
                  end if;
                  if trim(zOTHER_WRITER) is not null and trim(zOTHER_WRITER)!=trim(zNAME)||' '||trim(zSURNAME) then
                      insert into lib_book_authors(book_id,name,is_main)
                             values( vBOOK_ID,trim(zOTHER_WRITER), decode(x,0,1,0));
                  end if;

                 --Kitabin devey kodunu daxil edirik
                 if trim(zDEWEY) is not null then begin
                    select subject_id into  subjectid from lib_subjects s where s.dewey_code=zDEWEY;
                    exception when NO_DATA_FOUND THEN insert into lib_subjects(dewey_code) values (zDEWEY) returning subject_id into subjectid; end;
                    insert into lib_mat_subjects(book_id,subject_id,is_main) values(vBOOK_ID,subjectid,1);
                 end if;

                  --Kitabin dili
                  language :=null;
                  if zLANG is not null then
                    case zLANG
                      when 0 then language:='AZ' ;
                      when 1 then language:='TR';
                      when 2 then language:='EN';
                      when 3 then language:='RU';
                      when 4 then language:='DE';
                      when 5 then language:='FR';
                      when 6 then language:='FA';
                      when 7 then language:='AR';
                      when 8 then language:='TK';
                      when 9 then language:='ES';
                      when 10 then language:='KY';
                      when 11 then language:='UZ';
                      when 12 then language:='HU';
                      when 13 then language:='KK';
                      when 14 then language:='KA';
                      when 15 then language:='TT';
                      when 16 then language:='IT';
                    end case;
                    insert into lib_material_lang(book_id,lang_code) values(vBOOK_ID,language);
                    --exception when others then raise_application_error(-20000, length(language);
                   end if;

              DBMS_OUTPUT.put_line('Xeta ici-0 ');

           elsif sayi = 1 then

              select b.book_id  into vBOOK_ID from lib_books b
              left join lib_publishers p on p.publisher_id=b.publisher_id
                     where nvl(b.isbn,1)=nvl(zISBN,1)
                     and b.title=zSUBJECT and nvl(p.name,1)=nvl(zPUBLISHER,1) and nvl(b.pub_year,1)=nvl(zPUB_DATE,1)
                     and nvl(b.pub_city,1)=nvl(zPUBLISH_PLACE,1)and nvl((select a.name from lib_book_authors a
                  where a.book_id=b.book_id and a.is_main=1),1)=nvl(zNAME,1)  and nvl((select a.surname from lib_book_authors a
                  where a.book_id=b.book_id and a.is_main=1),1)=nvl(zSURNAME,1);

              DBMS_OUTPUT.put_line('Xeta ici-1');
          else DBMS_OUTPUT.put_line('Xeta ici-Xeta');
          end if;

       end if;

       select i.book_id into inv_book_id from lib_invertory i where i.inv_id=pInv_id;

       if vBOOK_ID is not null and vBOOK_ID!=inv_book_id then
          update lib_invertory i
          set i.book_id=vBOOK_ID
          where i.inv_id=pInv_id and i.book_id!=vBOOK_ID;

       end if;


       commit;
end error_inv_ids;


/
--------------------------------------------------------
--  DDL for Procedure GET_VERILME_UZATMA_SURESI
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."GET_VERILME_UZATMA_SURESI" (pInvID in number,
                                                      pUserId in char,
                                                      pverilme_suresi out number,
                                                      puzatma_suresi out number,
                                                      pmax_material out number,
                                                      pmaterial_sayi out number) is


studid varchar(9);
empid number;
vbook_id number;
vj_issue_id number;
vdisc_id number;
vSureli number;
begin
  select i.book_id, i.j_issue_id, i.disc_id into vbook_id, vj_issue_id, vdisc_id from lib_inventory i where i.inv_id = pInvID;
  select trim(u.stud_id),u.emp_id into studid,empid from lib_user_cards u where u.user_cid = pUserId;

  case
  when vbook_id is not null then
        if studid is not null then
           pverilme_suresi:= Func_get_loan_due_date(studid,'T','LimitDay',1);
           puzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',1);
           pmax_material:= Func_get_loan_due_date(studid,'T','LimitMaterial',1);
        elsif empid is not null then
           pverilme_suresi:= Func_get_loan_due_date(empid,'P','LimitDay',1);
           puzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',1);
           pmax_material:= Func_get_loan_due_date(empid,'P','LimitMaterial',1);
        else
           pverilme_suresi:= Func_get_loan_due_date(null,'K','LimitDay',1);
           puzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',1);
           pmax_material:= Func_get_loan_due_date(null,'K','LimitMaterial',1);
        end if;

        select count(*) into pmaterial_sayi from lib_loans l,lib_inventory i,lib_books b  where i.book_id=b.book_id and b.sureli=1 and l.inv_id=i.inv_id and i.book_id is not null and locked=0 and l.user_cid = pUserId;

  when vj_issue_id is not null then
        if studid is not null then
           pverilme_suresi:= Func_get_loan_due_date(studid,'T','LimitDay',2);
           puzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',2);
           pmax_material:= Func_get_loan_due_date(studid,'T','LimitMaterial',2);
        elsif empid is not null then
           pverilme_suresi:= Func_get_loan_due_date(empid,'P','LimitDay',2);
           puzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',2);
           pmax_material:= Func_get_loan_due_date(empid,'P','LimitMaterial',2);
        else
            pverilme_suresi:= Func_get_loan_due_date(null,'K','LimitDay',2);
            puzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',2);
            pmax_material:= Func_get_loan_due_date(null,'K','LimitMaterial',2);
        end if;

        select count(*) into pmaterial_sayi from lib_loans l,lib_inventory i  where l.inv_id=i.inv_id and i.j_issue_id is not null and locked=0 and l.user_cid = pUserId;

   when vdisc_id is not null then
        if studid is not null then
           pverilme_suresi:= Func_get_loan_due_date(studid,'T','LimitDay',3);
           puzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',3);
           pmax_material:= Func_get_loan_due_date(studid,'T','LimitMaterial',3);
        elsif empid is not null then
           pverilme_suresi:= Func_get_loan_due_date(empid,'P','LimitDay',3);
           puzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',3);
           pmax_material:= Func_get_loan_due_date(empid,'P','LimitMaterial',3);
        else
            pverilme_suresi:= Func_get_loan_due_date(null,'K','LimitDay',3);
            puzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',3);
            pmax_material:= Func_get_loan_due_date(null,'K','LimitMaterial',3);
        end if;

        select count(*) into pmaterial_sayi from lib_loans l,lib_inventory i  where l.inv_id=i.inv_id and i.disc_id is not null and locked=0 and l.user_cid = pUserId;

  end case;
end Get_Verilme_Uzatma_Suresi;


/
--------------------------------------------------------
--  DDL for Procedure PROCEDURE_KITABLARI_BIRLESDIR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."PROCEDURE_KITABLARI_BIRLESDIR" (pKitabAdi in varchar2,
pMuellifadi in varchar2,pMuellifSoyadi in varchar2,pPublisher in varchar2,
 pPub_city  in varchar2, pYear in varchar2, pRes out number) is

vBook_id number;
coun number :=0;
begin
  pRes:=0;
  for x in (select b.book_id from lib_books b
                   left join lib_publishers p on b.publisher_id=p.publisher_id
                   where upper(b.title)=upper(pKitabAdi) and exists(select a.book_author_id from lib_book_authors a
                   where a.book_id=b.book_id and upper(a.name) =upper(pMuellifadi) and nvl(upper(a.surname),1)=nvl(upper(pMuellifSoyadi),1))  and nvl(b.pub_year,1)=nvl(pYear,1)
                   and nvl(upper(b.pub_city),1)=nvl(upper(pPub_city),1) and nvl(upper(p.name),1)=nvl(upper(pPublisher),1))
   loop
         coun:=coun+1;
         if vBook_id is null then
            vBook_id:=x.book_id;
         end if;

         if coun !=1 and vBook_id is not null then

            update lib_invertory i set i.book_id=vBook_id where i.book_id= x.book_id;

            update lib_mat_subjects t set t.book_id = vBook_id
            where t.book_id = x.book_id and
             not exists(select ms.mat_subj_id from lib_mat_subjects ms where (ms.dewey_key = t.dewey_key or ms.dep_code = t.dep_code) and ms.book_id = vBook_id);

            delete lib_books b where b.book_id=x.book_id;

            commit;

         end if;

   end loop;
   pRes:=coun;
end procedure_kitablari_birlesdir;


/
--------------------------------------------------------
--  DDL for Procedure RESET_SEQUENCE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."RESET_SEQUENCE" (seq in varchar2, val number)
  is
begin
   execute immediate 'drop sequence '||seq;
   execute immediate 'create sequence '||seq||' start with '||val||' increment by 1 order nocache';

END;


/
--------------------------------------------------------
--  DDL for Procedure SEHV_IDLER_TOPLUSU
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "DEV_LIBRARY"."SEHV_IDLER_TOPLUSU" is
--Bu procedure: xetali kocurulen inv_idleri toplu olaraq duzeldir..
-- Bunun ucun de error_inv_ids adli procedure'dan istifade edir...
i number:=-1;
begin
 for x in(select t.f035 from lib_book_info t
where upper(f245a) like upper('əsərlər')||'%')
 loop
     --DBMS_OUTPUT.put_line(' inv_id:'||x.f035);
     error_inv_ids(x.f035, i);
     --DBMS_OUTPUT.put_line(' i:'||i);
     if i =1 then
        DBMS_OUTPUT.put_line(' update. inv_id:'||x.f035);
    end if;

 end loop;

end sehv_idler_toplusu;


/
--------------------------------------------------------
--  DDL for Package PKG_ACQUISITION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "DEV_LIBRARY"."PKG_ACQUISITION" is
      
   procedure manage_items(
                             pTitle in varchar2,
                             pAuthor in varchar2,
                             pISBN in varchar2,
                             pItemType in char,
                             pBatchId in number,
                             pPublisherId in number,
                             pPubYear in number,
                             pPubCity in varchar2,
                             pCount in number,
                             pCost in number,
                             pCurrency in char,
                             pLocation in char,
                             pCreateDate in date,
                             pUserCID in char,
                             pRes out number
                               );
                               
   procedure UpdateItem(pInventoryID in number,
                         pCost in number,
                         pCurrency in char,
                         pLocation in char,
                         pUserCID in char,
                         pRes out number
                                      );
   procedure delete_items( pInvId in out number);
  

end PKG_ACQUISITION;

/
--------------------------------------------------------
--  DDL for Package PKG_CATALOGING
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "DEV_LIBRARY"."PKG_CATALOGING" is

  -- Author  : BABUR_RUSTAULETOV
  -- Purpose : Management of cataloging fields and data
  -- type bibliographicInfo is table of varchar2(1000) index by PLS_INTEGER;
  
  procedure InsertUpdateBibliographicInfo(
                                  pBookId in number,
                                  pJournalId in number,
                                  pDiscId in number,
                                  pBibliographicInfo in clob,
                                  pAppLog in number,
                                  pRes in out number);
  /*
  procedure UpdateBibliographicInfo();
  procedure DeleteBibliographicInfo();
  */
 procedure insert_update_materials(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pMainAuthor in varchar2,
                             pOtherAuthors in varchar2,
                             pPublisher in varchar2,
                             pPub_year in varchar2,
                             pPub_city in varchar2,
                             pPageNumber in varchar2,
                             pParallel_title in varchar2,
                             pTitle_related_info in varchar2,
                             pLanguage in char,
                             pType in char,
                             pMaterialID in varchar2,
                             pRes in out number
                               );

end PKG_CATALOGING;

/
--------------------------------------------------------
--  DDL for Package PKG_LIBRARY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "DEV_LIBRARY"."PKG_LIBRARY" is
procedure insert_update_lib_book_authors(
                               pBookID  in number,
                               pAuthorName    in varchar2,
                               pAuthorSurname in varchar2,
                               pBookAuthorID  in out number,
                               pIsMain in number);

procedure insert_material_subject(
                      pDeweyCode in varchar2,
                      pDepCode in varchar2,
                      pStatus in out number,
                      pIsMain in number,
                      pBookId in number :=null,
                      pJournalId in number :=null,
                      pDiscId in number := null );

    procedure insert_language(
                             pLangCode in varchar2,
                             pMatLangId out number,
                             pBookId in number :=null,
                             pJournalId in number :=null);

    procedure insert_update_books(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pPublisher_id in varchar2,
                             pPub_year in varchar2,
                             pPub_city in varchar2,
                             pEditor in varchar2,
                             pTranslator in varchar2,
                             pPageNumber in varchar2,
                             pSeriya in varchar2,
                             pSureli in number,
                             pNote in varchar2,
                             pBookId in out number);

      procedure insert_update_journal_issues(
                             pJournalID in varchar2,
                             pIssueNumber in varchar2,
                             pIssueName in varchar2,
                             pPageNumber in varchar2,
                             pDiagonal in varchar2,
                             pIssueDate in varchar2,
                             pJurnalIssueId in out number);

     procedure insert_update_journal_types(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pPublisher_id in varchar2,
                             pIntervalId in varchar2,
                             pBorcVerme in varchar2,
                             pDiagonal in varchar2,
                             pJournalTypeId in out number
                               );

      procedure insert_update_j_subsription(
                             pJournalID in varchar2,
                             pStartDate in varchar2,
                             pEndDate in varchar2,
                             pWarningDate in varchar2,
                             pPrice in varchar2,
                             pStatus in varchar2,
                             pJurnal_S_Id in out number
                               );

      procedure insert_update_discs(
                               pDiscID  in out number,
                               pName    in varchar2);

      procedure insert_update_publishers(
                               pPublisID  in out number,
                               pName    in varchar2);

      procedure insert_update_invertories(
                             ptype in number,
                             pMaterialID in varchar2,
                             pOdaID in varchar2,
                             pStatus in number,
                             msg out varchar2,
                             pHesab_id in varchar2,
                             pInv_id in number :=null,
                             pInvCount in number:=null);

     procedure update_invertories_sil_berpaEt(pType in number,-- 1- Refdedir(Sil), 3-Silinib(Berpa Et)
                             pInvID number, pRes out number);

      procedure insert_update_users(
                             pStudId in varchar2,
                             pEmpId in varchar2,
                             pName in varchar2,
                             pSurname in varchar2,
                             pNote in varchar2,
                             pUserId in out varchar2);
                             
      procedure active_passive_user(
                             pStudId in varchar2,
                             pEmpId in number,
                             pStatus in number,
                             pRes in out number
                             );

      procedure insert_update_hesablar(
                               pHesabAdi  in varchar2,
                               pUserID in number,-- kitabxanacinin IDsi
                               pHesabID    in out number);

          procedure insert_update_hesab_materials(
                               pHesabMatID  in number,
                               pHesabID in number,
                               pCount in number,
                               pUserID in number,-- kitabxanacinin IDsi
                               pRes    out number,
                               pBookId in varchar2 :=null,
                               pJ_Issue_id in varchar2 :=null,
                               pDiscID in varchar2 :=null);

      procedure update_hesabli_invertories(pHesabID in number,pRes out number);

      procedure insert_lib_inventory_tags(pInvID in number, pRes out number);

      procedure addRemoveEtiketSebet(pPrefix  in varchar2, --Sebet adi ucun prefix
                                     pResSebetAdi out varchar2,
                                     pRes in out number);

      procedure insert_update_lib_inv_requests(
                               pRequestID  in number,
                               pIsHazir in number,
                               pNote in varchar2,
                               pStatus in number,
                               pResStatus  in  out number,
                               pUserCID in varchar2 :=null,
                               pInvID in varchar2 :=null,
                               pStartDate in varchar2 :=null,
                               pEndDate in varchar2 :=null
                               );

       procedure insert_delete_etiket_sebet(
                               pEtiketSebetAdi  in varchar2,
                               pInvID in varchar2,
                               pType in number,
                               pRes out number
                               );

      procedure insert_delete_offline_date(
                               pOfflineDate  in varchar2,
                               pType in number,
                               pRes out number
                               );

      procedure insert_interval(
                               pIntervalName  in varchar2,
                               pRes in out number);

      procedure insert_reserve(
                               pUserCid  in varchar2,
                               pBookId in number,
                               pJIssueId in number,
                               pDiscId in number,
                               pEndDate in number,
                               pRes in out number);

      procedure delete_books( pBookId in out number);

      procedure delete_language( pMatLangId in out number);

      procedure delete_material_subject( pMatSubjId in out number);

      procedure delete_author( pAuthorId in out number);

      procedure delete_journal_issues( pJournalIssueID in out number);

      procedure delete_journal_types( pJournalID in out number);

      procedure delete_discs( pDiscID in out number);

      procedure delete_publishers( pPublisID in out number);

      procedure delete_invertories( pInvId in out number);

      procedure delete_hesab_materials( pHesabMatId in varchar2, pRes out number);

      procedure delete_hesabli_invertories ( pHesabID in number,
                                      pOdaID in number,
                                      pMatType in number,-- 0-kitab, 1-jurnal, 2-disk
                                      pMaterialID in number,
                                      pRes out number);

      procedure delete_users(pUserID in varchar2, pRes in out number);

      procedure delete_journal_subsription(pJ_S_ID in number, pRes in out number);

      procedure delete_request(pInvReqID in varchar2, pRes in out number);

      procedure delete_reserve(pReserveID in varchar2, pRes in out number);

      procedure loan_processes(
                             pType in  number,
                             pLoanID in number,
                             pUserId in varchar2,
                             pKitabxanciID in number,
                             pRes out number,
                             pNote out varchar2,
                             pInvID in varchar2 :=null
                             );

      procedure user_max_materials(pUserId in varchar2,pMaterialType in number, pRes in out number);

      procedure user_material_uzatma_icazesi(pLoanID in number,pRes in out number);

       procedure  Proc_Job_Update;

end PKG_LIBRARY;


/

  GRANT EXECUTE ON "DEV_LIBRARY"."PKG_LIBRARY" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Package Body PKG_ACQUISITION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "DEV_LIBRARY"."PKG_ACQUISITION" is

   procedure manage_items(
                             pTitle in varchar2,
                             pAuthor in varchar2,
                             pISBN in varchar2,
                             pItemType in char,
                             pBatchId in number,
                             pPublisherId in number,
                             pPubYear in number,
                             pPubCity in varchar2,
                             pCount in number,
                             pCost in number,
                             pCurrency in char,
                             pLocation in char,
                             pCreateDate in date,
                             pUserCID in char,
                             pRes out number
                               ) is
    vBook_id number := null;
    vJ_issue_id number := null;
    vJournal_id number;
    vDisc_id number := null;
    last_barcode number;
    begin
         pRes := 0;
         if pItemType in ('BK', 'VM', 'MX') then
              insert into lib_books(title, isbn, publisher_id, pub_year, pub_city, type) values(pTitle, pISBN, pPublisherId, pPubYear, pPubCity, pItemType) returning book_id into vBook_id;
              
         elsif pItemType in ('CR') then
              insert into lib_journals(title, isbn, publisher_id, pub_year, pub_city, type) values(pTitle, pISBN, pPublisherId, pPubYear, pPubCity, pItemType) returning journal_id into vJournal_id;
              insert into lib_journal_issues(journal_id, issue_name) values(vJournal_id, pTitle) returning j_issue_id into vJ_issue_id;
         elsif pItemType in ('CF', 'MP', 'MU') then
              insert into lib_discs(name, isbn, publisher_id, pub_year, pub_city, type) values(pTitle, pISBN, pPublisherId, pPubYear, pPubCity, pItemType) returning disc_id into vDisc_id;
         end if;
         
         insert into lib_book_authors (surname, book_id, j_issue_id, disc_id, is_main) values(pAuthor, vBook_id, vJ_issue_id, vDisc_id, 0);
         insert into lib_hesab_mats(hesab_id, book_id, j_issue_id, disc_id, count, giris_tarixi, user_cid)
                              values(pBatchId, vBook_id, vJ_issue_id, vDisc_id, pCount, pCreateDate, pUserCID);
         for i in 1..pCount
           loop  
             select GenerateNextBarCode(max(li.barcode)) into last_barcode from lib_inventory li;
             insert into lib_inventory(book_id, j_issue_id, disc_id, receive_date, hesab_id, price, currency, barcode, sigle_type, user_cid)
              values(vBook_id, vJ_issue_id, vDisc_id, pCreateDate, pBatchId, pCost, pCurrency, last_barcode, pLocation, pUserCID) returning inv_id into pRes;
             if vBook_id is not null then
                insert into inventory_book(inv_id, inventory_no) values (pRes, pRes);
             end if;
           end loop;
         commit;
    end;
    procedure UpdateItem(pInventoryID in number,
                         pCost in number,
                         pCurrency in char,
                         pLocation in char,
                         pUserCID in char,
                         pRes out number
                                      ) is
      begin
        pRes := 0;
        
        update lib_inventory li set li.price = pCost, li.currency = pCurrency, li.sigle_type = pLocation, li.edited_by = pUserCID
         where li.inv_id = pInventoryID;
        pRes := sql%rowcount; /* if updated correct it sets to 1 if not it stays 0*/
      end;
     
    procedure delete_items( pInvId in out number) is
      vBookID number;
      vJ_Issue_ID number;
      vDiscID number;
      vHesabID number;
      begin
      if pInvId > 0 then
           select i.book_id, i.j_issue_id, i.disc_id, i.hesab_id into vBookID, vJ_Issue_ID, vDiscID, vHesabID from lib_inventory i where i.inv_id=pInvId;
           delete from lib_inventory i where i.inv_id=pInvId;
           update lib_hesab_mats lh
           set lh.count = (select count(li.inv_id) from lib_inventory li where (li.book_id =  lh.book_id
                           or li.j_issue_id = lh.j_issue_id or li.disc_id = lh.disc_id) and li.hesab_id = lh.hesab_id)
           where (lh.book_id =  vBookID or lh.j_issue_id = vJ_Issue_ID or lh.disc_id = vDiscID) and lh.hesab_id = vHesabID;
           pInvId := sql%rowcount;/*if deleted successfully it returns 1*/
      end if;
    end;
end PKG_ACQUISITION;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CATALOGING
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "DEV_LIBRARY"."PKG_CATALOGING" is
  procedure InsertUpdateBibliographicInfo(pBookId in number,
                                    pJournalId in number,
                                    pDiscId in number, 
                                    pBibliographicInfo in clob,
                                    pAppLog in number,
                                    pRes in out number) is
    --- v_bibInfo bibliographicInfo := bibliographicInfo();
    -- Format field TAG_INDICATORS_SUBFIELD_DATA
    -- example of array data  100_1#_$a_ARNONSKY, JIM
    id number;
    begin
      update lib_bibliographic_info lb set lb.xml_data = XMLType(pBibliographicInfo), lb.app_log = pAppLog
                 where lb.book_id = pBookId or lb.journal_id = pJournalId or lb.disc_id = pDiscId returning lb.info_id into id;
    
      if sql%rowcount = 0 then 
        INSERT into lib_bibliographic_info(book_id, journal_id, disc_id, xml_data, app_log)
                values(pBookId,pJournalId, pDiscId, XMLType(pBibliographicInfo), pAppLog) returning info_id into id;
      end if;
      commit;
      pRes := id;
    end;
  /*
  procedure UpdateBibliographicInfo() is 
    begin 
      
    end;
  procedure DeleteBibliographicInfo() is 
    begin 
      
    end;
   */
procedure insert_update_materials(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pMainAuthor in varchar2,
                             pOtherAuthors in varchar2,
                             pPublisher in varchar2,
                             pPub_year in varchar2,
                             pPub_city in varchar2,
                             pPageNumber in varchar2,
                             pParallel_title in varchar2,
                             pTitle_related_info in varchar2,
                             pLanguage in char,
                             pType in char,
                             pMaterialID in varchar2,
                             pRes in out number
                               ) is
    pub_id number := 0;
    begin
      Begin
        select lp.publisher_id into pub_id from lib_publishers lp where lower(lp.name) = lower(pPublisher) and ROWNUM = 1;
        exception when NO_DATA_FOUND then
        insert into lib_publishers lp (lp.name) values(pPublisher) returning lp.publisher_id into pub_id;  
      End;  
      case
        when pType in ('BK', 'VM', 'MX') then
            update lib_books b set  b.isbn=pIsbn, b.title=pTitle, b.publisher_id = pub_id,  b.pub_year=pPub_year,b.pub_city=pPub_city,
                   b.page_num=pPageNumber, b.parallel_title = pParallel_title, b.title_related_info = pTitle_related_info, b.language = pLanguage, b.type = pType
                   where b.book_id=pMaterialID;
             delete from lib_book_authors la where la.book_id = pMaterialID;
             insert into lib_book_authors la (la.book_id, la.surname, la.is_main) values(pMaterialID, pMainAuthor, 1);
             insert into lib_book_authors lb (lb.book_id, lb.surname) SELECT pMaterialID, REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) AS author
                                                                       FROM dual CONNECT BY REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) IS NOT NULL;
             pRes := 1;
        when pType in ('CR') then
            update lib_journals b set  b.isbn=pIsbn, b.title=pTitle, b.publisher_id = pub_id, b.pub_year=pPub_year,b.pub_city=pPub_city,
                   b.page_num=pPageNumber, b.parallel_title = pParallel_title, b.title_related_info = pTitle_related_info, b.language = pLanguage, b.type = pType
                   where b.journal_id=pMaterialID;
            delete from lib_book_authors la where la.j_issue_id = pMaterialID;
            insert into lib_book_authors la (la.j_issue_id, la.surname, la.is_main) values((select lj.j_issue_id from lib_journal_issues lj where lj.journal_id = pMaterialID), pMainAuthor, 1);
            insert into lib_book_authors lb (lb.j_issue_id, lb.surname) SELECT (select lj.j_issue_id from lib_journal_issues lj where lj.journal_id = pMaterialID), REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) AS author
                                                                       FROM dual CONNECT BY REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) IS NOT NULL;
            pRes := 1;
         when pType in ('CF', 'MP', 'MU') then
            update lib_discs b set  b.isbn=pIsbn, b.name=pTitle, b.publisher_id = pub_id, b.pub_year=pPub_year,b.pub_city=pPub_city,
                    b.parallel_title = pParallel_title, b.language = pLanguage, b.type = pType
                   where b.disc_id=pMaterialID;
            delete from lib_book_authors la where la.disc_id = pMaterialID;
            insert into lib_book_authors la (la.disc_id, la.surname, la.is_main) values(pMaterialID, pMainAuthor, 1);
            insert into lib_book_authors lb (lb.disc_id, lb.surname) SELECT pMaterialID, REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) AS author
                                                                       FROM dual CONNECT BY REGEXP_SUBSTR(pOtherAuthors, '[^,]+', 1, LEVEL) IS NOT NULL;
            pRes := 1;
      end case;
      commit;
    end;
end PKG_CATALOGING;

/
--------------------------------------------------------
--  DDL for Package Body PKG_LIBRARY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "DEV_LIBRARY"."PKG_LIBRARY" is

  procedure insert_update_lib_book_authors(
                               pBookID  in number,
                               pAuthorName    in varchar2,
                               pAuthorSurname in varchar2,
                               pBookAuthorID  in out number,
                               pIsMain in number) is
    sayi number:=0;
    id number;
    begin
       select count(*) into sayi from lib_book_authors a where a.book_id=pBookID and LOWER(a.name)= LOWER(pAuthorName) and LOWER(a.surname)= LOWER(pAuthorSurname);

         if pIsMain=1 then
            update lib_book_authors a set a.is_main=0 where a.book_id=pBookID;
         end if;

         if pBookAuthorID >0 then
             if sayi<=1 then
                update lib_book_authors a set a.name=pAuthorName,a.surname=pAuthorSurname,a.is_main=pIsMain where a.book_author_id=pBookAuthorID;
             else
                 raise_application_error(-21001, 'Yazar sistemdə var.');
             end if;
         else
             if sayi=0 then
                insert into lib_book_authors(book_id,name,surname,is_main) values (pBookID,pAuthorName,pAuthorSurname,pIsMain) returning book_author_id into  id;
                pBookAuthorID:=id;
             else
                raise_application_error(-21001, 'Yazar sistemdə var.');
             end if;
       end if;
    end;

    procedure insert_material_subject(
                      pDeweyCode in varchar2,
                      pDepCode in varchar2,
                      pStatus in out number,
                      pIsMain in number,
                      pBookId in number := null,
                      pJournalId in number := null,
                      pDiscId in number := null
    ) is

    vDeweyId number;
    coun number;
    vStatus number;
    begin

                 insert into lib_mat_subjects(book_id, journal_id, disc_id, dewey_key, dep_code, is_main)
                                      values (pBookId, pJournalId, pDiscId, pDeweyCode, pDepCode, pIsMain) returning mat_subj_id into vStatus;

             pStatus :=vStatus;
    end;

    procedure insert_language(
                             pLangCode in varchar2,
                             pMatLangId out number,
                             pBookId in number :=null,
                             pJournalId in number :=null
                               ) is
    id number;
    begin
         id :=0;
         if pBookId > 0 then
              insert into lib_material_lang(book_id,lang_code) values(pBookId,pLangCode) returning mat_lang_id into id;
              pMatLangId :=id;
         elsif pJournalId is not null then
              insert into lib_material_lang(journal_id,lang_code) values(pJournalId,pLangCode) returning mat_lang_id into id;
              pMatLangId :=id;
         end if;
    end;

    procedure insert_update_books(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pPublisher_id in varchar2,
                             pPub_year in varchar2,
                             pPub_city in varchar2,
                             pEditor in varchar2,
                             pTranslator in varchar2,
                             pPageNumber in varchar2,
                             pSeriya in varchar2,
                             pSureli in number,
                             pNote in varchar2,
                             pBookId in out number
                               ) is
    id number;
    begin
         id :=0;
         if pBookId = 0 then
              insert into lib_books(isbn,title,publisher_id,pub_year,pub_city,editor,translator,page_num,seriya,sureli,note)
              values(pIsbn,pTitle,pPublisher_id,pPub_year,pPub_city,pEditor,pTranslator,pPageNumber,pSeriya,pSureli,pNote) returning book_id into id;
              pBookId :=id;
         else
              update lib_books b set b.isbn=pIsbn,b.title=pTitle,b.publisher_id=to_number(pPublisher_id),b.pub_year=pPub_year,b.pub_city=pPub_city,b.editor=pEditor,
              b.translator=pTranslator,b.page_num=to_number(pPageNumber),b.seriya=pSeriya,b.sureli=pSureli,b.note=pNote where b.book_id=pBookId;
         end if;
    end;

    procedure insert_update_journal_issues(
                             pJournalID in varchar2,
                             pIssueNumber in varchar2,
                             pIssueName in varchar2,
                             pPageNumber in varchar2,
                             pDiagonal in varchar2,
                             pIssueDate in varchar2,
                             pJurnalIssueId in out number
                               ) is
    id number;
    sayi number;
    begin
         id :=0;
         select count(*) into sayi from lib_journal_issues j where j.journal_id=to_number(pJournalID) and LOWER(j.issue_name)=LOWER(pIssueName);

         if pJurnalIssueId =0 then
             if sayi = 0 then
                insert into lib_journal_issues(journal_id,ISSUE,ISSUE_NAME,PAGE_NUM,DIAGONAL,ISSUE_DATE)
                values(pJournalID,pIssueNumber,pIssueName,pPageNumber,pDiagonal,pIssueDate) returning j_issue_id into id;
                pJurnalIssueId :=id;
              else raise_application_error(-21001, 'Jurnal sayı sistemdə var.');
              end if;
         else
              update lib_journal_issues j set j.journal_id=pJournalID,j.issue=pIssueNumber,j.issue_name=pIssueName,j.page_num=pPageNumber,j.diagonal=pDiagonal,j.issue_date=pIssueDate
              where j.j_issue_id=pJurnalIssueId;
         end if;

    end;


    procedure insert_update_journal_types(
                             pIsbn in varchar2,
                             pTitle in varchar2,
                             pPublisher_id in varchar2,
                             pIntervalId in varchar2,
                             pBorcVerme in varchar2,
                             pDiagonal in varchar2,
                             pJournalTypeId in out number
                               ) is
    id number;
    sayi number:=0;
    begin
         id :=0;
         select count(*) into sayi from lib_journals j where LOWER(j.title)=LOWER(pTitle);

         if pJournalTypeId =0 then
              if sayi =0 then
                  insert into lib_journals(isbn,title,publisher_id,PUBLISH_INTERVAL_ID,BORC_VERME,DIAGONAL)
                  values(pIsbn,pTitle,pPublisher_id,pIntervalId,pBorcVerme,pDiagonal) returning JOURNAL_ID into id;
                  pJournalTypeId :=id;
              else raise_application_error(-21001, 'Jurnal növü sistemdə var.');
              end if;
         else
              update lib_journals j set j.isbn=pIsbn,j.title=pTitle,j.publisher_id=pPublisher_id,j.publish_interval_id=pIntervalId,j.borc_verme=pBorcVerme,j.diagonal=pDiagonal
              where j.journal_id=pJournalTypeId;
         end if;

    end;

    procedure insert_update_j_subsription(
                             pJournalID in varchar2,
                             pStartDate in varchar2,
                             pEndDate in varchar2,
                             pWarningDate in varchar2,
                             pPrice in varchar2,
                             pStatus in varchar2,
                             pJurnal_S_Id in out number
                               ) is
    id number;
    begin
         id :=0;


         if pJurnal_S_Id =0 then
              update lib_journal_subscription j set j.son=0 where j.journal_id=pJournalID;
              insert into lib_journal_subscription(journal_id,start_date,end_date,warning_date,price,warning_status,son)
              values(pJournalID,pStartDate,pEndDate,pWarningDate,pPrice,pStatus,1) returning journal_s_id into id;
              pJurnal_S_Id :=id;
         else
              update lib_journal_subscription j set j.journal_id=pJournalID,j.start_date=pStartDate,j.end_date=pEndDate,
                     j.warning_date=pWarningDate,j.price=pPrice,j.warning_status=pStatus
              where j.journal_s_id=pJurnal_S_Id;
         end if;

    end;

    procedure insert_update_discs(
                               pDiscID  in out number,
                               pName    in varchar2) is
    id number;
    sayi number:=0;
    begin

      select count(*) into sayi from lib_discs d where LOWER(d.name)=LOWER(pName);

           if pDiscID >0 then
              update lib_discs d set d.name=pName where d.disc_id=pDiscID;
          else
              if sayi =0 then
                  insert into lib_discs(disc_id,name) values(pDiscID,pName) returning disc_id into  id;
                  pDiscID :=id;
              else raise_application_error(-21001, 'Disk adı sistemdə var.');
              end if;
          end if;

    end;

    procedure insert_update_publishers(
                               pPublisID  in out number,
                               pName    in varchar2) is
    id number;
    sayi number:=0;
    begin

      select count(*) into sayi from lib_publishers p where LOWER(p.name)=LOWER(pName);

        if pPublisID >0 then
            update lib_publishers p set p.name=pName where p.publisher_id=pPublisID;
         else
            if sayi =0 then
                insert into lib_publishers(publisher_id,name) values(pPublisID,pName) returning publisher_id into  id;
                pPublisID :=id;
            else raise_application_error(-21001, 'Nəşriyyat adı sistemdə var.');
            end if;
         end if;

    end;

     procedure insert_update_invertories(
                             ptype in number,--bu parametr materialin tipini tutur
                             pMaterialID in varchar2,
                             pOdaID in varchar2,
                             pStatus in number,
                             msg out varchar2,
                             pHesab_id in varchar2,
                             pInv_id in number :=null,
                             pInvCount in number:=null
                               ) is
    num number;
    id varchar2(10);
    user_name varchar2(25);
    emeliyyat_no number;
    begin
          msg :=''; ---DBMS_OUTPUT.put_line('burda');
        if pInv_id>0 then
            case
              when ptype = 1 then
                  update lib_inventory i set i.book_id=to_number(pMaterialID), i.oda_id=pOdaID, i.status=pStatus where i.inv_id=pInv_id;
                  msg :='1';
              when ptype = 2 then
                  update lib_inventory i set i.j_issue_id=pMaterialID, i.oda_id=pOdaID, i.status=pStatus where i.inv_id=pInv_id;
                  msg :='1';
               when ptype = 3 then
                  update lib_inventory i set i.disc_id=pMaterialID, i.oda_id=pOdaID, i.status=pStatus where i.inv_id=pInv_id;
                  msg :='1';
            end case;

         else

            if SYS_CONTEXT('qaf_app_ctx', 'USER_ID')!= 0 then
             Begin
                select e.hname into user_name from dbmaster.employee e where e.emp_id=SYS_CONTEXT('qaf_app_ctx', 'USER_ID');
                exception when NO_DATA_FOUND then raise_application_error(-20002, SYS_CONTEXT('qaf_app_ctx', 'USER_ID')||' login xetasi');
              End;
            else
              user_name:='';
            end if;

            select SEQ_LIB_INVENTARY_EMELIYYAT_NO.NEXTVAL into emeliyyat_no from dual;

            case
              when ptype = 1 then
                   for num in 1 .. pInvCount loop
                      insert into lib_inventory(book_id, receive_date, oda_id, status, hesab_id,user_name,emeliyyat_no)
                      values(pMaterialID,Sysdate,pOdaID,pStatus,pHesab_id,user_name, emeliyyat_no) returning inv_id into id;

                      if length(msg) > 0 then msg := msg ||','; end if;
                      msg :=  msg ||id;
                   end loop;

              when ptype = 2 then
                   for num in 1 .. pInvCount loop
                      insert into lib_inventory(j_issue_id, receive_date, oda_id ,status, hesab_id,user_name,emeliyyat_no)
                      values(pMaterialID,Sysdate,pOdaID,pStatus,pHesab_id,user_name, emeliyyat_no)returning inv_id into id;

                      if length(msg) > 0 then msg := msg ||','; end if;
                      msg := msg ||id;
                  end loop;
               when ptype = 3 then
                  for num in 1 .. pInvCount loop
                    insert into lib_inventory(disc_id, receive_date, oda_id, status, hesab_id,user_name,emeliyyat_no)
                    values(pMaterialID,Sysdate,pOdaID,pStatus,pHesab_id,user_name, emeliyyat_no)returning inv_id into id;

                    if length(msg) > 0 then msg := msg ||','; end if;
                    msg := msg ||id;
                  end loop;
            end case;
         end if;
    end;

     procedure update_invertories_sil_berpaEt(pType in number, pInvID number, pRes out number) is
     -- pType: 1- Refdedir(Sil), 3-Silinib(Berpa Et)
     status number;
      begin
         pRes :=-1;

         if pInvID >0 then
              select i.status into status from lib_inventory i where i.inv_id=pInvID;

              if pType = 1 and status = 1 then
                update lib_inventory i set i.status=0 where i.inv_id=pInvID;
                commit;
                pRes := 1;
              elsif (pType = 3 and status = 0) or (pType = 4 and status = -1) then
                update lib_inventory i set i.status=1 where i.inv_id=pInvID;
                commit;
                pRes := 1;
              end if;
         end if;
    end;

    procedure insert_update_users(
                             pStudId in varchar2,
                             pEmpId in varchar2,
                             pName in varchar2,
                             pSurname in varchar2,
                             pNote in varchar2,
                             pUserId in out varchar2
                               ) is
    id varchar2(7);
    user_id varchar2(7);
    begin
         id :=0;
         if pUserId  is not null then
             if pStudId is null and pEmpId is null then
                update lib_user_cards u set u.name=pName, u.surname=pSurname
                where u.user_cid=pUserId;             
             end if;
              pUserId :='1';
         else
              if pStudId is not null then
                  user_id:=Generate_CardNo(pStudId, 'T');
              elsif  pEmpId is not null then
                  user_id:=Generate_CardNo(pEmpId, 'P');
              else user_id:=Generate_CardNo(pEmpId, 'K');
              end if;

              insert into lib_user_cards( user_cid,stud_id,emp_id,name,surname) 
              values (user_id,pStudId,pEmpId,pName,pSurname)
              returning user_cid into id;
              pUserId := id;

         end if;
    end;
    
    -- Bu isledilme yeri dbmasterdir. orada student ve emp aktivlesende ve passiflesende isledilir.
    procedure active_passive_user(
                             pStudId in varchar2,
                             pEmpId in number,
                             pStatus in number,
                             pRes in out number
                             ) is
    begin
       pRes := 0;
       if pStudId is not null then
          update lib_user_cards uc set uc.is_active = pStatus where uc.stud_id = pStudId;
       elsif pEmpId is not null then
          update lib_user_cards uc set uc.is_active = pStatus where uc.emp_id = pEmpId;
       end if;
       pRes := sql%rowcount;
    end;

    procedure insert_update_hesablar(
                               pHesabAdi  in varchar2,
                               pUserID in number,-- kitabxanacinin IDsi
                               pHesabID    in out number) is
    id number;
    sayi number;
    begin
       select count(*) into sayi from lib_hesablar h where LOWER(h.title)=LOWER(pHesabAdi);

           if pHesabID > 0 then
              update lib_hesablar h set h.title=pHesabAdi, h.edited_by=pUserID where h.hesab_id=pHesabID;
              pHesabID:=1;
           else
              if sayi = 0 then
                  insert into lib_hesablar(title,create_date,user_id,status) values (pHesabAdi,sysdate,pUserID,0)
                  returning hesab_id into id;
                  pHesabID :=id;
              else raise_application_error(-21001, 'Hesab adı sistemdə var.');
              end if;
           end if;

    end;

    procedure insert_update_hesab_materials(
                               pHesabMatID  in number,
                               pHesabID in number,
                               pCount in number,
                               pUserID in number,-- kitabxanacinin IDsi
                               pRes    out number,
                               pBookId in varchar2 :=null,
                               pJ_Issue_id in varchar2 :=null,
                               pDiscID in varchar2 :=null
                               ) is
    id number;
    begin
          pRes :=-1;
       if pHesabMatID >0 then
          update lib_hesab_mats m set m.book_id=pBookId,m.j_issue_id=pJ_Issue_id,
            m.disc_id=pDiscID,m.count=pCount, m.edited_by=pUserID
          where m.hesab_mat_id=pHesabMatID;
          pRes:=1;
      else
          insert into lib_hesab_mats (hesab_id,book_id,j_issue_id,disc_id,count,giris_tarixi,user_id)
          values (pHesabID,pBookId,pJ_Issue_id,pDiscID,pCount,sysdate, pUserID ) returning hesab_mat_id into id;
          pRes :=id;
      end if;
    end;

    procedure update_hesabli_invertories(pHesabID in number,pRes out number) is
     begin                             --Bu procedure hesabi tesdiqleyende isleyir
         pRes :=-1;
         if pHesabID >0 then
              update lib_inventory i set i.status=1 where i.hesab_id=pHesabID;
              update lib_hesablar h set h.status=1 where h.hesab_id=pHesabID;
              pRes := 1;
         end if;
    end;

    procedure insert_lib_inventory_tags(pInvID in number, pRes out number) is
     begin
         pRes :=-1;
         if pInvID >0 then
              update lib_inventory_tags it set it.son=0 where it.inv_id=pInvID;
              insert into lib_inventory_tags(inv_id,print_date,son) values(pInvID,sysdate,1);
              pRes := 1;
         end if;
    end;

    --Sifarisleri girir ve ya degisdirir...
     procedure insert_update_lib_inv_requests(
                               pRequestID  in number,
                               pIsHazir in number,
                               pNote in varchar2,
                               pStatus in number,
                               pResStatus in out number,--Kohne status melumati da gelir...
                               pUserCID in varchar2 :=null,
                               pInvID in varchar2 :=null,
                               pStartDate in varchar2 :=null, -- helelik bunun yerine sysdate istifade edirem
                               pEndDate in varchar2 :=null -- bu artiq istifade edilmir.Normalde 24*60 deqiqe tuturdu,
                                                           --indi func_cancel_inv_request_date function'i var..
                               ) is
    id number;
    reserve_bekleme_suresi number :=1; -- material kitabxanaya geldikden sonra siraya duran varsa basqalarinin istifadesiini nece gun mehdudlasdigini tutur.
    begin
       --if pInvID  = 76915 then  raise_application_error(-20123, 'Burdadi'); end if;
       if pRequestID >0 then
          select r.status into id from lib_inv_requests r where r.lib_inv_req_id=pRequestID;
          if id = pResStatus  then
            update lib_inv_requests r set r.ishazir=pIsHazir,r.note=pNote,r.status=pStatus, r.hazir_date = decode(pIsHazir, 1, sysdate, 0, null)
            where r.lib_inv_req_id=pRequestID;

            if  id!=pStatus THEN
               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value)
                      values('lib_inv_requests',pRequestID,2,'STATUS',pStatus,id);

               if pStatus = -1 then
                  update lib_inv_requests r set r.who_cancel=2 where  r.lib_inv_req_id=pRequestID;
               end if;
            end if;

            pResStatus:=2;
          else pResStatus:=3;
          end if;
      else
          select count(*) into id from lib_inv_requests r where  r.inv_id=pInvID and r.status=0;
          --Eyni inventar evvelceden sifaris verilib mi,ona baxiram...
          if id = 0 then
                select count(*) into id  from lib_inventory i
                left join lib_loans l on l.inv_id=i.inv_id and l.locked=0
                where i.inv_id=pInvID and l.locked is null and i.status=1;

                if id=1 then -- demek ki kitabxanadadir, onda sifaris vere biler...
                      select nvl(sum((case when li.book_id is not null then Func_get_Max_Material(pUserCID,1) -
                      Func_Loan_Reques_Mat_Count(pUserCID,1) when li.j_issue_id is not null then
                      Func_get_Max_Material(pUserCID,2) - Func_Loan_Reques_Mat_Count(pUserCID, 2)
                      when li.disc_id is not null then Func_get_Max_Material(pUserCID, 3) -
                      Func_Loan_Reques_Mat_Count(pUserCID, 3) end)),1) as count into id from lib_invertory li
                      left join lib_books b on b.book_id=li.book_id  where (b.sureli is null or b.sureli=1) and  li.inv_id = pInvID;

                      -- Maksimum material alma limiti tamamlanmayibsa
                      if id > 0 then
                          -- Bu sql'de bu material ucun evvelceden siraya duran var mi ve bu material buraya 1 gunden az muddete geri qayidibmi, onlari hesablayir
                          -- ve cixan netice eyer 0'dan boyukse,demek ki, siraya duran var ve material kitabxanaya son 1 gun icinde qaytarilib. O zaman basqa istifadeciye bu materiali vermeyeceyik.
                          select case when t.kitabxanada >0 then
                          (case when t.novbedeyem>0 then t.novbedeyem else  t.kitabxanada - t.diger_novbe_say end) else t.kitabxanada end say into id
                          from (select sum(x.kitab_say) - sum(x.oxuyucuda)- sum(x.sifaris) as kitabxanada, max(x.diger_novbe_say) as diger_novbe_say ,  max(x.novbedeyem) as novbedeyem
                          from ( select (select count(*) from dual) as kitab_say,(select count(l.loan_id) from dual) as oxuyucuda,
                            (select count(*) from lib_inv_requests req where req.inv_id = i.inv_id and req.status = 0) as sifaris,
                            (select count(*) from lib_reserve_list r where
                                    exists(select * from lib_loans lo where i.inv_id=lo.inv_id and lo.delivery_date + 1 > sysdate)
                             and nvl(i.book_id, 0) = nvl(r.book_id, 0)
                                     and nvl(i.j_issue_id, 0) = nvl(r.j_issue_id, 0) and nvl(i.disc_id, 0) = nvl(r.disc_id, 0)
                                     and r.user_cid!= pUserCID and r.status = 1) as diger_novbe_say,
                            (select count(*) from lib_reserve_list r where  nvl(i.book_id, 0) = nvl(r.book_id, 0)
                                     and nvl(i.j_issue_id, 0) = nvl(r.j_issue_id, 0) and nvl(i.disc_id, 0) = nvl(r.disc_id, 0)
                                     and r.user_cid= pUserCID and r.status = 1 ) as novbedeyem
                           from lib_inventory inv,  lib_inventory i
                           left join lib_loans l on i.inv_id = l.inv_id and l.locked=0
                           where nvl(i.book_id, 0) = nvl(inv.book_id, 0)and nvl(i.j_issue_id, 0) = nvl(inv.j_issue_id, 0)
                           and nvl(i.disc_id, 0) = nvl(inv.disc_id, 0) and inv.inv_id = pInvID and i.status=1) x) t;

                          if id <= 0 then --Bu material ucun kitabxanada musait olma sayi
                             pResStatus :=0;-- Bu material verile bilmez.cunki halhazirda bunun ucun siraya duran var
                          else
                              insert into lib_inv_requests(user_cid,inv_id,req_start_date,req_end_date,ishazir, status)
                              values(pUserCID,pInvID,sysdate, func_cancel_inv_request_date(sysdate), 0, 0) returning lib_inv_req_id into id;

                              insert into lib_logs(table_name,row_id,log_type,column_name,new_value,emp_id,host_name)
                                        values('lib_inv_requests', id, 1, 'INV_ID', pInvID, pUserCid, 'WEB');
                              commit;
                              pResStatus :=id;
                          end if;
                      else
                          pResStatus :=0;
                      end if;
                 else
                      pResStatus :=0;
                 end if;
             else
                 pResStatus :=0;
            end if;
      end if;
    end;

    procedure addRemoveEtiketSebet(pPrefix  in varchar2, --Sebet adi ucun prefix
                                   pResSebetAdi out varchar2,
                                   pRes in out number) is
    begin
       if(pRes = 1) then --YENI ETIKET SEBET ADI ELAVE ETMELI
          pResSebetAdi := pPrefix||'-'||to_char(sysdate, 'RRRR-Mon-DD  (HH24:MI:SS)');
          insert into lib_etiket_sebet(sebet_adi, inv_id) values(pResSebetAdi, null);
          return;
       elsif (pRes = 2) then --
           null;
           pRes := 0;
       end if;


    end;

    procedure insert_delete_etiket_sebet(
                               pEtiketSebetAdi  in varchar2,
                               pInvID in varchar2,
                               pType in number,-- pType: 1-insert, 2-delete
                               pRes out number) is
    begin
         pRes := -1;

         if length(pEtiketSebetAdi) >0 then
            if pType = 1 then
               insert into lib_etiket_sebet(sebet_adi,inv_id) values (pEtiketSebetAdi, pInvID);
               commit;
               pRes :=1;
            elsif pType = 2 then
               delete lib_etiket_sebet t where t.sebet_adi = pEtiketSebetAdi and t.inv_id = pInvID;
               commit;
               pRes :=1;
            end if;
         end if;
    end;

     procedure insert_delete_offline_date(
                               pOfflineDate  in varchar2,
                               pType in number,-- pType: 1-insert, 2-delete
                               pRes out number) is
    begin
         pRes := -1;

         if length(pOfflineDate) >0 then
            if pType = 1 then -- Insert
               insert into lib_offline_dates(off_date) values(to_date(pOfflineDate,'MM/DD/YYYY'));
               commit;
               pRes :=1;
            elsif pType = 2 then --Delete
               delete lib_offline_dates t where t.off_date=to_date(pOfflineDate,'MM/DD/YYYY');
               commit;
               pRes :=1;
            end if;
         end if;
    end;

   procedure insert_interval(
                               pIntervalName  in varchar2,
                               pRes in out number) is
    sayi number;
    begin
      select count(*) into sayi from lib_publish_intervals p where LOWER(p.name_az)=LOWER(pIntervalName);

          if pRes = 0 then
             if sayi =0 then
                  insert into lib_publish_intervals (name_az) values (pIntervalName);
                  pRes :=1;
              else raise_application_error(-21001, 'Nəşr aralığı adı sistemdə var.');
              end if;
          else
              pRes:=-1;
          end if;

    end;

    procedure insert_reserve(
                               pUserCid  in varchar2,
                               pBookId in number,
                               pJIssueId in number,
                               pDiscId in number,
                               pEndDate in number,-- sysdate + pEndDate
                               pRes in out number) is
    id number;
    begin
        pRes := 0;

        select count(*) into id from lib_reserve_list r where r.user_cid=pUserCid and r.status = 1 and
        nvl(r.book_id,0)= nvl(pBookId,0) and nvl(r.j_issue_id,0)= nvl(pJIssueId,0) and nvl(r.disc_id,0)= nvl(pDiscId,0);

        if id = 0 then
            select count(*) into id  from lib_inventory i
            left join lib_loans l on l.inv_id=i.inv_id and l.locked=0
            where nvl(i.book_id,0)= nvl(pBookId,0) and nvl(i.j_issue_id,0)= nvl(pJIssueId,0) and nvl(i.disc_id,0)= nvl(pDiscId,0)
            and l.locked is null and i.status=1;

            if id = 0 then -- demek ki kitabxanada material yoxdu, onda siraya dura biler
                insert into lib_reserve_list(user_cid,book_id,j_issue_id,disc_id,end_date,status)
                       values(pUserCid, pBookId, pJIssueId, pDiscId , sysdate+pEndDate, 1) returning lib_reserve_id into id;

               if pBookId is not null then
                      insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value,emp_id,host_name)
                            values('lib_reserve_list',id, 1, 'BOOK_ID',pBookId,'',pUserCid, 'WEB');
               elsif pJIssueId is not null then
                      insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value,emp_id,host_name)
                            values('lib_reserve_list',id,1,'J_ISSUE_ID',pJIssueId,'',pUserCid, 'WEB');
               elsif pDiscId is not null then
                      insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value,emp_id,host_name)
                            values('lib_reserve_list',id,1,'DISC_ID',pDiscId,'',pUserCid, 'WEB');
               end if;
               commit;
               pRes := 1;
            end if;
        end if;


    end;

    procedure delete_books( pBookId in out number) is
    begin
    if pBookId > 0 then
         delete from lib_books b where b.book_id=pBookId;
         pBookId :=1;
    end if;
    end;

    procedure delete_language( pMatLangId in out number) is
    begin
         if pMatLangId > 0 then
            delete lib_material_lang where mat_lang_id=pMatLangId;
            pMatLangId :=1;
        end if;
    end;

    procedure delete_material_subject( pMatSubjId in out number) is
    begin
         if pMatSubjId > 0 then
            delete lib_mat_subjects where mat_subj_id=pMatSubjId;
            pMatSubjId :=1;
        end if;
    end;

    procedure delete_author( pAuthorId in out number) is
    begin
         if pAuthorId > 0 then
            delete lib_book_authors where book_author_id=pAuthorId;
            pAuthorId :=1;
        end if;
    end;

   procedure delete_journal_issues( pJournalIssueID in out number) is
    begin
    if pJournalIssueID > 0 then
         delete from lib_journal_issues j where j.j_issue_id=pJournalIssueID;
         pJournalIssueID :=1;
    end if;
    end;

    procedure delete_journal_types( pJournalID in out number) is
    begin
    if pJournalID > 0 then
         delete from lib_journals j where j.journal_id=pJournalID;
         pJournalID :=1;
    end if;
    end;

    procedure delete_discs( pDiscID in out number) is
    begin
    if pDiscID > 0 then
         delete from lib_discs d where d.disc_id=pDiscID;
         pDiscID :=1;
    end if;
    end;

    procedure delete_publishers( pPublisID in out number) is
    begin
    if pPublisID > 0 then
         delete from lib_publishers p where p.publisher_id=pPublisID;
         pPublisID := 1;
    end if;
    end;

    procedure delete_invertories( pInvId in out number) is
    begin
    if pInvId > 0 then
         delete from lib_inventory i where i.inv_id=pInvId;
         pInvId :=1;
    end if;
    end;

    procedure delete_hesab_materials(
                                          pHesabMatId in varchar2, pRes out number) is
    begin
          if pHesabMatId >0 then
               pRes :=-1;
               delete from lib_hesab_mats m where m.hesab_mat_id=pHesabMatId;
               pRes := 1;
          end if;
    end;

    procedure delete_hesabli_invertories (
                                      pHesabID in number,
                                      pOdaID in number,
                                      pMatType in number,-- 0-kitab, 1-jurnal, 2-disk
                                      pMaterialID in number,
                                      pRes out number) is
    begin
          pRes :=-1;
          if pMaterialID >0 then
               if pMatType = 0 then
                     delete from (select * from lib_inventory i where  hesab_id =pHesabID and oda_id =pOdaID and i.book_id=pMaterialID);
                     pRes := 1;
               elsif pMatType = 1 then
                     delete from (select * from lib_inventory i where  hesab_id =pHesabID and oda_id =pOdaID and i.j_issue_id=pMaterialID);
                     pRes := 1;
               elsif pMatType = 2 then
                     delete from (select * from lib_inventory i where  hesab_id =pHesabID and oda_id =pOdaID and i.disc_id=pMaterialID);
                     pRes := 1;
               else  pRes := -1;
               end if;

          end if;
    end;

    procedure delete_users(pUserID in varchar2, pRes in out number) is
    begin
          if  pUserID is not null then
               pRes :=-1;
               delete from lib_user_cards u where u.user_cid=pUserID;
               pRes := 1;
          end if;
    end;

    procedure delete_journal_subsription(pJ_S_ID in number, pRes in out number) is
    begin
          if  pJ_S_ID is not null then
               pRes :=-1;
               delete from lib_journal_subscription s where s.journal_s_id=pJ_S_ID;
               pRes := 1;
          end if;
    end;

    -- Bu procedure web'den istifadeci terefinden sifarisi legv etmek ucundur
    procedure delete_request(pInvReqID in varchar2, pRes in out number) is
    old_status number;
    user_cid varchar2(7);
    begin
          if  pInvReqID is not null then
               pRes :=-1;
               select r.status,r.user_cid into old_status,user_cid from lib_inv_requests r where r.lib_inv_req_id=pInvReqID;

               update lib_inv_requests r set r.status=-1, r.who_cancel=1 where r.lib_inv_req_id=pInvReqID;

               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value,emp_id,host_name)
                    values('lib_inv_requests',pInvReqID,2,'STATUS',-1,old_status,user_cid, 'WEB');

               commit;
               pRes := 1;
          end if;
    end;

    -- Bu procedure web'den istifadeci terefinden sifarisi legv etmek ucundur
    procedure delete_reserve(pReserveID in varchar2, pRes in out number) is
    old_status number;
    user_cid varchar2(7);
    begin
          if  pReserveID is not null then
               pRes :=-1;
               select r.status, r.user_cid into old_status, user_cid from lib_reserve_list r where r.lib_reserve_id=pReserveID;

               update lib_reserve_list r set r.status = 0, r.end_date = sysdate where r.lib_reserve_id=pReserveID;

               insert into lib_logs(table_name,row_id,log_type,column_name,new_value,old_value,emp_id,host_name)
                    values('lib_reserve_list',pReserveID,2,'STATUS',1,old_status,user_cid, 'WEB');

               commit;
               pRes := 1;
          end if;
    end;

    procedure loan_processes(
                             pType in  number,--bu loan uzerinde ne deyisiklik eleyeceksen,onu tutur
                             -- 1-Material Al,2-Material Ver,3-Vaxtini uzat,4-Itib,5-Berpa Et,6-Ceza ode
                             pLoanID in number,
                             pUserId in varchar2,
                             pKitabxanciID in number,
                             pRes out number,
                             pNote out varchar2,
                             pInvID in varchar2 :=null
                             ) is
    id number :=0;
    sureli number :=-1;
    verilme_suresi number;
    uzatma_suresi number;
    max_material number;
    uzatma_icazesi number :=-1;--Vaxtini uzat hissesinde uzatma haqqi olub olmadigini yoxlayir  0-Icaze yoxdur, 1- Icaze var
    reserve_bekleme_suresi number :=1; -- material kitabxanaya geldikden sonra siraya duran varsa basqalarinin istifadesiini nece gun mehdudlasdigini tutur.
    ceza_pulu number;
    studid varchar(9);
    empid number;
    vbook_id number;
    vj_issue_id number;
    vdisc_id number;
    sayi number;
    material_sayi number;
    vNum number;
    vNote varchar(4000);
    begin
      pRes :=0;
      Get_Verilme_Uzatma_Suresi(pInvID, pUserId, verilme_suresi, uzatma_suresi, max_material, material_sayi);

      select Func_User_Toplam_Ceza(pUserId) into sayi from dual;

       case pType
            when 1 then --Materiali geri al
                 pRes := 0;
                 -------- Materiali geri almamisdan evvel, evvelceden novbeye duran varmi, yoxdu onu hesablayir. Novbeye duran varsa, email yazilacaq -----
                 ------------------------------------------------------------------------------------------------------------------------------------------
                 select l.inv_id into id from lib_loans l where l.loan_id = pLoanID;

                -- Novbeye duranlarin sayini tapir
                select count(*) into vNum from lib_reserve_list r ,lib_inventory i, lib_user_cards uc
                where r.user_cid = uc.user_cid and i.inv_id = id and nvl(r.book_id,0)=nvl(i.book_id,0)
                and nvl(r.j_issue_id,0)=nvl(i.j_issue_id,0) and nvl(r.disc_id,0)=nvl(i.disc_id,0) and r.status = 1 and sysdate < r.end_date
                and (r.email_send_date is null or r.email_send_date < sysdate - 1)
                and ((uc.emp_id is not null and exists(select * from dbmaster.employee e where e.emp_id = uc.emp_id and e.state = 1))
                or (uc.stud_id is not null and exists(select * from dbmaster.students s where s.stud_id = uc.stud_id and s.status = 1)));

                if vNum > 0 then --Bu demekdir ki bu material ucun novbeye duranlar var....
                    pRes := 2;
                    -- Email gonderilmesi ucun istifadecileri secek
                    select wm_concat( ''''||r.user_cid||'''') into vNote from lib_reserve_list r, lib_inventory i, lib_user_cards uc
                    where r.user_cid = uc.user_cid and i.inv_id = id and nvl(r.book_id,0)=nvl(i.book_id,0)
                    and nvl(r.j_issue_id,0)=nvl(i.j_issue_id,0) and nvl(r.disc_id,0)=nvl(i.disc_id,0)
                    and r.status = 1 and sysdate < r.end_date
                    and (r.email_send_date is null or r.email_send_date < sysdate - 1)
                    and ((uc.emp_id is not null and exists(select * from dbmaster.employee e where e.emp_id = uc.emp_id and e.state = 1))
                    or (uc.stud_id is not null and exists(select * from dbmaster.students s where s.stud_id = uc.stud_id and s.status = 1)));

                    pNote := vNote;
                    -- Email gonderilenleri secenden sonra tekrar email getmesin diye update edek
                    update lib_reserve_list r set r.email_send_date = sysdate
                    where exists(select * from lib_inventory i where i.inv_id = id and nvl(r.book_id,0) = nvl(i.book_id,0)
                                 and nvl(r.j_issue_id,0) = nvl(i.j_issue_id,0) and nvl(r.disc_id,0) = nvl(i.disc_id,0))
                    and r.status = 1 and sysdate < r.end_date and (r.email_send_date is null or r.email_send_date < sysdate - 1);
                end if;
                 ------------------------------------------------------------------------------------------------------

                 select func_ceza_hesablama(pLoanID)  into ceza_pulu from dual;
                 update lib_loans l set l.delivery_date = sysdate, l.locked = 1, l.ceza = ceza_pulu, l.ceza_odenib = 0 where l.loan_id = pLoanID;
                 update lib_loan_action a set a.son = 0 where a.loan_id = pLoanID;
                 insert into lib_loan_action (loan_id,user_id,ip,action_date,action_type,son) values
                 (pLoanID,pKitabxanciID,sys_context('USERENV','IP_ADDRESS'),sysdate,'D',1);

                 if  pRes = 0 then pRes := 1; end if;

            when 2 then --Yeni material ver
                if sayi>0 then raise_application_error(-20000, 'Bu istifadəçinin borcu var, material verilə bilməz.');end if;

               select (case when  i.book_id is not null then (select b.sureli from lib_books b where b.book_id=i.book_id) end) sureli into sureli  from lib_inventory i where i.inv_id=pInvID;
                if material_sayi < max_material or sureli=0 then

                    select count(*)into sayi from lib_inv_requests r where r.inv_id=pInvID and r.user_cid!=pUserId and r.status=0 and sysdate <= r.req_end_date;
                    if sayi > 0 then --Bu materiala sifaris veren basqa istifadecilerin sayi
                      pRes:=-3;-- Bu material verile bilmez.cunki halhazirda bunu sifaris veren var
                    else

                      -- Bu sql'de bu material ucun evvelceden siraya duran var mi ve bu material buraya 1 gunden az muddete geri qayidibmi, onlari hesablayir
                      -- ve cixan netice eyer 0'dan boyukse,demek ki, siraya duran var ve material kitabxanaya son 1 gun icinde qaytarilib. O zaman basqa istifadeciye bu materiali vermeyeceyik.
                      select case when t.kitabxanada >0 then
                      (case when t.novbedeyem>0 then t.novbedeyem else  t.kitabxanada - t.diger_novbe_say end) else t.kitabxanada end say into sayi
                     from (select sum(x.kitab_say) - sum(x.oxuyucuda)- sum(x.sifaris) as kitabxanada, max(x.diger_novbe_say) as diger_novbe_say ,  max(x.novbedeyem) as novbedeyem
                      from ( select (select count(*) from dual) as kitab_say,(select count(l.loan_id) from dual) as oxuyucuda,
                            (select count(*) from lib_inv_requests req where req.inv_id = i.inv_id and req.status = 0 and req.user_cid!=pUserId) as sifaris,
                            (select count(*) from lib_reserve_list r where
                                    exists(select * from lib_loans l where i.inv_id=l.inv_id and l.delivery_date + 1 > sysdate)
                             and nvl(i.book_id, 0) = nvl(r.book_id, 0)
                                     and nvl(i.j_issue_id, 0) = nvl(r.j_issue_id, 0) and nvl(i.disc_id, 0) = nvl(r.disc_id, 0)
                                     and r.user_cid!= pUserId and r.status = 1) as diger_novbe_say,
                            (select count(*) from lib_reserve_list r where  nvl(i.book_id, 0) = nvl(r.book_id, 0)
                                     and nvl(i.j_issue_id, 0) = nvl(r.j_issue_id, 0) and nvl(i.disc_id, 0) = nvl(r.disc_id, 0)
                                     and r.user_cid= pUserId and r.status = 1 ) as novbedeyem
                           from lib_inventory inv,  lib_inventory i
                           left join lib_loans l on i.inv_id = l.inv_id and l.locked=0
                           where nvl(i.book_id, 0) = nvl(inv.book_id, 0)and nvl(i.j_issue_id, 0) = nvl(inv.j_issue_id, 0)
                           and nvl(i.disc_id, 0) = nvl(inv.disc_id, 0) and inv.inv_id = pInvID and i.status=1) x) t;

                      /*
                      select count(*) into sayi  from lib_reserve_list r where exists(select * from lib_inventory i,lib_loans l where i.inv_id=l.inv_id
                      and nvl(i.book_id,0)= nvl(r.book_id,0) and nvl(i.j_issue_id,0)=nvl(r.j_issue_id,0) and nvl(i.disc_id,0)=nvl(r.disc_id,0)
                      and i.inv_id=pInvID and l.delivery_date + reserve_bekleme_suresi > sysdate) and r.status=1 and sysdate <= r.end_date and r.user_cid != pUserId
                      and (select count(*) from lib_reserve_list rl where nvl(rl.book_id,0)= nvl(r.book_id,0) and nvl(rl.j_issue_id,0)=nvl(r.j_issue_id,0)
                      and nvl(rl.disc_id,0)=nvl(r.disc_id,0)  and rl.status=1 and sysdate <= rl.end_date  and rl.user_cid=pUserId) = 0;*/

                      if sayi <= 0 then --Bu material ucun kitabxanada musait olma sayi
                         pRes:=-4;-- Bu material verile bilmez.cunki halhazirda bunun ucun siraya duran veya sifaris veren var
                      else
                         select count(*) into sayi from lib_loans l, lib_inventory i, lib_inventory inv
                         where l.user_cid = pUserId and l.locked = 0 and l.inv_id = i.inv_id and inv.inv_id = pInvID
                         and nvl(i.book_id,1)=nvl(inv.book_id,1) and nvl(i.j_issue_id,1)=nvl(inv.j_issue_id,1) and nvl(i.disc_id,1)=nvl(inv.disc_id,1);

                         if sayi > 0 then
                            pRes := -5; -- Eyni materialdan evvelce alib, ona gore indi ala bilmez.
                            return;
                         end if;

                          select count(*)into sayi from lib_inv_requests r where r.inv_id=pInvID and r.user_cid=pUserId and r.status=0;
                          if sayi >0 then --Eyer bu istifadeci bu materiali evvelceden sifaris veribse, onu alinib eleyir
                             update lib_inv_requests r set r.status=1 where r.inv_id=pInvID and r.user_cid=pUserId and r.status=0;
                          end if;

                          --Bu istifadeci evvelceden bu material ucun siraya durubsa, artiq siraya durmasin....
                          update lib_reserve_list r set r.status = 0
                          where r.user_cid=pUserId  and
                          exists(select * from lib_inventory i where nvl(i.book_id,1)=nvl(r.book_id,1) and nvl(r.j_issue_id,1)=nvl(i.j_issue_id,1) and nvl(r.disc_id,1)=nvl(i.disc_id,1) and i.inv_id=pInvID);

                          if sureli=0 then
                             select (case when (sysdate >= to_date('01/02/' || to_char(sysdate, 'YYYY'), 'DD/MM/YYYY')) and
                               (sysdate <= to_date('01/08/' || to_char(sysdate, 'YYYY'), 'DD/MM/YYYY')) then
                               to_date('01/08/' || to_char(sysdate, 'YYYY/HH24/MI/SS'), 'DD/MM/YYYY/HH24/MI/SS')
                               when (sysdate > to_date('01/08/' || to_char(sysdate, 'YYYY'), 'DD/MM/YYYY')) and
                               ((sysdate < to_date('01/01/' || to_char(to_number(to_char(sysdate, 'YYYY')) + 1), 'DD/MM/YYYY'))) then
                               to_date('01/02/' ||to_char(to_number(to_char(sysdate, 'YYYY')) + 1)|| to_char(sysdate, '/HH24/MI/SS'),
                               'DD/MM/YYYY/HH24/MI/SS') else to_date('01/02/' || to_char(sysdate, 'YYYY/HH24/MI/SS'),'DD/MM/YYYY/HH24/MI/SS')
                               end)- sysdate into verilme_suresi from dual;
                           end if;--Eyer kitab suresizse, yarim il verilme haqqi var.
                          insert into lib_loans(inv_id,user_cid,borrow_date,due_date,locked)
                          values(pInvID,pUserId,sysdate,sysdate+verilme_suresi,0) returning loan_id into id;
                          pRes :=id;

                          update lib_loan_action a set a.son=0 where a.loan_id=pLoanID;
                          insert into lib_loan_action (loan_id,user_id,ip,action_date,action_type,son) values
                          (id,pKitabxanciID,sys_context('USERENV','IP_ADDRESS'),sysdate,'B',1);
                       end if;
                    end if;
                 else
                     pRes :=-2;--Maxsimum material sayina catib
                 end if;
             when 3 then --Vaxtini uzat
                pRes :=0;
                pkg_library.user_material_uzatma_icazesi(pLoanID, pRes);

                if pRes = 1 then
                   update lib_loans l set l.due_date=(l.due_date + uzatma_suresi), l.uzatma_sayi = l.uzatma_sayi + 1  where l.loan_id=pLoanID;
                   commit;
                end if;
             when 4 then --Itiribse
                    pRes :=-1;
                    select func_ceza_hesablama(pLoanID)  into ceza_pulu from dual;
                    update lib_loans l set l.locked=1,l.ceza=ceza_pulu  where l.loan_id=pLoanID;
                    update lib_loan_action a set a.son=0 where a.loan_id=pLoanID;
                    insert into lib_loan_action(loan_id,user_id,ip,action_date,action_type,son) values (pLoanID,pKitabxanciID,sys_context('USERENV','IP_ADDRESS'),sysdate,'L',1);
                    update lib_inventory i set i.status=0 where i.inv_id=(select l.inv_id from lib_loans l where l.loan_id=pLoanID);
                    pRes :=1;
             when 5 then --Berpa et
                    pRes :=-1;
                    update lib_loan_action a set a.son=0 where a.loan_id=pLoanID;
                    insert into lib_loan_action(loan_id,user_id,ip,action_date,action_type,son) values (pLoanID,pKitabxanciID,sys_context('USERENV','IP_ADDRESS'),sysdate,'B',1);
                    update lib_inventory i set i.status=1 where i.inv_id=(select l.inv_id from lib_loans l where l.loan_id=pLoanID);
                    update lib_loans l set l.locked=0,l.ceza=null where l.loan_id=pLoanID;
                    pRes :=1;
             when 6  then -- Ceza ode
                    update lib_loans l set l.ceza_odenib = 1 where l.loan_id=pLoanID;
                    pRes :=1;
        end case;
    end;

    --Bu procedure istifadecinin material ala bilib yada bilmemesini tapir...
    procedure user_max_materials(pUserId in varchar2,pMaterialType in number, pRes in out number)is
    studid varchar(9);
    empid number;
    max_material number;
    sayi number;
    begin
        pRes :=0;
           select trim(u.stud_id),u.emp_id into studid,empid from lib_user_cards u where u.user_cid=pUserId;
           if studid is not null then
             max_material:= Func_get_loan_due_date(studid,'T','LimitMaterial',pMaterialType);
          elsif empid is not null then
             max_material:= Func_get_loan_due_date(empid,'P','LimitMaterial',pMaterialType);
          else
             max_material:= Func_get_loan_due_date(null,'K','LimitMaterial',pMaterialType);
          end if;

          case pMaterialType
          when 1 then
              select count(*) into sayi from lib_loans l,lib_inventory i, lib_books b where l.inv_id=i.inv_id and i.book_id=b.book_id
              and i.book_id is not null and b.sureli=1 and locked=0 and l.user_cid = pUserId;
           when 2 then
              select count(*) into sayi from lib_loans l,lib_inventory i where l.inv_id=i.inv_id and i.j_issue_id is not null and
               locked=0 and l.user_cid = pUserId;
           when 3 then
              select count(*) into sayi from lib_loans l,lib_inventory i where l.inv_id=i.inv_id and i.disc_id is not null and
               locked=0 and l.user_cid = pUserId;
          end case;

          if sayi < max_material then pRes :=1;
              else pRes:=-1;
              end if;
    end;

    --Bu procedure istifadecilerin uzatib uzatmamasini hesablayir....
     procedure user_material_uzatma_icazesi(pLoanID in number,pRes in out number)is
    studid varchar(9);
    empid number;
    vbook_id number;
    vj_issue_id number;
    vdisc_id number;
    uzatma_icazesi number;
    uzatma_suresi number;
    uzatmaIcazesiVermekGunu number; -- -- Vaxtinin qurtarmasina nece gun qalmis uzatma icazesi verile biler, onu tutur
    sureli number;
    sayi number;
    vUzatmaSay number;
    begin
         pRes := 0;
         select (case when  i.book_id is not null then (select b.sureli from lib_books b where b.book_id=i.book_id) else 1 end) sureli into sureli  from lib_inventory i
                  where i.inv_id=(select l.inv_id from lib_loans l where l.loan_id=pLoanID);

         if sureli=0 then
            pRes :=-1;--suresizdir, uzadila bilmez
            return;
         end if;

         select trim(u.stud_id),u.emp_id into studid,empid from lib_user_cards u, lib_loans l where u.user_cid=l.user_cid and l.loan_id = pLoanID;
         select i.book_id,i.j_issue_id,i.disc_id, l.uzatma_sayi into vbook_id, vj_issue_id, vdisc_id, vUzatmaSay from lib_loans l , lib_inventory i where l.loan_id=pLoanID and l.inv_id=i.inv_id;
         select lc.data into sayi from lib_cfg lc where lc.cfg_type = 'UZATMA SAYI';

         if vUzatmaSay >= sayi then
           pRes := -2; -- Uzatma limitini doldurub, uzada bilmez.
           return;
         end if;



         case
         when vbook_id is not null then
             if studid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',1);
             elsif empid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',1);
             else
                 uzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',1);
             end if;

         when vj_issue_id is not null then
             if studid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',2);
             elsif empid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',2);
             else
                 uzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',2);
             end if;

         when vdisc_id is not null then
             if studid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(studid,'T','ExtraDay',3);
             elsif empid is not null then
                 uzatma_suresi:= Func_get_loan_due_date(empid,'P','ExtraDay',3);
             else
                 uzatma_suresi:= Func_get_loan_due_date(null,'K','ExtraDay',3);
             end if;
         end case;

         uzatmaIcazesiVermekGunu := Func_get_loan_due_date(null,null,'UzatmaIcazesiVermekGunu',0);

         select (case when
                 (round(l.due_date) - round(sysdate) <=  uzatmaIcazesiVermekGunu) and uzatma_suresi > 0  then 1 else 0 end ) as ok
         into uzatma_icazesi from lib_loans l where l.loan_id= pLoanID;
         if uzatma_icazesi = 0 then
            pRes :=-3;--uzatma muddeti hele catmayib. (son 5 gun aktiflesir).  uzatma edile bilmez.
            return;
         end if;

         select (case  when i.book_id is not null then (select count(*) from lib_reserve_list r where r.book_id=i.book_id and r.end_date>sysdate and r.status = 1)
                       when i.j_issue_id is not null then (select count(*) from lib_reserve_list r where r.j_issue_id=i.j_issue_id and r.end_date>sysdate and r.status = 1)
                       when i.disc_id is not null then (select count(*) from lib_reserve_list r where r.disc_id=i.disc_id and r.end_date>sysdate and r.status = 1)
                  end) into sayi from  lib_inventory i  where  i.inv_id=(select l.inv_id from lib_loans l where l.loan_id=pLoanID);
         if sayi >0 then
            pRes :=-4;--Bu material ucun sirada duranlar var,ona gore de uzadila bilmez
            return;
         end if;
         pRes :=1;
    end;

    procedure  Proc_Job_Update is
    begin
         -- Vaxti qurtaran sifarisleri legv edir
         update lib_inv_requests r  set r.status=-1,r.who_cancel=3 where sysdate >= r.req_end_date and r.status = 0;

         -- Vaxti qurtaran novbeleri legv edir
         update lib_reserve_list r set r.status = 0 where sysdate >=r.end_date and r.status = 1;

         -- Kitab kitabxanaya geldikden ve 24 saat kecdikden sonra bu material novune novbeye duranlari novbeden cixardir.
         update lib_reserve_list r set r.status = 0
         where r.status = 1 and exists(select * from lib_loans l, lib_inventory i where l.inv_id = i.inv_id and nvl(i.book_id, 0) = nvl(r.book_id, 0)
                                       and nvl(i.j_issue_id, 0) = nvl(r.j_issue_id, 0) and nvl(i.disc_id, 0) = nvl(r.disc_id, 0)
                                       and r.action_date < l.delivery_date and  l.delivery_date < sysdate - 1);

    end;

   end PKG_LIBRARY;

/

  GRANT EXECUTE ON "DEV_LIBRARY"."PKG_LIBRARY" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Function DEWEWROOT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."DEWEWROOT" (deweyNum in varchar2) return varchar2 is
  res varchar2(3);
begin
   for i in 0..9
  LOOP
      for j in 0..9
      LOOP
          for k in 0..9
          LOOP
            if deweyNum != i||'00' then
              if deweyNum =  i||j||'0' then
                res := i||'00';
              elsif deweyNum =  i||j||k then
                res := i||j||'0';
              end if;
            else
               res := NULL;
            end if;

          END LOOP;
      END LOOP;
  END LOOP;
  return(res);
end dewewRoot;


/
--------------------------------------------------------
--  DDL for Function DEWEYROOT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."DEWEYROOT" (deweyNum in varchar2) return varchar2 is
  res varchar2(3);
begin
   for i in 0..9
  LOOP
      for j in 0..9
      LOOP
          for k in 0..9
          LOOP
            if deweyNum != i||'00' then
              if deweyNum =  i||j||'0' then
                res := i||'00';
              elsif deweyNum =  i||j||k then
                res := i||j||'0';
              end if;
            else
               res := NULL;
            end if;

          END LOOP;
      END LOOP;
  END LOOP;
  return(res);
end deweyRoot;


/
--------------------------------------------------------
--  DDL for Function FUNC_CANCEL_INV_REQUEST_DATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_CANCEL_INV_REQUEST_DATE" (pInv_Request_begin_date in date) return date is
  Result date; -- Bu function sifarisin legv etme zamanini hesablayir..

  vBeginDate date;
  i number:=0;
  j number :=0;
begin

  vBeginDate := pInv_Request_begin_date;

  if func_is_offline(vBeginDate)=1 then -- Bazar gunu veya bayram gunune dusurse
        vBeginDate := trunc(vBeginDate) + 1; --Baslama tarixini gunun sonuna cekir...
        i:=1;
  end if;

  while func_is_offline(vBeginDate+1)=1
  loop
        j:=1;
        vBeginDate := vBeginDate+1;
  end loop;

  if i=1 and j=1 then --cunki while dongusunden sonra bir gun sonrasi bayram gunune dusmeyir,
              -- amma eyer biz sifaris verdiyimiz gun offline gunene duserse, tarix trunc olur..gunun basini hesablayir..
              --Gerek bir sonraki gunun basini hesablasin....
     vBeginDate := vBeginDate+1;
  end if;
  --Bura geldiyinde artiq bayramlar ve bazar gunleri qurtarib demek ki....
  -- Baslama tarixinden bir gun sonrasini hesablanir...
  Result:= vBeginDate+1;


  return(Result);
end func_cancel_inv_request_date;


/
--------------------------------------------------------
--  DDL for Function FUNC_CEZA_HESABLAMA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_CEZA_HESABLAMA" (pLoanId in number) return number is
 -- Material uzadilmasa da eger novbeye duran yoxdursa ceza hesablanmir.
 -- Ona gore de, bu funksiya uzadilma muddeti qurtardiqdan sonraki gecikme cezalarini hesablayir. Sonra bunun uzerine NovbeyeDurma Cezasi hesablanib elave edilir.
  Result number;
  ceza_gun number;--Xatirlatma: bu funksiya  toplam illik 25 AZN maksimum ceza hesablayir ve asagidaki her 3aylar ucun qepiklerin cem sayisi
                     -- 27 qepik olmalidir (illik 25 AZN olmasi ucun( 2500qepik/91=27 qepik/3ay  ))
                     --Bu 27 qepiyi de asagidaki kimi azalan sekilde paylasdiririq....(11,8,5,3) => 11*91 + 8*91 + 5*91 + 3*91 = 27*91 = 2500
  toplam_ceza number:=2500;    -- 25 AZN
  ilk_3ay_ceza number:=11;     -- ilk  3 ay ucun her gune 11 qepikdir
  ikinci_3ay_ceza number :=8;  -- ikinci  3 ay ucun her gune 8 qepikdir
  ucuncu_3ay_ceza number :=5;  -- ucuncu  3 ay ucun her gune 5 qepikdir
  dorduncu_3ay_ceza number :=3;-- dorduncu  3 ay ucun her gune 3 qepikdir
  dtDelivery date;
  dtDue date;
  dtBorcHesabBaslangici date := to_date('22.11.2012', 'DD.MM.RRRR'); --Ilk baslayanda evvelki borclari sifirlamaq ucun, bu tarixden etibaren sayilacaq
  vInvID number;
  vUserId char(9);
  vBorrowDate date;
  verilme_suresi number;
  uzatma_suresi number;
  max_material number;
  material_sayi number;
  vSureli number := 1;
  vbook_id number;
  vj_issue_id number;
  vdisc_id number;
begin
  select i.book_id, i.j_issue_id, i.disc_id into vbook_id, vj_issue_id, vdisc_id
  from lib_inventory i, lib_loans l where i.inv_id=l.inv_id and  l.loan_id=pLoanId;

  if vbook_id is not null then
     select b.sureli into vSureli from lib_books b where b.book_id = vbook_id;
  end if;

  select l.borrow_date, l.delivery_date, l.due_date,  l.inv_id, l.user_cid into vBorrowDate, dtDelivery, dtDue, vInvID, vUserId from lib_loans l where l.loan_id=pLoanId;

  Get_Verilme_Uzatma_Suresi(vInvID, vUserId, verilme_suresi, uzatma_suresi, max_material, material_sayi);

  if vSureli = 0 then -- suresizdirse
    uzatma_suresi := 0;
  else
    if vBorrowDate + verilme_suresi + uzatma_suresi >= dtDue then-- Eger uzatma olmayibsa, burada uzadilmis kimi dusunulur.
    --Eger qaytarilacaq tarix cox boyukse(bu hal ancaq kitab suresiz alinib,sonra suleli edildiyi zaman bas vere biler), onda hec bir deyisiklik edilmir
       dtDue := vBorrowDate + verilme_suresi + uzatma_suresi;
    end if;
  end if;



  if (dtDue < dtBorcHesabBaslangici) then dtDue := dtBorcHesabBaslangici; end if;
  if (dtDelivery is null) then dtDelivery := sysdate; end if;
  if (dtDelivery < dtBorcHesabBaslangici) then dtDelivery := dtBorcHesabBaslangici; end if;

  ceza_gun := dtDelivery - dtDue;


  if ceza_gun > 1 then
     if ceza_gun<=91 then
            Result :=ceza_gun*ilk_3ay_ceza;
     elsif ceza_gun<=182 then
            Result :=91*ilk_3ay_ceza+(ceza_gun-91)*ikinci_3ay_ceza;
     elsif ceza_gun<=273 then
            Result :=91*ilk_3ay_ceza+91*ikinci_3ay_ceza+(ceza_gun-182)*ucuncu_3ay_ceza;
     elsif ceza_gun<=364 then
            Result :=91*ilk_3ay_ceza+91*ikinci_3ay_ceza+91*ucuncu_3ay_ceza+(ceza_gun-273)*dorduncu_3ay_ceza;
     elsif ceza_gun>=365 then
            Result :=toplam_ceza;
     end if;
  else
      Result:=0;
  end if;

  if Result > toplam_ceza then
     Result :=toplam_ceza;
  end if;

  return trunc((Result/10))*10 + Func_Novbe_Ceza(pLoanId);
  --exception when NO_DATA_FOUND then Result:=0;  return Result;

end Func_Ceza_Hesablama;


/
--------------------------------------------------------
--  DDL for Function FUNC_GET_BARCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_GET_BARCODE" (lastBarcode in number) return number is
  Barcode number;
  sum_odds number;
  sum_evens number;
begin
  Barcode := substr(lastBarcode, 0, 7) + 1; /*getting first 7 digits with + 1*/
  sum_odds := (substr(Barcode, 1, 1) + substr(Barcode, 3, 1) + substr(Barcode, 5, 1)
             + substr(Barcode, 7, 1)) * 3; /*sum of odd numbers with multiply 3*/
  sum_evens := substr(Barcode, 2, 1) + substr(Barcode, 4, 1) + substr(Barcode, 6, 1); /*sum of even numbers*/
  Barcode := Barcode||substr(10 - substr(sum_odds + sum_evens, 2, 1),-1,1); /*barcode + (10 - (even + odd)->with getting last digit)*/
  return(Barcode);
end FUNC_GET_BARCODE;

/
--------------------------------------------------------
--  DDL for Function FUNC_GET_LOAN_DUE_DATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_GET_LOAN_DUE_DATE" (pUser_Id in varchar2, pUserType in char,pOperationType in varchar2, pMaterialType in number) return number is
  Result number;--Bu funksiya lib_loans table'i ucun due_date hesablayir,hansi istifadeci tipi ucun ne qeder vaxt?
  tip varchar2(2);
  x number;
  data varchar2(10);
begin

    case pMaterialType
    when 1 then --Kitab tipi
          if pUserType = 'T' then
             select dp.edu_level into tip from dbmaster.students s
             left join dbmaster.stud_prog sp on sp.stud_id = s.stud_id
             left join dbmaster.dep_programs dp on dp.prog_code = sp.prog_code and dp.year = sp.prog_year and dp.prog_type = 'M'
             where dp.prog_type = 'M' and s.stud_id = pUser_Id;
             case tip
             when 'B' then--Bakalavr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=49;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=55;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=27;
                end case;
             when 'M' then --Magistr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=50;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=56;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=28;
                end case;
            when 'DR' then --Doktorantura
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=50;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=56;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=28;
                end case;
             when 'DS' then --Disentantura
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=50;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=56;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=28;
                end case;
             end case;
          elsif pUserType = 'P' then
             select d.status into x from dbmaster.employee d where d.emp_id= to_number(pUser_Id);
             case x
             when 1 then--Akademik
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=45;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=51;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=29;
                end case;
             when 2 then --Idari
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=46;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=52;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=30;
                end case;
             when 3 then --Yardimci
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=47;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=53;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=31;
                end case;
             end case;
          elsif pUserType = 'K' then--Kenardan
                case pOperationType
                when 'LimitDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=48;
                when 'ExtraDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=54;
                when 'LimitMaterial' then
                    select c.data into data from lib_cfg c where c.cfg_id=32;
                end case;
          end if;

     when 2 then --Jurnal Tipi
          if pUserType = 'T' then
             select dp.edu_level into tip from dbmaster.students s
             left join dbmaster.stud_prog sp on sp.stud_id = s.stud_id
             left join dbmaster.dep_programs dp on dp.prog_code = sp.prog_code and dp.year = sp.prog_year and dp.prog_type = 'M'
             where dp.prog_type = 'M' and s.stud_id = pUser_Id;

             case tip
             when 'B' then--Bakalavr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=62;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=68;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=34;
                end case;
             when 'M' then --Magistr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=63;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=69;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=35;
                end case;
             when 'DR' then
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=63;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=69;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=35;
                end case;
             when 'DS' then --Magistr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=63;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=69;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=35;
                end case;
             end case;

          elsif pUserType = 'P' then
             select d.status into tip from dbmaster.employee d where d.emp_id= to_number(pUser_Id);
             case tip
             when 1 then--Akademik
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=58;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=64;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=36;
                end case;
             when 2 then --Idari
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=59;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=65;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=37;
                end case;
             when 3 then --Yardimci
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=60;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=66;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=38;
                end case;
             end case;
          elsif pUserType = 'K' then--Kenardan
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=61;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=67;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=57;
                end case;
          end if;

    when 3 then -- Disc Tipi
          if pUserType = 'T' then
              select dp.edu_level into tip from dbmaster.students s
              left join dbmaster.stud_prog sp on sp.stud_id = s.stud_id
              left join dbmaster.dep_programs dp on dp.prog_code = sp.prog_code and dp.year = sp.prog_year and dp.prog_type = 'M'
              where dp.prog_type = 'M' and s.stud_id = pUser_Id;

             case tip
             when 'B' then--Bakalavr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=75;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=81;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=40;
                end case;
             when 'M' then --Magistr
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=76;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=82;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=41;
                end case;
             when 'DR' then
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=76;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=82;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=41;
                end case;
             when 'DS' then
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=76;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=82;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=41;
                end case;
             end case;
          elsif pUserType = 'P' then
             select d.status into tip from dbmaster.employee d where d.emp_id= to_number(pUser_Id);
             case tip
             when 1 then--Akademik
                case pOperationType
                when 'LimitDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=71;
                when 'ExtraDay' then
                     select c.data into data from lib_cfg c where c.cfg_id=77;
                when 'LimitMaterial' then
                     select c.data into data from lib_cfg c where c.cfg_id=42;
                end case;
             when 2 then --Idari
                case pOperationType
                when 'LimitDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=72;
                when 'ExtraDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=78;
                when 'LimitMaterial' then
                    select c.data into data from lib_cfg c where c.cfg_id=43;
                end case;
             when 3 then --Yardimci
                case pOperationType
                when 'LimitDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=73;
                when 'ExtraDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=79;
                when 'LimitMaterial' then
                    select c.data into data from lib_cfg c where c.cfg_id=44;
                end case;
             end case;
          elsif pUserType = 'K' then--Kenardan
                case pOperationType
                when 'LimitDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=74;
                when 'ExtraDay' then
                    select c.data into data from lib_cfg c where c.cfg_id=80;
                when 'LimitMaterial' then
                    select c.data into data from lib_cfg c where c.cfg_id=70;
                end case;
          end if;
    else data :='0';
    end case;

    if pOperationType = 'UzatmaIcazesiVermekGunu' then-- Vaxtinin qurtarmasina nece gun qalmis uzatma icazesi verile biler, onu tutur
              select c.data into data from lib_cfg c where c.cfg_id=83;
    end if;

    if data is not null then
       Result :=to_number(data);
    end if;
    return Result;
end Func_get_loan_due_date;


/
--------------------------------------------------------
--  DDL for Function FUNC_GET_MAX_MATERIAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_GET_MAX_MATERIAL" (pUser_Cid in varchar2, material_type in number) return number is
  Result number;
begin
     select (case
                  when u.emp_id is not null then
                   Func_get_loan_due_date(u.emp_id, 'P', 'LimitMaterial', material_type)
                  when u.stud_id is not null then
                   Func_get_loan_due_date(u.stud_id, 'T', 'LimitMaterial', material_type)
                  else
                   Func_get_loan_due_date(null, 'K', 'LimitMaterial', material_type)
             end) as max_material into Result
           from lib_user_cards u
          where u.user_cid = pUser_Cid;

    return Result;
end Func_get_Max_Material;


/
--------------------------------------------------------
--  DDL for Function FUNC_IS_OFFLINE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_IS_OFFLINE" (pdate in date) return number is
  Result number; -- Bu function kitabxanada gunun is vaxti olub, olmadigini hesablayir

  sayi number;
begin
             Result:=0;
            -- Offline date'de sifaris verilibse...
            select count(*) into sayi from lib_offline_dates d where d.off_date=trunc(pdate);

            if sayi>0 then
                Result:=1;
            end if;

            if to_char(pdate,'D')='1' then -- Bazar gunune dusurse
             Result:=1;
            end if;
  return(Result);
end func_is_offline;


/
--------------------------------------------------------
--  DDL for Function FUNC_LOAN_REQUES_MAT_COUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_LOAN_REQUES_MAT_COUNT" (pUser_Cid in varchar2, material_type in number) return number is
  Result number;
begin
  case material_type
  when 1 then
   select ((select count(*)
              from lib_loans l, lib_invertory i, lib_books b
             where l.inv_id = i.inv_id and i.book_id=b.book_id
               and i.book_id is not null and b.sureli=1

               and locked = 0
               and l.user_cid = pUser_Cid) +
          (select count(*)
              from lib_inv_requests r, lib_invertory i, lib_books b
             where r.user_cid = pUser_Cid
               and r.inv_id = i.inv_id and i.book_id=b.book_id
               and i.book_id is not null and b.sureli=1
               and r.status = 0
               and sysdate < r.req_end_date))into Result from dual;
  when 2 then
       select ((select count(*)
              from lib_loans l, lib_invertory i
             where l.inv_id = i.inv_id
               and i.j_issue_id is not null
               and locked = 0
               and l.user_cid = pUser_Cid) +
          (select count(*)
              from lib_inv_requests r, lib_invertory i
             where r.user_cid = pUser_Cid
               and r.inv_id = i.inv_id
               and i.j_issue_id is not null
               and r.status = 0
               and sysdate < r.req_end_date))into Result from dual;
  when 3 then
       select ((select count(*)
              from lib_loans l, lib_invertory i
             where l.inv_id = i.inv_id
               and i.disc_id is not null
               and locked = 0
               and l.user_cid = pUser_Cid) +
          (select count(*)
              from lib_inv_requests r, lib_invertory i
             where r.user_cid = pUser_Cid
               and r.inv_id = i.inv_id
               and i.disc_id is not null
               and r.status = 0
               and sysdate < r.req_end_date))into Result from dual;
  end case;

return Result;
end Func_Loan_Reques_Mat_Count;


/
--------------------------------------------------------
--  DDL for Function FUNC_NOVBE_CEZA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_NOVBE_CEZA" (pLoanId in number) return number is
-- Novbeye Durma Cezasi ancaq materiyalin qaytarma muddeti qurtarib ve uzadilmayibsa ve bu materiala novbeye duran varsa hesablanir.
-- Uzatma Muddeti qurtardiqdan sonraki cezalari bu funksiya yox, Func_Ceza_Hesablama funksiyasi hesablayir
  Result number;
  ceza_gun number;--Xatirlatma: bu funksiya  toplam illik 25 AZN maksimum ceza hesablayir ve asagidaki her 3aylar ucun qepiklerin cem sayisi
                     -- 27 qepik olmalidir (illik 25 AZN olmasi ucun( 2500qepik/91=27 qepik/3ay  ))
                     --Bu 27 qepiyi de asagidaki kimi azalan sekilde paylasdiririq....(11,8,5,3) => 11*91 + 8*91 + 5*91 + 3*91 = 27*91 = 2500
  toplam_ceza number:=2500;    -- 25 AZN
  ilk_3ay_ceza number:=11;     -- ilk  3 ay ucun her gune 11 qepikdir
  ikinci_3ay_ceza number :=8;  -- ikinci  3 ay ucun her gune 8 qepikdir
  ucuncu_3ay_ceza number :=5;  -- ucuncu  3 ay ucun her gune 5 qepikdir
  dorduncu_3ay_ceza number :=3;-- dorduncu  3 ay ucun her gune 3 qepikdir
  vBorrowDate date;
  dtDelivery date;
  vDueDate date;
  vbook_id number;
  vj_issue_id number;
  vdisc_id number;
  verilme_suresi number;
  uzatma_suresi number;
  vSureli number := 1;
  vInvID number;
  vUserId char(9);
  max_material number;
  material_sayi number;
begin
  select i.book_id, i.j_issue_id, i.disc_id into vbook_id, vj_issue_id, vdisc_id
  from lib_inventory i, lib_loans l where i.inv_id=l.inv_id and  l.loan_id=pLoanId;



  select l.borrow_date, l.delivery_date, l.due_date, l.inv_id, l.user_cid into vBorrowDate, dtDelivery, vDueDate, vInvID, vUserId from lib_loans l where l.loan_id=pLoanId;

  if (dtDelivery is null) then dtDelivery := sysdate; end if;

  Get_Verilme_Uzatma_Suresi(vInvID, vUserId, verilme_suresi, uzatma_suresi, max_material, material_sayi);
 if vbook_id is not null then
     select b.sureli into vSureli from lib_books b where b.book_id = vbook_id;
  end if;

  if vSureli = 0 then -- suresizdirse
    uzatma_suresi := 0;
  end if;

  if uzatma_suresi > 0 and dtDelivery > vBorrowDate + verilme_suresi and vBorrowDate + verilme_suresi = vDueDate then
  -- Kitab sureliyse ve istifadecinin qaytarma vaxti catibsa, amma uzatmayibsa, o zaman bura girir, eger novbede duran varsa, novbeye durma muddetine qeder ceza hesablayir.
      select count(*) into ceza_gun from (select (level + vBorrowDate+verilme_suresi) as tarix
              from dual where (level + vBorrowDate + verilme_suresi) >= vBorrowDate+verilme_suresi and (level + vBorrowDate+verilme_suresi) < sysdate
              connect by level <= uzatma_suresi) x
              where exists(select * from lib_reserve_list r
              where nvl(r.book_id,1) = nvl(vbook_id, 1) and  nvl(r.j_issue_id,1) = nvl(vj_issue_id, 1) and nvl(r.disc_id,1) = nvl(vdisc_id, 1)
              and  x.tarix between r.action_date + 2 and r.end_date);
       --raise_application_error(-20213, ceza_gun);
       if ceza_gun > 0 then
         if ceza_gun<=91 then
                Result :=ceza_gun*ilk_3ay_ceza;
         elsif ceza_gun<=182 then
                Result :=91*ilk_3ay_ceza+(ceza_gun-91)*ikinci_3ay_ceza;
         elsif ceza_gun<=273 then
                Result :=91*ilk_3ay_ceza+91*ikinci_3ay_ceza+(ceza_gun-182)*ucuncu_3ay_ceza;
         elsif ceza_gun<=364 then
                Result :=91*ilk_3ay_ceza+91*ikinci_3ay_ceza+91*ucuncu_3ay_ceza+(ceza_gun-273)*dorduncu_3ay_ceza;
         elsif ceza_gun>=365 then
                Result :=toplam_ceza;
         end if;
      else
          Result:=0;
      end if;
      if Result > toplam_ceza then
         Result :=toplam_ceza;
      end if;
   else
      Result :=0;
   end if;

  return trunc((Result/10))*10;
  --exception when NO_DATA_FOUND then Result:=0;  return Result;

end Func_Novbe_Ceza;


/
--------------------------------------------------------
--  DDL for Function FUNC_USER_TOPLAM_CEZA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."FUNC_USER_TOPLAM_CEZA" (pUserId in varchar2) return number is
  Result number:=0;
  ceza number;
begin
  for x in(select l.loan_id from lib_loans l where l.user_cid = pUserId and l.locked = 0 and l.due_date < sysdate)loop
      Result:=Result+Func_Ceza_Hesablama(x.loan_id);
  end loop;

  select sum(l.ceza) into ceza from lib_loans l where (l.ceza_odenib=0 or l.ceza_odenib is null) and l.locked=1 and user_cid =pUserId;
  if ceza is not null then
       Result:=Result+ceza;
  end if;

  return Result;
  exception when NO_DATA_FOUND then return Result;
end Func_User_Toplam_Ceza;


/

  GRANT EXECUTE ON "DEV_LIBRARY"."FUNC_USER_TOPLAM_CEZA" TO "DBMASTER";
--------------------------------------------------------
--  DDL for Function GENERATEBARCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."GENERATEBARCODE" (lastBarcode in number) return number is
  Barcode number;
  sum_odds number;
  sum_evens number;
begin
  Barcode := substr(lastBarcode, 0, 7) + 1; /*getting first 7 digits with + 1*/
  sum_odds := (substr(Barcode, 1, 1) + substr(Barcode, 3, 1) + substr(Barcode, 5, 1)
             + substr(Barcode, 7, 1)) * 3; /*sum of odd numbers with multiply 3*/
  sum_evens := substr(Barcode, 2, 1) + substr(Barcode, 4, 1) + substr(Barcode, 6, 1); /*sum of even numbers*/
  Barcode := Barcode||substr(10 - substr(sum_odds + sum_evens, 2, 1),-1,1); /*barcode + (10 - (even + odd)->with getting last digit)*/
  return(Barcode);
end GenerateBarCode;

/
--------------------------------------------------------
--  DDL for Function GENERATEBARCODEINTERVAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."GENERATEBARCODEINTERVAL" (pCount in number) return varchar2 is
  BarcodeInterval varchar2(30);
  lastBarcode number;
begin
  select max(li.barcode) into lastBarcode from lib_inventory li;
  BarcodeInterval := GenerateNextBarCode(lastBarcode)||'-'||GenerateNextBarCode(lastBarcode+((pCount-1)||0));
  return(BarcodeInterval);
end GenerateBarcodeInterval;

/
--------------------------------------------------------
--  DDL for Function GENERATENEXTBARCODE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."GENERATENEXTBARCODE" (lastBarcode in number) return number is
  Barcode number;
  sum_odds number;
  sum_evens number;
begin
  Barcode := substr(lastBarcode, 0, 7) + 1; /*getting first 7 digits with + 1*/
  sum_odds := (substr(Barcode, 1, 1) + substr(Barcode, 3, 1) + substr(Barcode, 5, 1)
             + substr(Barcode, 7, 1)) * 3; /*sum of odd numbers with multiply 3*/
  sum_evens := substr(Barcode, 2, 1) + substr(Barcode, 4, 1) + substr(Barcode, 6, 1); /*sum of even numbers*/
  Barcode := Barcode||substr(10 - substr(sum_odds + sum_evens, 2, 1),-1,1); /*barcode + (10 - (even + odd)->with getting last digit)*/
  return(Barcode);
end GenerateNextBarCode;

/
--------------------------------------------------------
--  DDL for Function GENERATE_CARDNO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."GENERATE_CARDNO" (pUserID in varchar2, pUserType in char) return varchar2 is
  Result varchar2(7);
begin
  if pUserType = 'T' then
     select 'T'||to_char(sysdate, 'YY') into Result from dual;
  elsif pUserType = 'P' then
     select to_char(sysdate, 'YY') into Result from dual;
     select 'P'||Result||(case when e.status = 1 then 'A' when e.status = 2 then 'I' else 'Y' end) into Result 
     from dbmaster.employee e where e.emp_id=pUserID;
  elsif pUserType = 'K' then
     Result := 'K'||to_char(sysdate, 'YY');
  end if;

  return Get_Next_Card_No(Result);
end Generate_CardNo;


/
--------------------------------------------------------
--  DDL for Function GET_NEXT_CARD_NO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "DEV_LIBRARY"."GET_NEXT_CARD_NO" (pPrefix in varchar2) return varchar2 is
  Result varchar2(10);
begin
  select pPrefix||lpad(to_number(nvl(substr(max(t.user_cid), length(pPrefix)+1),0))+1, 7-length(pPrefix), '0') into Result from lib_user_cards t where t.user_cid like pPrefix||'%';
  return(Result);
exception when NO_DATA_FOUND then select pPrefix||lpad(1, 7-length(pPrefix), '0') into Result from dual;
end Get_Next_Card_No;


/
--------------------------------------------------------
--  DDL for Synonymn LIB_INVERTORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE SYNONYM "DEV_LIBRARY"."LIB_INVERTORY" FOR "DEV_LIBRARY"."LIB_INVENTORY";
--------------------------------------------------------
--  Constraints for Table LIB_DEWEY
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_DEWEY" MODIFY ("KEY" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_DEWEY" ADD CONSTRAINT "PK_DEWEY$KEY" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_PUBLISH_INTERVALS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" MODIFY ("PUBLISH_INTERVAL_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ADD CONSTRAINT "PK_LIB_PUBLISH_INTERVALS$ID" PRIMARY KEY ("PUBLISH_INTERVAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ADD CONSTRAINT "UQI_LIB_PUBLISH_INTERV$NAME_AZ" UNIQUE ("NAME_AZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ADD CONSTRAINT "UQI_LIB_PUBLISH_INTERV$NAME_EN" UNIQUE ("NAME_EN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ADD CONSTRAINT "UQI_LIB_PUBLISH_INTERV$NAME_TR" UNIQUE ("NAME_TR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_BATCH_STATUS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BATCH_STATUS" ADD CONSTRAINT "PK_LIB_BATCH_STATUS$ID" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_HESAB_MATS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" MODIFY ("HESAB_MAT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "PK_LIB_HESAB_MATS$HESAB_MAT_ID" PRIMARY KEY ("HESAB_MAT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_SUBJECTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_SUBJECTS" MODIFY ("SUBJECT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_SUBJECTS" ADD CONSTRAINT "PK_LIB_SUBJECTS$SUBJECT_ID" PRIMARY KEY ("SUBJECT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_SUBJECTS" ADD CONSTRAINT "UQ_LIB_SUBJECTS$DEWEY_CODE" UNIQUE ("DEWEY_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_INVENTORY_TEMP
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" MODIFY ("INV_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ADD CONSTRAINT "PK_INVERTORY$INV_ID_TEMP" PRIMARY KEY ("INV_ID")
  USING INDEX (CREATE INDEX "DEV_LIBRARY"."LIB_INVENTORY$INV_ID_BOOK_ID_TEMP" ON "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ("INV_ID", "BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY" )  ENABLE;
--------------------------------------------------------
--  Constraints for Table MARC_SUBFIELD_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."MARC_SUBFIELD_STRUCTURE" MODIFY ("HIDDEN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIB_INVENTORY_TAGS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TAGS" MODIFY ("TAG_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TAGS" ADD CONSTRAINT "PK_LIB_INVENTORY_TAGS$TAG_ID" PRIMARY KEY ("TAG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_STUD_LIBRARIAN
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_STUD_LIBRARIAN" MODIFY ("STUD_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_STUD_LIBRARIAN" MODIFY ("PASSW" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TABLE_LIST
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."TABLE_LIST" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIB_MAT_SUBJECTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" MODIFY ("MAT_SUBJ_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "PK_LIB_MAT_SUBJECTS$ID" PRIMARY KEY ("MAT_SUBJ_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "UQI_LIB_MAT_SUBJECT$SUBJECT_ID" UNIQUE ("BOOK_ID", "JOURNAL_ID", "DEWEY_KEY", "DISC_ID", "DEP_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_LOAN_ACTION
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_LOAN_ACTION" MODIFY ("LOAN_ACTION_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_LOAN_ACTION" ADD CONSTRAINT "PK_LIB_LOAN_ACTION$ID" PRIMARY KEY ("LOAN_ACTION_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_MATERIAL_TYPES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_TYPES" ADD CONSTRAINT "PK_LIB_MATERIAL_TYPES$KEY" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_INV_REQUESTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" MODIFY ("LIB_INV_REQ_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" MODIFY ("USER_CID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" MODIFY ("INV_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" MODIFY ("ISHAZIR" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" ADD CONSTRAINT "PK_LIB_INV_REQ_ID" PRIMARY KEY ("LIB_INV_REQ_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table OAUTH_CLIENTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("REDIRECT" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("PERSONAL_ACCESS_CLIENT" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("PASSWORD_CLIENT" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" MODIFY ("REVOKED" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_CLIENTS" ADD CONSTRAINT "OAUTH_CLIENTS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WEB_LOG
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" MODIFY ("LOG_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" MODIFY ("LOGIN_STATUS" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" MODIFY ("LOG_DATE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" ADD CONSTRAINT "PK_WEB_LOG$ID" PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" ADD CONSTRAINT "CK_WEB_LOG$STATUS" CHECK (login_status in(0,1,2)) ENABLE;
--------------------------------------------------------
--  Constraints for Table OAUTH_AUTH_CODES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" MODIFY ("REVOKED" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_AUTH_CODES" ADD CONSTRAINT "OAUTH_AUTH_CODES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_BOOK_AUTHORS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" MODIFY ("BOOK_AUTHOR_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" MODIFY ("IS_MAIN" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ADD CONSTRAINT "PK_LIB_BOOK_AUTHORS$ID" PRIMARY KEY ("BOOK_AUTHOR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ADD CONSTRAINT "UQI_LIB_BOOK_AUTHOR$AUTHORNAME" UNIQUE ("BOOK_ID", "NAME", "SURNAME", "SIGN", "IS_MAIN", "J_ISSUE_ID", "DISC_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_HESAB_MATS_TEMP
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS_TEMP" MODIFY ("HESAB_MAT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIB_CFG
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_CFG" MODIFY ("CFG_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CFG" MODIFY ("CFG_TYPE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CFG" MODIFY ("DATA" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CFG" ADD CONSTRAINT "PK_LIB_CFG$CFG_ID" PRIMARY KEY ("CFG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_MATERIAL_LANG
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" MODIFY ("MAT_LANG_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" MODIFY ("LANG_CODE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" ADD CONSTRAINT "PK_LIB_MATERIAL_LANG$ID" PRIMARY KEY ("MAT_LANG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" ADD CONSTRAINT "UQI_LIB_MATERIAL_LANG$LANG" UNIQUE ("BOOK_ID", "JOURNAL_ID", "LANG_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_PUBLISHERS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISHERS" MODIFY ("PUBLISHER_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISHERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISHERS" ADD CONSTRAINT "PK_LIB_PUBLISHERS$PUBLISHER_ID" PRIMARY KEY ("PUBLISHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_PUBLISHERS" ADD CONSTRAINT "UQI_LIB_PUBLISHERS$NAME" UNIQUE ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_ETIKET_SEBET
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_ETIKET_SEBET" MODIFY ("SEBET_ADI" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_ETIKET_SEBET" ADD CONSTRAINT "UQI_LIB_ETIKET_SEBET" UNIQUE ("SEBET_ADI", "INV_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_INVENTORY
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" MODIFY ("INV_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "PK_INVERTORY$INV_ID" PRIMARY KEY ("INV_ID")
  USING INDEX (CREATE INDEX "DEV_LIBRARY"."LIB_INVENTORY$INV_ID_BOOK_ID" ON "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID", "BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY" )  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_BOOK_INFO
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_INFO" MODIFY ("F035" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_INFO" ADD CONSTRAINT "PRM_ID" PRIMARY KEY ("F035")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_JOURNAL_ISSUES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" MODIFY ("J_ISSUE_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" MODIFY ("JOURNAL_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" MODIFY ("ISSUE_NAME" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ADD CONSTRAINT "PK_LIB_J_ISSUES$J_ISSUE_ID" PRIMARY KEY ("J_ISSUE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ADD CONSTRAINT "UQI_LIB_J_ISSUES$ISSUE_NAME" UNIQUE ("JOURNAL_ID", "ISSUE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_SUPPLIERS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_SUPPLIERS" MODIFY ("SUPPLIER_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_SUPPLIERS" ADD CONSTRAINT "PK_LIB_SUPPLIERS$SUPPLIER_ID" PRIMARY KEY ("SUPPLIER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_SUPPLIERS" ADD CONSTRAINT "UQI_LIB_SUPPLIERS$NAME" UNIQUE ("SUPPLIER_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table OAUTH_ACCESS_TOKENS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" MODIFY ("REVOKED" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_ACCESS_TOKENS" ADD CONSTRAINT "OAUTH_ACCESS_TOKENS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_CONTACTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" MODIFY ("CONTACT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" MODIFY ("TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" MODIFY ("CONTACT" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" ADD CONSTRAINT "PK_CONTACTS$ID" PRIMARY KEY ("CONTACT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_CURRENCIES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_CURRENCIES" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CURRENCIES" MODIFY ("CURRENCY" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CURRENCIES" MODIFY ("TITLE_EN" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CURRENCIES" ADD CONSTRAINT "PK_CURRENCIES$CURRENCY" PRIMARY KEY ("CURRENCY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_CURRENCIES" ADD CONSTRAINT "UQ_CURRENCIES$CODE" UNIQUE ("CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_MARC_SUBFIELDS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MARC_SUBFIELDS" ADD CONSTRAINT "UQI_LIB_FIELD_CODE$SUBFIELD_ID" UNIQUE ("FIELD_CODE", "SUBFIELD_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SIGLE_TYPES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."SIGLE_TYPES" MODIFY ("KEY" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."SIGLE_TYPES" ADD CONSTRAINT "PK_SIGLE_TYPES$KEY" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_INVENTORIES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORIES" MODIFY ("INV_ID" CONSTRAINT "BIN$ra4JCDx/IrbgUyEBZAoXAQ==$0" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORIES" ADD CONSTRAINT "BIN$ra4JCDyAIrbgUyEBZAoXAQ==$0" PRIMARY KEY ("INV_ID")
  USING INDEX (CREATE UNIQUE INDEX "DEV_LIBRARY"."BIN$ra4JCDyBIrbgUyEBZAoXAQ==$0" ON "DEV_LIBRARY"."LIB_INVENTORIES" ("INV_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY" )  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_LOGS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_LOGS" MODIFY ("LOG_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_LOGS" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_LOGS" MODIFY ("ACTION_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIB_RESERVE_LIST
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" MODIFY ("LIB_RESERVE_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" MODIFY ("USER_CID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" ADD CONSTRAINT "PK_LIB_RESERVE_LIST$ID" PRIMARY KEY ("LIB_RESERVE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_USER_CARDS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" MODIFY ("IS_ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" MODIFY ("USER_CID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "PK_LIB_USER_CARDS$USER_CARD_ID" PRIMARY KEY ("USER_CID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "UQI_LIB_USER_CARDS$EMP_ID" UNIQUE ("EMP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "UQI_LIB_USER_CARDS$STUD_ID" UNIQUE ("STUD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "CK_USER_CARDS" CHECK (is_active in(0,1)) ENABLE;
--------------------------------------------------------
--  Constraints for Table THESIS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."THESIS" MODIFY ("F035" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."THESIS" ADD CONSTRAINT "F035" PRIMARY KEY ("F035")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table INVENTORY_BOOK
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."INVENTORY_BOOK" ADD CONSTRAINT "PK_INVENTORY_BOOK$ID" PRIMARY KEY ("INV_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."INVENTORY_BOOK" MODIFY ("INV_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIB_OFFLINE_DATES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_OFFLINE_DATES" MODIFY ("OFF_DATE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_OFFLINE_DATES" ADD CONSTRAINT "UQI_LIB_OFFLINE_DATE$OFF_DATE" UNIQUE ("OFF_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_HESABLAR
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" MODIFY ("HESAB_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" ADD CONSTRAINT "PK_LIB_HESABLAR$HESAB_ID" PRIMARY KEY ("HESAB_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" ADD CONSTRAINT "UQI_LIB_HESABLAR$TITLE" UNIQUE ("TITLE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_BIBLIOGRAPHIC_INFO
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" MODIFY ("INFO_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" MODIFY ("XML_DATA" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ADD CONSTRAINT "PK_BIBLIOGRAPHIC_INFO$ID" PRIMARY KEY ("INFO_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_CONTACT_TYPES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" MODIFY ("TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" MODIFY ("TITLE_EN" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" MODIFY ("TITLE_RU" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" MODIFY ("TITLE_KZ" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACT_TYPES" ADD CONSTRAINT "PK_CONTACT_TYPES$ID" PRIMARY KEY ("TYPE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_DISCS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_DISCS" MODIFY ("DISC_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_DISCS" ADD CONSTRAINT "PK_LIB_DISCS$DISC_ID" PRIMARY KEY ("DISC_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_DISCS" ADD CONSTRAINT "UQI_LIB_DISCS$NAME" UNIQUE ("NAME", "ISBN", "PUB_YEAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEMP_LIB_AUTHORS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" MODIFY ("BOOK_AUTHOR_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" MODIFY ("IS_MAIN" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" ADD CONSTRAINT "PK_LIB_BOOK_AUTHORS$TEMP_ID" PRIMARY KEY ("BOOK_AUTHOR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" ADD CONSTRAINT "UQI_LIB_BOOK_AUTHOR$TEMP_AUTHORNAME" UNIQUE ("BOOK_ID", "NAME", "SURNAME") DISABLE;
--------------------------------------------------------
--  Constraints for Table LIB_JOURNALS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" MODIFY ("JOURNAL_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" MODIFY ("TITLE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "PK_LIB_JOURNALS$JOURNAL_ID" PRIMARY KEY ("JOURNAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "UQI_LIB_JOURNALS$TITLE" UNIQUE ("TITLE", "ISBN", "PUB_YEAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table OAUTH_REFRESH_TOKENS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" MODIFY ("ACCESS_TOKEN_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" MODIFY ("REVOKED" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_REFRESH_TOKENS" ADD CONSTRAINT "OAUTH_REFRESH_TOKENS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_BOOKS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BOOKS" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOKS" MODIFY ("TITLE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOKS" ADD CONSTRAINT "PK_LIB_BOOKS$BOOK_ID" PRIMARY KEY ("BOOK_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_JOURNAL_SUBSCRIPTION
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("JOURNAL_S_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("JOURNAL_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("START_DATE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("END_DATE" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("WARNING_STATUS" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" MODIFY ("SON" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" ADD CONSTRAINT "PK_LIB_JOURNAL_SUBSRIPTION$ID" PRIMARY KEY ("JOURNAL_S_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_LOANS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_LOANS" MODIFY ("LOAN_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_LOANS" ADD CONSTRAINT "PK_LIB_LOANS$LOAN_ID" PRIMARY KEY ("LOAN_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MIGRATIONS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."MIGRATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."MIGRATIONS" MODIFY ("MIGRATION" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."MIGRATIONS" MODIFY ("BATCH" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."MIGRATIONS" ADD CONSTRAINT "MIGRATIONS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table OAUTH_PERSONAL_ACCESS_CLIENTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS" MODIFY ("CLIENT_ID" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."OAUTH_PERSONAL_ACCESS_CLIENTS" ADD CONSTRAINT "OAU_PERSON_ACCE_CLIEN_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_MARC_FIELDS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MARC_FIELDS" ADD CONSTRAINT "PK_LIB_FIELD_CODE$FIELD_ID" PRIMARY KEY ("FIELD_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LIB_SUPPLY_TYPES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_SUPPLY_TYPES" MODIFY ("KEY" NOT NULL ENABLE);
  ALTER TABLE "DEV_LIBRARY"."LIB_SUPPLY_TYPES" ADD CONSTRAINT "PK_LIB_SUPPLY_TYPES$KEY" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "LIBRARY"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_BIBLIOGRAPHIC_INFO
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ADD CONSTRAINT "FK_BIBLIOGRAPHIC_INFO$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ADD CONSTRAINT "FK_BIBLIOGRAPHIC_INFO$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BIBLIOGRAPHIC_INFO" ADD CONSTRAINT "FK_BIBLIOGRAPHIC_INFO$JOURNAL_ID" FOREIGN KEY ("JOURNAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_BOOKS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BOOKS" ADD CONSTRAINT "FK_LIB_BOOKS$PUBLISHER_ID" FOREIGN KEY ("PUBLISHER_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_PUBLISHERS" ("PUBLISHER_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOKS" ADD CONSTRAINT "FK_LIB_BOOKS$TYPE_KEY" FOREIGN KEY ("TYPE")
	  REFERENCES "DEV_LIBRARY"."LIB_MATERIAL_TYPES" ("KEY") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_BOOK_AUTHORS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ADD CONSTRAINT "FK_LIB_BOOK_AUTHOR$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ADD CONSTRAINT "FK_LIB_AUTHOR$J_ISSUE_ID" FOREIGN KEY ("J_ISSUE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_BOOK_AUTHORS" ADD CONSTRAINT "FK_LIB_AUTHOR$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_CONTACTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" ADD CONSTRAINT "FK_CONTACTS$TYPE" FOREIGN KEY ("TYPE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_CONTACT_TYPES" ("TYPE_ID") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" ADD CONSTRAINT "FK_CONTACTS$PUBLISHER" FOREIGN KEY ("PUBLISHER")
	  REFERENCES "DEV_LIBRARY"."LIB_PUBLISHERS" ("PUBLISHER_ID") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_CONTACTS" ADD CONSTRAINT "FK_CONTACTS$SUPPLIER" FOREIGN KEY ("SUPPLIER")
	  REFERENCES "DEV_LIBRARY"."LIB_SUPPLIERS" ("SUPPLIER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_DISCS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_DISCS" ADD CONSTRAINT "FK_LIB_DISCS$LANGUAGE_ID" FOREIGN KEY ("LANGUAGE")
	  REFERENCES "DBMASTER"."LANGUAGE" ("LANG_CODE") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_DISCS" ADD CONSTRAINT "FK_LIB_DISCS$TYPE_KEY" FOREIGN KEY ("TYPE")
	  REFERENCES "DEV_LIBRARY"."LIB_MATERIAL_TYPES" ("KEY") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_HESABLAR
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" ADD CONSTRAINT "FK_LIB_HESABLAR$SUPPLIER_ID" FOREIGN KEY ("SUPPLIER_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_SUPPLIERS" ("SUPPLIER_ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" ADD CONSTRAINT "FK_LIB_HESABLAR$SUPPLY_TYPE" FOREIGN KEY ("SUPPLY_TYPE")
	  REFERENCES "DEV_LIBRARY"."LIB_SUPPLY_TYPES" ("KEY") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESABLAR" ADD CONSTRAINT "FK_LIB_HESABLAR$STATUS" FOREIGN KEY ("STATUS")
	  REFERENCES "DEV_LIBRARY"."LIB_BATCH_STATUS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_HESAB_MATS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "FK_LIB_HESAB_MATS$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "FK_LIB_HESAB_MATS$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "FK_LIB_HESAB_MATS$HESAB_ID" FOREIGN KEY ("HESAB_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_HESABLAR" ("HESAB_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "FK_LIB_HESAB_MATS$J_ISSUE_ID" FOREIGN KEY ("J_ISSUE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_HESAB_MATS" ADD CONSTRAINT "FK_LIB_HESAB_MATS$USER_CID" FOREIGN KEY ("USER_CID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_INVENTORY
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVERTORY$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVERTORY$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVERTORY$HESAB_ID" FOREIGN KEY ("HESAB_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_HESABLAR" ("HESAB_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVERTORY$J_ISSUE_ID" FOREIGN KEY ("J_ISSUE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVERTORY$SIGLE_TYPE" FOREIGN KEY ("SIGLE_TYPE")
	  REFERENCES "DEV_LIBRARY"."SIGLE_TYPES" ("KEY") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "USER_CID_FK" FOREIGN KEY ("USER_CID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY" ADD CONSTRAINT "FK_INVENTORY$CURRENCY" FOREIGN KEY ("CURRENCY")
	  REFERENCES "DEV_LIBRARY"."LIB_CURRENCIES" ("CURRENCY") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_INVENTORY_TAGS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TAGS" ADD CONSTRAINT "FK_LIB_INVENTORY_TAGS$INV_ID" FOREIGN KEY ("INV_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_INVENTORY_TEMP
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ADD CONSTRAINT "FK_INVERTORY$BOOK_ID_TEMP" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ADD CONSTRAINT "FK_INVERTORY$DISC_ID_TEMP" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ADD CONSTRAINT "FK_INVERTORY$HESAB_ID_TEMP" FOREIGN KEY ("HESAB_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_HESABLAR" ("HESAB_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INVENTORY_TEMP" ADD CONSTRAINT "FK_INVERTORY$J_ISSUE_ID_TEMP" FOREIGN KEY ("J_ISSUE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_INV_REQUESTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" ADD CONSTRAINT "FK_LIB_INV_REQ_ID$INV_ID" FOREIGN KEY ("INV_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_INV_REQUESTS" ADD CONSTRAINT "FK_LIB_INV_REQ_ID$USER_CID" FOREIGN KEY ("USER_CID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_JOURNALS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "FK_LIB_JOURNALS$PUBLISHER_ID" FOREIGN KEY ("PUBLISHER_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_PUBLISHERS" ("PUBLISHER_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "FK_LIB_JOURNALS$P_INTERVAL_ID" FOREIGN KEY ("PUBLISH_INTERVAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_PUBLISH_INTERVALS" ("PUBLISH_INTERVAL_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "FK_LIB_JOURNALS$LANGUAGE_ID" FOREIGN KEY ("LANGUAGE")
	  REFERENCES "DBMASTER"."LANGUAGE" ("LANG_CODE") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNALS" ADD CONSTRAINT "FK_LIB_JOURNALS$TYPE_KEY" FOREIGN KEY ("TYPE")
	  REFERENCES "DEV_LIBRARY"."LIB_MATERIAL_TYPES" ("KEY") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_JOURNAL_ISSUES
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ADD CONSTRAINT "FK_LIB_J_ISSUES$JOURNAL_ID" FOREIGN KEY ("JOURNAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_JOURNAL_SUBSCRIPTION
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_JOURNAL_SUBSCRIPTION" ADD CONSTRAINT "FK_LIB_J_SUBSRIPTION$JOURN_ID" FOREIGN KEY ("JOURNAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_LOANS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_LOANS" ADD CONSTRAINT "FK_LIB_LOANS$INV_ID" FOREIGN KEY ("INV_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_INVENTORY" ("INV_ID") DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_LOANS" ADD CONSTRAINT "FK_LIB_LOANS$USER_CID" FOREIGN KEY ("USER_CID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_LOAN_ACTION
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_LOAN_ACTION" ADD CONSTRAINT "FK_LIB_LOAN_ACTION$LOAN_ID" FOREIGN KEY ("LOAN_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_LOANS" ("LOAN_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_MARC_SUBFIELDS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MARC_SUBFIELDS" ADD CONSTRAINT "FK_LIB_FIELD_CODE$FIELD_ID" FOREIGN KEY ("FIELD_CODE")
	  REFERENCES "DEV_LIBRARY"."LIB_MARC_FIELDS" ("FIELD_CODE") DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_MATERIAL_LANG
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" ADD CONSTRAINT "FK_LIB_MATERIAL_LANG$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MATERIAL_LANG" ADD CONSTRAINT "FK_LIB_MATERIAL_LANG$J_ID" FOREIGN KEY ("JOURNAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_MAT_SUBJECTS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "FK_LIB_MAT_SUBJECTS$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "FK_LIB_MAT_SUBJECTS$DEWEY_ID" FOREIGN KEY ("DEWEY_KEY")
	  REFERENCES "DEV_LIBRARY"."LIB_DEWEY" ("KEY") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "FK_LIB_MAT_SUBJECTS$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "FK_LIB_MAT_SUBJECTS$JOURNAL_ID" FOREIGN KEY ("JOURNAL_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNALS" ("JOURNAL_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_MAT_SUBJECTS" ADD CONSTRAINT "FK_LIB_MAT_SUBJECTS$SUBJECT_ID" FOREIGN KEY ("SUBJECT_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_SUBJECTS" ("SUBJECT_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_RESERVE_LIST
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" ADD CONSTRAINT "FK_LIB_RESERVE_LIST$BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" ADD CONSTRAINT "FK_LIB_RESERVE_LIST$DISC_ID" FOREIGN KEY ("DISC_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_DISCS" ("DISC_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" ADD CONSTRAINT "FK_LIB_RESERVE_LIST$J_ISSUE_ID" FOREIGN KEY ("J_ISSUE_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_JOURNAL_ISSUES" ("J_ISSUE_ID") ON DELETE CASCADE DISABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_RESERVE_LIST" ADD CONSTRAINT "FK_LIB_RESERVE_LIST$USER_CID" FOREIGN KEY ("USER_CID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIB_USER_CARDS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "FK_LIB_USER_CARDS$STUD_ID" FOREIGN KEY ("STUD_ID")
	  REFERENCES "DBMASTER"."STUDENTS" ("STUD_ID") ENABLE;
  ALTER TABLE "DEV_LIBRARY"."LIB_USER_CARDS" ADD CONSTRAINT "FK_LIB_USER_CARDS$EMP_ID" FOREIGN KEY ("EMP_ID")
	  REFERENCES "DBMASTER"."EMPLOYEE" ("EMP_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TEMP_LIB_AUTHORS
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."TEMP_LIB_AUTHORS" ADD CONSTRAINT "FK_LIB_BOOK_AUTHOR$TEMP_BOOK_ID" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_BOOKS" ("BOOK_ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table WEB_LOG
--------------------------------------------------------

  ALTER TABLE "DEV_LIBRARY"."WEB_LOG" ADD CONSTRAINT "FK_WEB_LOG$USER" FOREIGN KEY ("USER_ID")
	  REFERENCES "DEV_LIBRARY"."LIB_USER_CARDS" ("USER_CID") ENABLE;
